(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    281503,       5669]
NotebookOptionsPosition[    276799,       5511]
NotebookOutlinePosition[    277171,       5527]
CellTagsIndexPosition[    277128,       5524]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Neural Networks", "Title",
 CellChangeTimes->{{3.6805340369401255`*^9, 3.6805340397721033`*^9}, 
   3.6805342179092436`*^9, {3.6805363714444547`*^9, 3.6805363715004406`*^9}}],

Cell["Use a GPU for training, when available:", "Text",
 CellChangeTimes->{{3.680534931845997*^9, 3.680534941341607*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"SetOptions", "[", 
   RowBox[{"NetTrain", ",", 
    RowBox[{"TargetDevice", "\[Rule]", "\"\<GPU\>\""}]}], "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.680450832737338*^9, 3.680450847613676*^9}, 
   3.680534057604774*^9}],

Cell[CellGroupData[{

Cell["Multi Layer Neural Networks", "Section",
 CellChangeTimes->{{3.6804505426775184`*^9, 3.680450569773883*^9}, {
  3.680451094709401*^9, 3.680451104045273*^9}, {3.6804593462880363`*^9, 
  3.6804593555119247`*^9}, {3.6805352038457203`*^9, 3.680535203973715*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "Training for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"y", " ", "=", " ", 
    SuperscriptBox["x", "2"]}], TraditionalForm]]]
}], "Subsubsection",
 CellChangeTimes->{{3.6804507867252703`*^9, 3.6804508078216476`*^9}, {
   3.680450965765478*^9, 3.6804509705495915`*^9}, {3.6804510395973988`*^9, 
   3.6804510410773745`*^9}, 3.6805352244956656`*^9}],

Cell["\<\
Here add a nonlinear hyperbolic Tan function, so see how the results improve.\
\>", "Text",
 CellChangeTimes->{{3.6804576211557374`*^9, 3.680457655964021*^9}, {
  3.680535345229656*^9, 3.680535387109249*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"DotPlusLayer", "[", "1", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"ElementwiseLayer", "[", "Tanh", "]"}]}], "\[IndentingNewLine]",
      "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", "\"\<Scalar\>\""}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.6803580407480574`*^9, 3.680358081136017*^9}, 
   3.680358318545034*^9, {3.680358450833645*^9, 3.680358454922589*^9}, {
   3.680358520949281*^9, 3.6803585273934994`*^9}, {3.680450694661951*^9, 
   3.680450695821642*^9}, 3.680450816894287*^9, {3.680451119407272*^9, 
   3.6804512049501567`*^9}, 3.6804576635645747`*^9, {3.680535267309823*^9, 
   3.6805352953821054`*^9}, {3.6805353777100086`*^9, 3.6805353898305035`*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"encoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Inputs", "Input"}, 
             "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "2"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 1}], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[1, {1}]]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {1}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "2", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`EncodedType[
             NetEncoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Output" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{379., {42., 51.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.6805352960508585`*^9, {3.680535377980404*^9, 3.6805353902345023`*^9}, 
   3.6805378917841134`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetInitialize", "[", "net", "]"}]}]], "Input",
 CellChangeTimes->{{3.680358433289722*^9, 3.6803584364737926`*^9}, 
   3.6804508183659563`*^9, 3.680535300109394*^9}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"encoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Inputs", "Input"}, 
             "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "2"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 1}], "Biases" -> 
               NeuralNetworks`TensorT[1, {1}]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {1}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "2", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`EncodedType[
             NetEncoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Output" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{379., {42., 51.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.680535300720543*^9, 3.680535392264512*^9, 
  3.6805378961581173`*^9}]
}, Open  ]],

Cell["Create the training data set:", "Text",
 CellChangeTimes->{{3.6805353990454774`*^9, 3.6805354054615884`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"x", "\[Rule]", 
      RowBox[{"x", "^", "2"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"RandomReal", "[", 
        RowBox[{"1", ",", "10000"}], "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.680358323212538*^9, 3.6803584031626587`*^9}, {
   3.68035846091537*^9, 3.68035846465798*^9}, {3.680358535081916*^9, 
   3.6803585378656015`*^9}, 3.6804507086856833`*^9, {3.6804509096300173`*^9, 
   3.6804509097505503`*^9}, {3.680450994789851*^9, 3.680450996390175*^9}, {
   3.6804510501735764`*^9, 3.68045105076607*^9}}],

Cell["Train with the data set:", "Text",
 CellChangeTimes->{{3.6805354208211308`*^9, 3.680535424957285*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"result", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", "data"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6803583683570848`*^9, 3.6803583753528333`*^9}, 
   3.680358427497135*^9, 3.6804508205499535`*^9, 3.6804511683417273`*^9}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"encoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Inputs", "Input"}, 
             "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "2"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 1}], "Biases" -> 
               NeuralNetworks`TensorT[1, {1}]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {1}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "2", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`EncodedType[
             NetEncoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Output" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{379., {42., 51.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.68045116906149*^9, 3.680451213600884*^9, 
  3.680458077024909*^9, 3.680535314618645*^9, 3.6805379130219545`*^9}]
}, Open  ]],

Cell["Visually inspect the result.", "Text",
 CellChangeTimes->{{3.6805354416378117`*^9, 3.6805354476133223`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"x", "^", "2"}], ",", 
     RowBox[{"result", "[", "x", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6803583789252787`*^9, 3.6803584162012367`*^9}, {
   3.6803584735966024`*^9, 3.6803584917210913`*^9}, {3.680358552786993*^9, 
   3.6803585569379997`*^9}, {3.6804507381376443`*^9, 3.6804507479426928`*^9}, 
   3.680450929230296*^9, {3.680451013709833*^9, 3.6804510138222623`*^9}, 
   3.680451076397651*^9, {3.6805354309283857`*^9, 3.6805354343522263`*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
l0zPzRHYjtWjv/N/9SW6zA==
      "]]}, 
    {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1:eJwl0wtMU2cUB/CCLDofVdRMdFYtjwUfoPGBr5l/nUaRxzaKRBMVG3So6KaC
QVm2SA0lxqklhvjCsSrqeAQKgS5m1EmUMa0KSMt4WPuivR/IayqVoQH0nu8m
Nze/nHP/59wvufKkw8rvfCUSCT7e4tNH8aYwqvhvkXR5v1g3ufT7f8jJaVr4
DpVM+TzERL4zWICIUdUf8WVPyJegx5Os5fV1CxpEq7RBBszN6R4q6mskX55Z
je5Bu615SZNox464Gtx8WW2SnjeT+2IeQCr7vd/ttlA/VtTh7AFDsi74X9EK
X+Eh3ipK3PtPtojWpZse49jS2qrPHrSKnmdKr4e9rPaXZ/J20TWy4ka8T7Hk
zf/xOdXvT2rCwvVjR5KrrZSXkGDG5hvyfRUzbFS/XmnBcdnuQOdOO9nlbcai
noQJLbEOygsIa8G0yf+Nq33HvTqjFX738vRB15zUbylqw8Hl1W2fRrvoPAZ6
21GyJUn311uyqjPECm/3rCnCxQ7aP3TDCxjiN4/J3eim/sBUG05Gan6rEsgK
Z7Yd8hdRrQUaD72/LNKBNSuzcmcuFWjesMWBnXMahnzMZIUiwQmv6ZzriJrR
fh6rE5f9Eo8pgzv5eW93YZrNcMO3lqzYW+/CJz+rt64+2iU6Uxr9ca+iRL1r
6kuqrzd2IPWq/tzU+2SJepkbdxeeHuf/QzflB91ywz8qddEpaQ/1B0z0wBrW
aM4wknWHT3hQno9gd2Iv1bPbPdilj/CXjZAz21cKyNRcV1uL++j73l8RUNop
y5PG9FN/4WsBp3/VqGxfkyXhAwL2KntDyuLIqkqvgNlGY3nsNnLN3f8FnNHu
qDubRNY1jAjYH3Hl1fgMcmbXeIbArOmRY2+T5w0EMoys+mlSSyHPTwtmaOvt
aLpdwvNehTDkbKvctamCz+sLZRhdoEzTGPl+nnAG6zNt/hgz73+4huFO9uAe
czPP3/glQ+7a3fMLWvn8e+sYom+FV31l4zYoGP488fSRuovvm7+J4WLYCm1c
D68HRDIcdV3bKu/neRe2MITGHLLXDPB6VgyDn4/lZs4g93Asg8OwNkX1ju+X
/g2DMaVg8ZLhfv5/fctwae4E7+gor+9TMnwANguk9g==
      "]]}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 1}, {0, 1}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.6804509250131807`*^9, 3.6804509297789345`*^9}, 
   3.6804510142546864`*^9, 3.6804510767099495`*^9, 3.6804512176141224`*^9, 
   3.680458079327179*^9, 3.680535318623041*^9, 3.6805354350759673`*^9, 
   3.6805379163708506`*^9}]
}, Open  ]],

Cell["\<\
This result is still rather bad, so next let\[CloseCurlyQuote]s increase the \
number of nodes to give the neural network more degrees of freedom to work \
with.\
\>", "Text",
 CellChangeTimes->{{3.6805354560133505`*^9, 3.680535491501125*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"x", "^", "2"}], ",", 
     RowBox[{"result", "[", "x", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "4"}], ",", "4"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.680537932259805*^9, 3.680537936091951*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
//2Q/wMMLnsl
      "]]}, 
    {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
588j/v//fwAXEv8PNpVvbQ==
      "]]}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-4, 4}, {-0.9998165369033813, 15.999998693877577`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.6805379368922186`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Training for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"y", " ", "=", " ", 
    SuperscriptBox["x", "2"]}], TraditionalForm]]],
 ", second attempt"
}], "Subsubsection",
 CellChangeTimes->{{3.6804507867252703`*^9, 3.6804508078216476`*^9}, {
   3.680450965765478*^9, 3.6804509705495915`*^9}, {3.6804510395973988`*^9, 
   3.6804510410773745`*^9}, 3.680535226358311*^9, {3.6805354954532537`*^9, 
   3.680535499053232*^9}}],

Cell["\<\
Here we set up a neural network with 10 nodes in the first fully connected \
layer. Then we use the hyperbolic tan function to introduce a non-linear \
element. Finally we add one more fully-connected layer to end up with a \
single scalar output value:\
\>", "Text",
 CellChangeTimes->{{3.6805355253489747`*^9, 3.680535629413534*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"DotPlusLayer", "[", "10", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"ElementwiseLayer", "[", "Tanh", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"DotPlusLayer", "[", "1", "]"}]}], "\[IndentingNewLine]", "}"}],
     ",", "\[IndentingNewLine]", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", "\"\<Scalar\>\""}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.6803580407480574`*^9, 3.680358081136017*^9}, 
   3.680358318545034*^9, {3.680358450833645*^9, 3.680358454922589*^9}, {
   3.680358520949281*^9, 3.6803585273934994`*^9}, {3.680450694661951*^9, 
   3.680450695821642*^9}, 3.680450816894287*^9, {3.680451119407272*^9, 
   3.6804512049501567`*^9}, 3.68045125579736*^9, {3.680451324085854*^9, 
   3.680451472030263*^9}, {3.680451504061485*^9, 3.6804515104773593`*^9}, {
   3.6804581003940325`*^9, 3.680458100681896*^9}, {3.6804582581396284`*^9, 
   3.680458258243578*^9}, {3.6805355072942867`*^9, 3.6805355188695793`*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"encoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Inputs", "Input"}, 
             "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "2"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["3", 
              GrayLevel[0.5]], {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "3"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {10, 1}], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[1, {10}]]], "Parameters" -> 
             Association["Size" -> 10, "$InputSize" -> 1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {10}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "3" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 10}], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[1, {1}]]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 10], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Layers", "3", "Inputs", "Input"] -> 
           NetPort["Layers", "2", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "3", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`EncodedType[
             NetEncoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Output" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{379., {55., 64.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.6804511575584764`*^9, 3.6804512059581394`*^9, 3.6804512566843214`*^9, {
   3.680451348593864*^9, 3.6804514727469683`*^9}, {3.6804515069597836`*^9, 
   3.68045151167461*^9}, 3.680458128699566*^9, {3.68045825946877*^9, 
   3.6804582686877103`*^9}, 3.6805355397409463`*^9, 3.680535631423633*^9, {
   3.6805379649221787`*^9, 3.6805379855593452`*^9}}]
}, Open  ]],

Cell["Initialize the network:", "Text",
 CellChangeTimes->{{3.68053564056499*^9, 3.6805356452211723`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetInitialize", "[", "net", "]"}]}]], "Input",
 CellChangeTimes->{{3.680358433289722*^9, 3.6803584364737926`*^9}, 
   3.6804508183659563`*^9, 3.680535634461297*^9}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"encoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Inputs", "Input"}, 
             "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "2"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["3", 
              GrayLevel[0.5]], {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "3"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {10, 1}], "Biases" -> 
               NeuralNetworks`TensorT[1, {10}]], "Parameters" -> 
             Association["Size" -> 10, "$InputSize" -> 1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {10}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "3" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 10}], "Biases" -> 
               NeuralNetworks`TensorT[1, {1}]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 10], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Layers", "3", "Inputs", "Input"] -> 
           NetPort["Layers", "2", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "3", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`EncodedType[
             NetEncoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Output" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{379., {55., 64.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.6805356351550426`*^9, 3.680537988091718*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"x", "\[Rule]", 
      RowBox[{"x", "^", "2"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"RandomReal", "[", 
        RowBox[{"1", ",", "10000"}], "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.680358323212538*^9, 3.6803584031626587`*^9}, {
   3.68035846091537*^9, 3.68035846465798*^9}, {3.680358535081916*^9, 
   3.6803585378656015`*^9}, 3.6804507086856833`*^9, {3.6804509096300173`*^9, 
   3.6804509097505503`*^9}, {3.680450994789851*^9, 3.680450996390175*^9}, {
   3.6804510501735764`*^9, 3.68045105076607*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomSample", "[", 
   RowBox[{"data", ",", "5"}], "]"}], "//", "Column"}]], "Input",
 CellChangeTimes->{{3.6804582256015396`*^9, 3.6804582334192677`*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{"0.39557547337531074`", "\[Rule]", "0.15647995513610116`"}]},
    {
     RowBox[{"0.9433559689155124`", "\[Rule]", "0.8899204840885253`"}]},
    {
     RowBox[{"0.958127459893588`", "\[Rule]", "0.9180082294021392`"}]},
    {
     RowBox[{"0.10526495488541587`", "\[Rule]", "0.01108071072702864`"}]},
    {
     RowBox[{"0.6774035104347678`", "\[Rule]", "0.4588755159493465`"}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{3.680458233979476*^9, 3.680458272894126*^9, 
  3.680535677135989*^9, 3.680537992112236*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"result", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", "data", ",", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "200"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6803583683570848`*^9, 3.6803583753528333`*^9}, 
   3.680358427497135*^9, 3.6804508205499535`*^9, 3.6804511683417273`*^9, {
   3.680451541565759*^9, 3.6804515462452507`*^9}, {3.680451576949438*^9, 
   3.680451577173006*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"encoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Inputs", "Input"}, 
             "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "2"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["3", 
              GrayLevel[0.5]], {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "3"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {10, 1}], "Biases" -> 
               NeuralNetworks`TensorT[1, {10}]], "Parameters" -> 
             Association["Size" -> 10, "$InputSize" -> 1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {10}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "3" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 10}], "Biases" -> 
               NeuralNetworks`TensorT[1, {1}]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 10], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Layers", "3", "Inputs", "Input"] -> 
           NetPort["Layers", "2", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "3", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`EncodedType[
             NetEncoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Output" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{379., {55., 64.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.68045116906149*^9, 3.680451213600884*^9, 
  3.6804514859343963`*^9, 3.6804515211315565`*^9, 3.6804515673887005`*^9, 
  3.6804516191834087`*^9, 3.680458171217973*^9, 3.680458311624752*^9, 
  3.680535717937694*^9, 3.6805380302896447`*^9}]
}, Open  ]],

Cell[TextData[{
 "Now let\[CloseCurlyQuote]s take a look at the result (and compare with the \
expected ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["x", "2"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " result):"
}], "Text",
 CellChangeTimes->{{3.680535693605127*^9, 3.6805357169492416`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"x", "^", "2"}], ",", 
     RowBox[{"result", "[", "x", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6803583789252787`*^9, 3.6803584162012367`*^9}, {
   3.6803584735966024`*^9, 3.6803584917210913`*^9}, {3.680358552786993*^9, 
   3.6803585569379997`*^9}, {3.6804507381376443`*^9, 3.6804507479426928`*^9}, 
   3.680450929230296*^9, {3.680451013709833*^9, 3.6804510138222623`*^9}, 
   3.680451076397651*^9, {3.680451527751148*^9, 3.6804515330462055`*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
l0zPzRHYjtWjv/N/9SW6zA==
      "]]}, 
    {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1:eJwt0glQTHEcB/BtixxjVUyuVnaVISQk1JhfGqMcOQrNKLUTSsltkGHa2KVB
10yTY+lWkkrsYrRoWFdKx5atbLvb9qz2vZKrmkLL+/29mTdvPvP/Hd//zBNE
HgjazeVwOPDvZb9n2922F/1RscSnb9aK8aX7XqOdStOBO1hiN821Gm2rygMv
i+hBcFkNOnTaHaiReL5/5VaHvnj7HjinMYPFX+rRYsVDYAb0umaPRjLviBIK
6MpqXoqatdi9vgp4/KJeimpiXZUW8QIuxSiiclw+4LnD65fQ71tC7UnQsPb1
i34DRxep5I4vWrDerKsGfZnqYoOgDeup1Fr4Fdskm3PyI+6LcaqHuStth6Mq
tawNv0MbwD9PEF0xSYf9yY8a4Tg/QtgRpkdTFjXM6946VhNowP7zfs0wYfzX
UaohtDg67wPYPJOVz7zegXmOdWtgr2dl6+h1Rjz/EdwKJWsic572E2c+aIM+
ZqqdKbMT3cjVgiLY3zpjFYV5suPaISFAmi03oX3lz3QgaF/bki/9xFp0c6QB
vJdKMqYsMrHOWak0QNj0ukErNZoDUR3QV51sPJj4Gec5OBvhik340SCXLuwX
1hhhgk6Rx1WhxZ7HOmHE6cQtyw+Z0Y4L/u0tDi83OtC4f+gjBYevlSc7PCcu
uvwJnsxNGmW/n8H97ptMYL/28LwzvG7cJ/ltAu38enW8Es1JefgZ7maBCxXe
w3rGmqgu2FHuZc8fRosK7c0gluYmam9/QV99Z4bSLr6Mt74X502OpyHphlSk
24AWO5+iYVdQj2vZZvSMWQk0OCmVdwND0L6LpTRcSA19dSmS1Aem07DH6+q3
MfFozpliGoSSiQG2hb3kf2mlYXjZqXGaW+T8q5aG1p7OxsIS0t+vpyEt5P6O
1RVokbWJBotb0BGpktTzv9OgbUjNslaTvBvHMPDo3MBOdTPJt20cAxk+EXPy
W0i+MDsG1t10l/vpSH+MIwOPT9S+TTT/zydkIHP+ktTN3WRfkisDh4zXtwh6
0TkpsxmYvT5OX/WTzJe5M2Bj1VSQNkDqcxcyYFD4xIqGSP4iTwaUsfkLPP6Q
+5YuZeCy89g+i4XkkXsz8BdhQKI8
      "]]}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->{550.833333333334, Automatic},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 1}, {0, 1}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.6804509250131807`*^9, 3.6804509297789345`*^9}, 
   3.6804510142546864`*^9, 3.6804510767099495`*^9, 3.6804512176141224`*^9, 
   3.6804514877764874`*^9, {3.6804515233176336`*^9, 3.6804515337227573`*^9}, 
   3.6804515693191414`*^9, 3.680451621840664*^9, 3.680458173897005*^9, 
   3.6804583138004713`*^9, 3.68053572077588*^9, 3.680538032725749*^9}]
}, Open  ]],

Cell[TextData[{
 "It\[CloseCurlyQuote]s a little bit better, but still not a great \
approximation of the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["x", "2"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " function. Here it is on a larger domain:"
}], "Text",
 CellChangeTimes->{{3.680535748404829*^9, 3.6805357888933516`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"x", "^", "2"}], ",", 
     RowBox[{"result", "[", "x", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "2"}], ",", "4"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6803583789252787`*^9, 3.6803584162012367`*^9}, {
   3.6803584735966024`*^9, 3.6803584917210913`*^9}, {3.680358552786993*^9, 
   3.6803585569379997`*^9}, {3.6804507381376443`*^9, 3.6804507479426928`*^9}, 
   3.680450929230296*^9, {3.680451013709833*^9, 3.6804510138222623`*^9}, 
   3.680451076397651*^9, {3.680451527751148*^9, 3.6804515330462055`*^9}, {
   3.68045819267883*^9, 3.6804582472036247`*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1:eJwVl/c/Ff7/QG0VUbJHSYisyojI81IooawSkkJGIamMbFkRGZGZvTfX234Z
lxC5btd1jbguGSUhSZT7/Xx/OI/zJ5zHOX7P3cSBgY6Obvd//L97bI7P0Gg0
VN6m3U6jcWIkt5QNnm3TELf4rs3qGicm8pV+08oaDSH6uhjKLCfGoNUzcXyW
hohix+OGuzkxBIFevbpuGtrd3VIgR3BiKESX6vsRNGRwIGo28RAn5q9+ffAQ
Bw2tJusyYcU5MErn9MTTRfbQmUcnL2fdZMdg0OGZXK6/yGiXRCnK3odRyC7K
Mjm1gwJlw9X37JkxSTmFkclXt9Fors0t7scMmGQT/SXdS1sonr/NcuHvHvha
Nxm8u7OJqsKrm66s/4FdniFJe5MNtM1ulLF/dxM2flyRaTNaQz8CGz79y1qD
FB1xZ7/JFeSp3yW1y/wVQg/s3b/Zt4RST/+843xmDmwGhY6INi0h9YFCvhmB
OVCNVUNLJUvo+R5Jz45hDlYPP+XzjV5CMyoVh1M+UcFSYOV9htESEls8fbX8
GRVOS01IUYmLKEXnjfkrNAtTOg1fH84uIMOdkffS1hRQDnZzC9mZR31hKpfe
Bk8Cd8xMS8q3eZSV4mcWaTkJG8nX91dMzaN9u/zKSYqTUFl+Nn+sfR69azBz
pH2ZACny1rhs6DyapiPHnTCYAGGFQJ0xtnkUN3twPVdkHJg+xwnLiswh7CeV
Tf9RElAX6Vy0OOaQGb8e51INCTo3PP67QaOimMqKHddYEgTsMzMJnqWitmF/
7SE9Emwr8keSCqhI5ot08njLKKy8zP4ZJE9FqtY1htIlRPikWjMwCrOI97n/
v/y3BJB3Hn5eqDCLJtw2q4afEuBl6ndZr2OzqKesXVTIlACYHek4fhoF7aM3
vMDNQYDKllxTq3YKuiFgfC8ubASiNJOmKBoURKP7bVXii4eAyNWpMc9pJHzL
U4i8MwjKy6fAx3QacbxU5LndNggrVxxzBBWnkYFhWvSJoEG4xUZxuL3xGRW/
tFp9wjIISrEjq9RHn9ESpTxamvcDfE2sp1t1nUIRuy8lJrT6wfydrziT0wTS
XFYiWQz0QBqWkRV/ZQKp2X00zHjbA9MfYpbTZSbQuGBQP79jDzhtZ1Uq/hhH
PBdlh1qZesDPuFvV7tk4cvIqYq7RxkE+I7th1wsyCnSXVtfv74INx8ynQTkk
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
AE8U8Tc=
      "]]}, 
    {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1:eJwl0HtMk2cUBvDeXjouqwqrBhhLyxDDvAyNMDM7vjOCooCwVAGXMSAOZV6A
xQUdFyeITEhEu4EuCAxkk22yoU7CZAHfQkuHlI5LgQEyKIoEBKWWtpC2tON7
vz+a9pdznuc9qfhIhvQoh8ViHVj90N8dieIJh8OBV39CvYsZ+5uDos4sE8tL
+WZcVBLRPK8nrsnhmXFUy5elI5PErP12E+73VIXfVxCLRl+ZsG7gxN1jl5i+
oWETtkU05msExHnBdSa8871wvwofO5mXhpgw4HUTte42kn8qNeJ3a37+QfqO
hcwjjy/ispt1Rdcjl0lefdaAr0sjZvaGmck9VMornJ3QHFWdZKStG4/TY6tQ
458iNZB8XdRLbFjYv7k1Wk/urRifw9/v8Tue+3iezJcKZ3GBi/1YfOcM6Xd6
No2D8tPTL1imiD9ImMLaXfe6BqlJso/Vkzi2OtuP9/kosUn7H5YFylW20X7i
byXDOIe1/Xx0fAdx0kwf9r5ye62H8Bbpc1epcMMU+6Zzxn2KvucnbiOOceU/
eL78iHhOXEuVbyuXFH03QDuvoa2d2uBZuXe2a4z4zMk+ahzOaXPTn9CW86tG
qFMKoWXnjmkyT2zRUfLplKA3wp/T1j32eEbFHPZJ/XH9S9rgtmWWylKyfQtn
9WR+NvAFtXVrr1eU3kDmVW16yi7RCk4OGElfQauB2lG1vcRn0kz2Y4eMlH7M
f3L31DLZV2jNVLfio8A/lBbitMplytU66NyisdGuEWdaqNSRq+M+jXbaotsb
bFRd5BfKzH0soPvrK1YotVSV6B/Jpg2bNjmo8783mS9IOLR1PGBByt2BgwGh
XNrJCy9YMOxU0pATzKMt//QiG9Zp1hq5/ojY5saB3N3t9sEAJ9qsi9c4kLny
Ov/Qm3wyL3DhQk3qpQHvt18j75V9zQXZh92XPTc60xZ9Ms0FQUZ9qELoQvJ3
QnjwMOxBa5OXK7ln4hoPVtKSguMEbqSvZ4IHbH5/+eYVYt2QGEHwvtPtESwB
yWuPILCM/TYjNDBuKUcQdqpTdsBMDLduICixPt1VaGF8pQKByMu72MhZQ/aT
qhCExxcHaD2IddYaBGV9R0/Igojlvr8g2KZ6a94law3z/zUh+Cr2/bLQc4x5
fyJom4qVZOczed2qD3FLLs8WE4vKmxHkgHVL5w1mH7Ui6Pzr37TCFuI8tQKB
e8SisFXOvFerRJAwInhoVDLzrA4EC0t7BCkapn/j3wjWBzU2hI4TJ2d3IUhW
9sRlP2Hy0WoEvx6cs9+bZvK+3Qgkp31jxAvM+480CL5hhywdXmTuq/wHQa/s
42rZEtOX3oPAS5QZ3mllDL0IPrsjW3A4GLv3IfgfubjkRQ==
      "]]}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-2, 4}, {-1.3776047229766846`, 9.584426810914557}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.6804582036564655`*^9, 3.6804582474152746`*^9}, 
   3.680458319356799*^9, 3.680535735001113*^9, 3.680535793596943*^9, 
   3.6805380404362493`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Training for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"y", " ", "=", " ", 
    SuperscriptBox["x", "2"]}], TraditionalForm]]],
 ", third attempt: more layers"
}], "Subsubsection",
 CellChangeTimes->{{3.6804507867252703`*^9, 3.6804508078216476`*^9}, {
   3.680450965765478*^9, 3.6804509705495915`*^9}, {3.6804510395973988`*^9, 
   3.6804510410773745`*^9}, 3.6805352290150757`*^9, {3.6805380508672504`*^9, 
   3.6805380569551125`*^9}}],

Cell["\<\
Let\[CloseCurlyQuote]s try adding two more layers (another fully-connected \
layer of 4 nodes and another Tanh layer:\
\>", "Text",
 CellChangeTimes->{{3.680535826836853*^9, 3.680535858693144*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"DotPlusLayer", "[", "10", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"ElementwiseLayer", "[", "Tanh", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"DotPlusLayer", "[", "10", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"ElementwiseLayer", "[", "Tanh", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"DotPlusLayer", "[", "1", "]"}]}], "\[IndentingNewLine]", "}"}],
     ",", "\[IndentingNewLine]", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", "\"\<Scalar\>\""}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.6803580407480574`*^9, 3.680358081136017*^9}, 
   3.680358318545034*^9, {3.680358450833645*^9, 3.680358454922589*^9}, {
   3.680358520949281*^9, 3.6803585273934994`*^9}, {3.680450694661951*^9, 
   3.680450695821642*^9}, 3.680450816894287*^9, {3.680451119407272*^9, 
   3.6804512049501567`*^9}, 3.68045125579736*^9, {3.680451324085854*^9, 
   3.680451472030263*^9}, {3.680451504061485*^9, 3.6804515104773593`*^9}, {
   3.6804516629410973`*^9, 3.680451677661211*^9}, {3.6804583459663377`*^9, 
   3.680458384093192*^9}, {3.680535803085651*^9, 3.680535824181316*^9}, {
   3.680538192987961*^9, 3.6805381957315545`*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"encoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Inputs", "Input"}, 
             "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "2"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["3", 
              GrayLevel[0.5]], {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "3"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["4", 
              GrayLevel[0.5]], {"Layers", "4"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "4"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "4"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["5", 
              GrayLevel[0.5]], {"Layers", "5"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "5"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "5"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {10, 1}], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[1, {10}]]], "Parameters" -> 
             Association["Size" -> 10, "$InputSize" -> 1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {10}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "3" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {10, 10}], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[1, {10}]]], "Parameters" -> 
             Association["Size" -> 10, "$InputSize" -> 10], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "4" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {10}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "5" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 10}], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[1, {1}]]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 10], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Layers", "3", "Inputs", "Input"] -> 
           NetPort["Layers", "2", "Outputs", "Output"], 
           NetPort["Layers", "4", "Inputs", "Input"] -> 
           NetPort["Layers", "3", "Outputs", "Output"], 
           NetPort["Layers", "5", "Inputs", "Input"] -> 
           NetPort["Layers", "4", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "5", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`EncodedType[
             NetEncoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Output" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{379., {80., 89.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.6805358609410744`*^9, 3.680538083198262*^9, {3.680538129963258*^9, 
   3.680538131299852*^9}, 3.680538196829526*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetInitialize", "[", "net", "]"}]}]], "Input",
 CellChangeTimes->{{3.680358433289722*^9, 3.6803584364737926`*^9}, 
   3.6804508183659563`*^9, 3.680535863141062*^9}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"encoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Inputs", "Input"}, 
             "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "2"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["3", 
              GrayLevel[0.5]], {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "3"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["4", 
              GrayLevel[0.5]], {"Layers", "4"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "4"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "4"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["5", 
              GrayLevel[0.5]], {"Layers", "5"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "5"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "5"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {10, 1}], "Biases" -> 
               NeuralNetworks`TensorT[1, {10}]], "Parameters" -> 
             Association["Size" -> 10, "$InputSize" -> 1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {10}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "3" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {10, 10}], "Biases" -> 
               NeuralNetworks`TensorT[1, {10}]], "Parameters" -> 
             Association["Size" -> 10, "$InputSize" -> 10], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "4" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {10}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "5" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 10}], "Biases" -> 
               NeuralNetworks`TensorT[1, {1}]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 10], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Layers", "3", "Inputs", "Input"] -> 
           NetPort["Layers", "2", "Outputs", "Output"], 
           NetPort["Layers", "4", "Inputs", "Input"] -> 
           NetPort["Layers", "3", "Outputs", "Output"], 
           NetPort["Layers", "5", "Inputs", "Input"] -> 
           NetPort["Layers", "4", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "5", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`EncodedType[
             NetEncoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Output" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{379., {80., 89.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.680535863728676*^9, 3.6805380862938576`*^9, 
  3.6805381336531963`*^9, 3.6805381979971247`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"x", "\[Rule]", 
      RowBox[{"x", "^", "2"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"RandomReal", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", "10000"}], "]"}]}], 
      "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.680358323212538*^9, 3.6803584031626587`*^9}, {
   3.68035846091537*^9, 3.68035846465798*^9}, {3.680358535081916*^9, 
   3.6803585378656015`*^9}, 3.6804507086856833`*^9, {3.6804509096300173`*^9, 
   3.6804509097505503`*^9}, {3.680450994789851*^9, 3.680450996390175*^9}, {
   3.6804510501735764`*^9, 3.68045105076607*^9}, {3.680451687591172*^9, 
   3.680451688462194*^9}, {3.6804584025504065`*^9, 3.680458402781345*^9}, {
   3.6804585119992123`*^9, 3.680458512270993*^9}, {3.680458638808406*^9, 
   3.680458639727929*^9}, {3.680535926734187*^9, 3.6805359280614653`*^9}, {
   3.680538375756185*^9, 3.6805383759157453`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomSample", "[", 
   RowBox[{"data", ",", "5"}], "]"}], "//", "Column"}]], "Input",
 CellChangeTimes->{{3.680458388758624*^9, 3.6804583948289547`*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{
      RowBox[{"-", "0.5642506237327711`"}], "\[Rule]", 
      "0.31837876638282125`"}]},
    {
     RowBox[{
      RowBox[{"-", "0.9980474812369624`"}], "\[Rule]", 
      "0.9960987748034448`"}]},
    {
     RowBox[{
      RowBox[{"-", "0.2868147493486415`"}], "\[Rule]", 
      "0.08226270044392404`"}]},
    {
     RowBox[{
      RowBox[{"-", "0.7875543429036673`"}], "\[Rule]", 
      "0.6202418430264273`"}]},
    {
     RowBox[{"0.8998278891175664`", "\[Rule]", "0.8096902300337754`"}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{{3.6804583954802465`*^9, 3.680458405000922*^9}, {
   3.680458519195114*^9, 3.680458523854719*^9}, 3.6804586471817484`*^9, 
   3.680535867187534*^9, 3.680535932247345*^9, 3.68053809004727*^9, 
   3.680538136537756*^9, 3.6805382002070994`*^9, 3.680538379674794*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"result", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", "data", ",", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "200"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6803583683570848`*^9, 3.6803583753528333`*^9}, 
   3.680358427497135*^9, 3.6804508205499535`*^9, 3.6804511683417273`*^9, {
   3.680451541565759*^9, 3.6804515462452507`*^9}, {3.680451576949438*^9, 
   3.680451577173006*^9}, {3.6805359390141897`*^9, 3.680535939254387*^9}, {
   3.6805381760599174`*^9, 3.6805382059559474`*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"encoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Inputs", "Input"}, 
             "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "2"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["3", 
              GrayLevel[0.5]], {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "3"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["4", 
              GrayLevel[0.5]], {"Layers", "4"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "4"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "4"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["5", 
              GrayLevel[0.5]], {"Layers", "5"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "5"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "5"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {10, 1}], "Biases" -> 
               NeuralNetworks`TensorT[1, {10}]], "Parameters" -> 
             Association["Size" -> 10, "$InputSize" -> 1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {10}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "3" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {10, 10}], "Biases" -> 
               NeuralNetworks`TensorT[1, {10}]], "Parameters" -> 
             Association["Size" -> 10, "$InputSize" -> 10], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "4" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {10}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "5" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 10}], "Biases" -> 
               NeuralNetworks`TensorT[1, {1}]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 10], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Layers", "3", "Inputs", "Input"] -> 
           NetPort["Layers", "2", "Outputs", "Output"], 
           NetPort["Layers", "4", "Inputs", "Input"] -> 
           NetPort["Layers", "3", "Outputs", "Output"], 
           NetPort["Layers", "5", "Inputs", "Input"] -> 
           NetPort["Layers", "4", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "5", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`EncodedType[
             NetEncoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Output" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{379., {80., 89.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.68045116906149*^9, 3.680451213600884*^9, 3.6804514859343963`*^9, 
   3.6804515211315565`*^9, 3.6804515673887005`*^9, 3.6804516191834087`*^9, 
   3.680451739665532*^9, 3.6804584515102*^9, 3.680458586235962*^9, 
   3.6804587009491835`*^9, {3.680535913943341*^9, 3.6805359621139774`*^9}, 
   3.6805381157656307`*^9, {3.680538161637574*^9, 3.6805381840020885`*^9}, 
   3.6805382847010174`*^9, 3.6805384144558573`*^9}]
}, Open  ]],

Cell[TextData[{
 "Now the result is much improved. The trained neural network function \
\[OpenCurlyQuote]result\[CloseCurlyQuote] closely follows the expected ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["x", "2"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " curve:"
}], "Text",
 CellChangeTimes->{{3.680535974444784*^9, 3.6805360207251277`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"x", "^", "2"}], ",", 
     RowBox[{"result", "[", "x", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6803583789252787`*^9, 3.6803584162012367`*^9}, {
   3.6803584735966024`*^9, 3.6803584917210913`*^9}, {3.680358552786993*^9, 
   3.6803585569379997`*^9}, {3.6804507381376443`*^9, 3.6804507479426928`*^9}, 
   3.680450929230296*^9, {3.680451013709833*^9, 3.6804510138222623`*^9}, 
   3.680451076397651*^9, {3.680451527751148*^9, 3.6804515330462055`*^9}, {
   3.6804517309652963`*^9, 3.680451733757086*^9}, {3.6804584544784603`*^9, 
   3.6804584560058413`*^9}, {3.6804585458796186`*^9, 3.680458548968134*^9}, {
   3.6804586720246377`*^9, 3.6804586796884255`*^9}, {3.680535951046021*^9, 
   3.680535958853851*^9}, {3.680538418596027*^9, 3.680538421524536*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
btNA7NjTdy279//bQ+D/95D/ATgbkOg=
      "]]}, 
    {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
dy+t+z/QU2Qn
      "]]}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-1, 1}, {0, 1}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.68053596848925*^9, 3.680538117753295*^9, {3.680538163326395*^9, 
   3.680538186124207*^9}, 3.6805382896914406`*^9, 3.680538422430625*^9}]
}, Open  ]],

Cell["The error:", "Text",
 CellChangeTimes->{{3.6805383292189674`*^9, 3.680538335162937*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"x", "^", "2"}], "-", 
    RowBox[{"result", "[", "x", "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6803583789252787`*^9, 3.6803584162012367`*^9}, {
   3.6803584735966024`*^9, 3.6803584917210913`*^9}, {3.680358552786993*^9, 
   3.6803585569379997`*^9}, {3.6804507381376443`*^9, 3.6804507479426928`*^9}, 
   3.680450929230296*^9, {3.680451013709833*^9, 3.6804510138222623`*^9}, 
   3.680451076397651*^9, {3.680451527751148*^9, 3.6804515330462055`*^9}, {
   3.6804517309652963`*^9, 3.680451733757086*^9}, {3.6804584544784603`*^9, 
   3.6804584560058413`*^9}, {3.6804585458796186`*^9, 3.680458548968134*^9}, {
   3.6804586720246377`*^9, 3.6804586796884255`*^9}, {3.680535951046021*^9, 
   3.680535958853851*^9}, {3.680538304523268*^9, 3.6805383147953253`*^9}, {
   3.6805384338036175`*^9, 3.6805384339160433`*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
oKrrKn4T1uZPKWyrloe948JMrWXo2f11HWfkYYtU2MLpIvRSnspXLXlY8f/0
fmsu+mNudZqAPMy+0msrzEI3Ch8a/ycHQ1z5tcfT0FF8WYqjctDqsjV3/g76
WDxHZoMc1BZ7JkbHoReu+/NlykGK3iHvrhtono/qxmflgLxZr6U9BL2HV0X2
hBzkvXYWeBswsfa9PLv5iBwcvnX50utL6GkvIzOyHNQci+tsvohOuXEyepsc
qG8tEHvhhZZKlKesykLLm6ag5x5r+7tT4/RZFkwiRwbr3dFbor9f7JeFAcNf
h586oS2vjPq/lAVHNvbwJ7boW/aBPlWyMN0mOl5lgU6S6XfOlQWvKLUjFSbo
sH/jz+7JwpKRdWypAdoRsmKjZYG+7fznYp21/VzYZRksC0yd4RqFGuj6vVq3
L8lCZEzW3TxVtFEtufqcLHCdqPuRo4guO15t5iELqdt79bNl0KT+9ROOsiDU
PZeZKYlWNls3ZSsL+XFMK+lia+t9WWZjKQsyZvymqUJoU4m9GhayULtDMf8u
/9r+byrtNZYFjV5jhju70SuDW2aMsB4Jp2wTuNbqwR/3yBTrYRFcFrsNLWPT
bmMiC4PcKVuit6Czbj6j43in/jLXSKa19RRRk8ywHklvasPXozWbGzLw+l5W
k5w3/n7E/fd28jlhPXb+O31tac0DiWw0rMcgd1PwD7Rmxzbv07LAfFdqb+Ac
estTysuLsnDbRvfi1U/oxjQy2xWsxx7nN5c/ro33qdO9hvUYuiT03yi6W22z
b4wsCN+LveIziJZaz5qYJguFdvk953vQXpVN+4tkQY636eC5dnSU02HJGlmo
GxkO9XyNziKZiryWBc20xWGPF+ikOLGYYVlodWCTO/kMTdtb8RX7w5RfNNK9
Fs1/d5HA/nk3Rpl0qVxb39bZoO1yMOPknWBfgM7v+OmoIgfeAuFzNjnoBQEW
f+zX3x8yj1plokVPdt04JQfMrj2LJ+6gZbpD/t6VgyjynKFx3Nr+f592qZID
7gnGh4a31/bHwaLcKQfC7goWuqFoBiGXJjZ5KBQ2LjpKR5/ey7d4UB7kpk4y
aV5G17JE7TSUBy3a3UrVc2vzNUYpRMpDq2gZm/JpNGcUf1mBPJh+aqUqUtHz
Rm4CXfLgemqVW8Zurb6Pt1rsVYCg005++3XRpC8D/HUKMBJpn1KjsVYPod6E
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
D4M5D4I=
      "]]}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-1, 1}, {-0.0030516948551971845`, 0.0034063834209069332`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.6805383157965207`*^9, 3.680538434890241*^9}]
}, Open  ]],

Cell[TextData[{
 "On a wider domain, the trained \[OpenCurlyQuote]result\[CloseCurlyQuote] \
function still quickly diverges from the expected ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["x", "2"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " function:"
}], "Text",
 CellChangeTimes->{{3.6805360448530283`*^9, 3.6805360859650965`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"x", "^", "2"}], ",", 
     RowBox[{"result", "[", "x", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "2"}], ",", "4"}], "}"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6803583789252787`*^9, 3.6803584162012367`*^9}, {
  3.6803584735966024`*^9, 3.6803584917210913`*^9}, {3.680358552786993*^9, 
  3.6803585569379997`*^9}, {3.6804507381376443`*^9, 3.6804507479426928`*^9}, {
  3.680450929230296*^9, 3.6804509457342772`*^9}, {3.680451632502454*^9, 
  3.6804516366058693`*^9}, {3.6804587380412893`*^9, 3.6804587491860275`*^9}, {
  3.6805360308217916`*^9, 3.6805360394372993`*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
      "]]}, 
    {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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

      "]]}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->{517.5000000000006, Automatic},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-2, 2}, {-2, 4}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.6804509462533226`*^9, 3.68045102457915*^9, 3.68045108312936*^9, 
   3.6804512244298472`*^9, 3.680451493924821*^9, 3.6804515726345844`*^9, 
   3.6804516383805337`*^9, 3.6804517463633504`*^9, 3.680458469311327*^9, 
   3.680458615213007*^9, {3.6804587339186745`*^9, 3.6804587496617384`*^9}, {
   3.6805360255024176`*^9, 3.6805360398109484`*^9}, 3.68053816588605*^9, 
   3.6805383426188564`*^9, 3.680538451422995*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Training for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"y", " ", "=", " ", 
    RowBox[{
     SuperscriptBox["x", "3"], "-", "x"}]}], TraditionalForm]]]
}], "Subsubsection",
 CellChangeTimes->{{3.6804507867252703`*^9, 3.6804508078216476`*^9}, {
  3.680450965765478*^9, 3.6804509705495915`*^9}, {3.6804510395973988`*^9, 
  3.6804510410773745`*^9}, {3.680451762444683*^9, 3.6804517909650903`*^9}, {
  3.680535232030168*^9, 3.680535240662223*^9}}],

Cell[TextData[{
 "Let\[CloseCurlyQuote]s look at one more case, where we look at ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["x", "3"], "-", "x"}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ":"
}], "Text",
 CellChangeTimes->{{3.6805361307488613`*^9, 3.680536151804626*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"x", "^", "3"}], "-", "x"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6805361529355307`*^9, 3.6805361618379326`*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1:eJwtmXk0Ve/3x2mUigZlSEgRkhQqKbsBSZFEyqxBUiFRokGmkCkklaJMFYVS
CtlISMbLvfcYwj33mkOKjH38nu9av7/ueq3n3GfYz3u/9z7rrDnpYnJmFh8f
XyU/H9//flVgZd/MzBDy8fnkF/V6aLtMrA2amCR8aCJw7QpTyHq3Wf7PKOEF
fm47l5yGLQqGJ7v6CU94+2XPc4dtS/2bq9j/48dXSv74wW7ucOXDzCGUeWUX
u6gmGkzuVKer2Q5h0Y+TWwX8kuBqrf/Fs4WDWBRzQ8Nn8C00Ni7sK7YfwDiL
hAj2pRJYXeQisk3yJy6x2fchPuMbVC3TcN8h+hNjQkKDa8u+gdeZyYZdy35i
ItPx33DHN2AJBkTrCPzEn6u9GXNXVEKk2aNlJiP9eIHp6HfueiXM7i9dcrGq
H00Z3nfX6n+H3hUSi5Ou92NytGjYlYYqeH++dK7wjz4UyKEltPJqYbuM8+ZU
dh+qZ7UxDBm1kNcoar2L0Ye/vP6tMeqrhaJd53POl5Nxg12VCxfXQaXwslMV
2X14fI+S+NmdddDxzrbodmAfFpkYVDg8rAPB6UmvkU19uN2BOvvgUD3YhW7+
1eTbi3qu7DC5OAZ45UQFVt/oxUX6PacOPGPA/dY/ksWevXjMoyX+zCsGVCp/
OPDCuRcDO1x33SlggFr1jqQrFr2ofy7ylEsHA+YJ6RxbvqUX75eeud8o3wAZ
EccKDnF6UD05YPW/1w1Qlptrsru1B88OVGipfmgATrtYrxq7B5UWbRqwLGyA
laotK1ZV96Bt83nhJzUNcKvO1qX3Yw/GKnZ4lw02gMnSc7KBkT14avlVvdyN
jTAe5R2E0INnVnqprkpthG7J4j69HT04a//iUzOvG4GVOs+wRr0Hr1NjK1re
N8K7vHtLfyj2oKitz5xrXxvBmU57NLm8B3VKVu04zGsE7ubGDI2ebixadfK9
gwwTauqU69MjuzFnxMbycBQTCizc1NTuduPMl2/G6x8yIZ2Xez8voBvjp0dn
jyUwIWh8r8U3r25s7oP0G6+ZsE/mBLfrdDeW+x5TU6hgwkeXgNE1mt34vMWd
/WeKCUlCbeJxnC7sFHzR5mbNgihLmK/Z2oW63k/WbjjFAt8XiSNNrC7MUe1+
3eLIgpN7T9WuqurC/8TyH8q5s0D2So9/wocu7HuuzW8dwoLnP34Ppd7tQoNP
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
      "]]}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-1, 1}, {-0.3849000814179797, 0.3849001602291641}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.680536162185173*^9, 3.6805384727384624`*^9}]
}, Open  ]],

Cell["\<\
Define a neural network with multiple layers to use for training:\
\>", "Text",
 CellChangeTimes->{{3.6805361737246437`*^9, 3.6805361878685017`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"DotPlusLayer", "[", "10", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"ElementwiseLayer", "[", "Tanh", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"DotPlusLayer", "[", "10", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"ElementwiseLayer", "[", "Tanh", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"DotPlusLayer", "[", "1", "]"}]}], "\[IndentingNewLine]", "}"}],
     ",", "\[IndentingNewLine]", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", "\"\<Scalar\>\""}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.6803580407480574`*^9, 3.680358081136017*^9}, 
   3.680358318545034*^9, {3.680358450833645*^9, 3.680358454922589*^9}, {
   3.680358520949281*^9, 3.6803585273934994`*^9}, {3.680450694661951*^9, 
   3.680450695821642*^9}, 3.680450816894287*^9, {3.680451119407272*^9, 
   3.6804512049501567`*^9}, 3.68045125579736*^9, {3.680451324085854*^9, 
   3.680451472030263*^9}, {3.680451504061485*^9, 3.6804515104773593`*^9}, {
   3.6804516629410973`*^9, 3.680451677661211*^9}, {3.6804518693813314`*^9, 
   3.680451873732929*^9}, {3.6804588314755926`*^9, 3.6804588350913815`*^9}, {
   3.680458980836862*^9, 3.680458982476282*^9}, {3.680459102462309*^9, 
   3.6804591305899744`*^9}, {3.680536100317301*^9, 3.6805361241092763`*^9}, {
   3.680538487699481*^9, 3.6805384906755285`*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"encoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Inputs", "Input"}, 
             "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "2"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["3", 
              GrayLevel[0.5]], {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "3"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["4", 
              GrayLevel[0.5]], {"Layers", "4"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "4"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "4"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["5", 
              GrayLevel[0.5]], {"Layers", "5"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "5"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "5"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {10, 1}], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[1, {10}]]], "Parameters" -> 
             Association["Size" -> 10, "$InputSize" -> 1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {10}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "3" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {10, 10}], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[1, {10}]]], "Parameters" -> 
             Association["Size" -> 10, "$InputSize" -> 10], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "4" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {10}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "5" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 10}], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[1, {1}]]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 10], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Layers", "3", "Inputs", "Input"] -> 
           NetPort["Layers", "2", "Outputs", "Output"], 
           NetPort["Layers", "4", "Inputs", "Input"] -> 
           NetPort["Layers", "3", "Outputs", "Output"], 
           NetPort["Layers", "5", "Inputs", "Input"] -> 
           NetPort["Layers", "4", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "5", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`EncodedType[
             NetEncoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Output" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{379., {80., 89.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.6805361940363917`*^9, 3.6805384920593424`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetInitialize", "[", "net", "]"}]}]], "Input",
 CellChangeTimes->{{3.680358433289722*^9, 3.6803584364737926`*^9}, 
   3.6804508183659563`*^9, 3.68053619030888*^9}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"encoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Inputs", "Input"}, 
             "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "2"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["3", 
              GrayLevel[0.5]], {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "3"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["4", 
              GrayLevel[0.5]], {"Layers", "4"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "4"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "4"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["5", 
              GrayLevel[0.5]], {"Layers", "5"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "5"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "5"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {10, 1}], "Biases" -> 
               NeuralNetworks`TensorT[1, {10}]], "Parameters" -> 
             Association["Size" -> 10, "$InputSize" -> 1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {10}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "3" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {10, 10}], "Biases" -> 
               NeuralNetworks`TensorT[1, {10}]], "Parameters" -> 
             Association["Size" -> 10, "$InputSize" -> 10], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "4" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {10}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "5" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 10}], "Biases" -> 
               NeuralNetworks`TensorT[1, {1}]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 10], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Layers", "3", "Inputs", "Input"] -> 
           NetPort["Layers", "2", "Outputs", "Output"], 
           NetPort["Layers", "4", "Inputs", "Input"] -> 
           NetPort["Layers", "3", "Outputs", "Output"], 
           NetPort["Layers", "5", "Inputs", "Input"] -> 
           NetPort["Layers", "4", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "5", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`EncodedType[
             NetEncoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Output" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{379., {80., 89.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{{3.680536190915369*^9, 3.6805361953500395`*^9}, 
   3.6805384931408286`*^9}]
}, Open  ]],

Cell["Set up the training data:", "Text",
 CellChangeTimes->{{3.680536204324538*^9, 3.680536208084886*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"x", "\[Rule]", 
      RowBox[{
       RowBox[{"x", "^", "3"}], "-", "x"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"RandomReal", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", "10000"}], "]"}]}], 
      "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.680358323212538*^9, 3.6803584031626587`*^9}, {
   3.68035846091537*^9, 3.68035846465798*^9}, {3.680358535081916*^9, 
   3.6803585378656015`*^9}, 3.6804507086856833`*^9, {3.6804509096300173`*^9, 
   3.6804509097505503`*^9}, {3.680450994789851*^9, 3.680450996390175*^9}, {
   3.6804510501735764`*^9, 3.68045105076607*^9}, {3.680451687591172*^9, 
   3.680451688462194*^9}, {3.680451800068883*^9, 3.680451800605103*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomSample", "[", 
   RowBox[{"data", ",", "5"}], "]"}], "//", 
  RowBox[{
   RowBox[{"Column", "[", 
    RowBox[{"#", ",", 
     RowBox[{"Alignment", "\[Rule]", "\"\<\[Rule]\>\""}]}], "]"}], 
   "&"}]}]], "Input",
 CellChangeTimes->{{3.680458852496323*^9, 3.6804588601465983`*^9}, {
  3.6805362184218807`*^9, 3.6805362603378067`*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{"0.37162808902052413`", "\[Rule]", 
      RowBox[{"-", "0.32030348629627864`"}]}]},
    {
     RowBox[{
      RowBox[{"-", "0.13359273486833922`"}], "\[Rule]", 
      "0.13120850281631774`"}]},
    {
     RowBox[{"0.8995700965822437`", "\[Rule]", 
      RowBox[{"-", "0.17161426296108362`"}]}]},
    {
     RowBox[{"0.755311638326742`", "\[Rule]", 
      RowBox[{"-", "0.3244096184115911`"}]}]},
    {
     RowBox[{"0.03959192611974327`", "\[Rule]", 
      RowBox[{"-", "0.039529864959407704`"}]}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{"\[Rule]"}}, "Rows" -> {{"\[Rule]"}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{
  3.680458860700715*^9, 3.6804589875632367`*^9, 3.6804591349714513`*^9, {
   3.6805362112200255`*^9, 3.680536231157591*^9}, 3.680536261389197*^9, 
   3.6805385079411297`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"result", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", "data", ",", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "200"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6803583683570848`*^9, 3.6803583753528333`*^9}, 
   3.680358427497135*^9, 3.6804508205499535`*^9, 3.6804511683417273`*^9, {
   3.680451541565759*^9, 3.6804515462452507`*^9}, {3.680451576949438*^9, 
   3.680451577173006*^9}, {3.6804518818292227`*^9, 3.680451882277031*^9}, {
   3.6805362769568057`*^9, 3.680536277253034*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"encoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Inputs", "Input"}, 
             "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "2"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["3", 
              GrayLevel[0.5]], {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "3"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["4", 
              GrayLevel[0.5]], {"Layers", "4"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "4"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "4"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["5", 
              GrayLevel[0.5]], {"Layers", "5"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "5"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "5"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {10, 1}], "Biases" -> 
               NeuralNetworks`TensorT[1, {10}]], "Parameters" -> 
             Association["Size" -> 10, "$InputSize" -> 1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {10}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "3" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {10, 10}], "Biases" -> 
               NeuralNetworks`TensorT[1, {10}]], "Parameters" -> 
             Association["Size" -> 10, "$InputSize" -> 10], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "4" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {10}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "5" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 10}], "Biases" -> 
               NeuralNetworks`TensorT[1, {1}]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 10], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Layers", "3", "Inputs", "Input"] -> 
           NetPort["Layers", "2", "Outputs", "Output"], 
           NetPort["Layers", "4", "Inputs", "Input"] -> 
           NetPort["Layers", "3", "Outputs", "Output"], 
           NetPort["Layers", "5", "Inputs", "Input"] -> 
           NetPort["Layers", "4", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "5", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`EncodedType[
             NetEncoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Output" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{379., {80., 89.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.68045116906149*^9, 3.680451213600884*^9, 
  3.6804514859343963`*^9, 3.6804515211315565`*^9, 3.6804515673887005`*^9, 
  3.6804516191834087`*^9, 3.680451739665532*^9, 3.6804518478376617`*^9, 
  3.6804519750166707`*^9, 3.6804589392693663`*^9, 3.6804590454193497`*^9, 
  3.6804592387353334`*^9, 3.6805363227042866`*^9, 3.6805385760419884`*^9}]
}, Open  ]],

Cell["And take a look at the result:", "Text",
 CellChangeTimes->{{3.6805363265163326`*^9, 3.680536331740569*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"x", "^", "3"}], "-", "x"}], ",", 
     RowBox[{"result", "[", "x", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6803583789252787`*^9, 3.6803584162012367`*^9}, {
   3.6803584735966024`*^9, 3.6803584917210913`*^9}, {3.680358552786993*^9, 
   3.6803585569379997`*^9}, {3.6804507381376443`*^9, 3.6804507479426928`*^9}, 
   3.680450929230296*^9, {3.680451013709833*^9, 3.6804510138222623`*^9}, 
   3.680451076397651*^9, {3.680451527751148*^9, 3.6804515330462055`*^9}, {
   3.6804517309652963`*^9, 3.680451733757086*^9}, {3.680451851701318*^9, 
   3.6804518594453087`*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1:eJwtmXk0Ve/3x2mUigZlSEgRkhQqKbsBSZFEyqxBUiFRokGmkCkklaJMFYVS
CtlISMbLvfcYwj33mkOKjH38nu9av7/ueq3n3GfYz3u/9z7rrDnpYnJmFh8f
XyU/H9//flVgZd/MzBDy8fnkF/V6aLtMrA2amCR8aCJw7QpTyHq3Wf7PKOEF
fm47l5yGLQqGJ7v6CU94+2XPc4dtS/2bq9j/48dXSv74wW7ucOXDzCGUeWUX
u6gmGkzuVKer2Q5h0Y+TWwX8kuBqrf/Fs4WDWBRzQ8Nn8C00Ni7sK7YfwDiL
hAj2pRJYXeQisk3yJy6x2fchPuMbVC3TcN8h+hNjQkKDa8u+gdeZyYZdy35i
ItPx33DHN2AJBkTrCPzEn6u9GXNXVEKk2aNlJiP9eIHp6HfueiXM7i9dcrGq
H00Z3nfX6n+H3hUSi5Ou92NytGjYlYYqeH++dK7wjz4UyKEltPJqYbuM8+ZU
dh+qZ7UxDBm1kNcoar2L0Ye/vP6tMeqrhaJd53POl5Nxg12VCxfXQaXwslMV
2X14fI+S+NmdddDxzrbodmAfFpkYVDg8rAPB6UmvkU19uN2BOvvgUD3YhW7+
1eTbi3qu7DC5OAZ45UQFVt/oxUX6PacOPGPA/dY/ksWevXjMoyX+zCsGVCp/
OPDCuRcDO1x33SlggFr1jqQrFr2ofy7ylEsHA+YJ6RxbvqUX75eeud8o3wAZ
EccKDnF6UD05YPW/1w1Qlptrsru1B88OVGipfmgATrtYrxq7B5UWbRqwLGyA
laotK1ZV96Bt83nhJzUNcKvO1qX3Yw/GKnZ4lw02gMnSc7KBkT14avlVvdyN
jTAe5R2E0INnVnqprkpthG7J4j69HT04a//iUzOvG4GVOs+wRr0Hr1NjK1re
N8K7vHtLfyj2oKitz5xrXxvBmU57NLm8B3VKVu04zGsE7ubGDI2ebixadfK9
gwwTauqU69MjuzFnxMbycBQTCizc1NTuduPMl2/G6x8yIZ2Xez8voBvjp0dn
jyUwIWh8r8U3r25s7oP0G6+ZsE/mBLfrdDeW+x5TU6hgwkeXgNE1mt34vMWd
/WeKCUlCbeJxnC7sFHzR5mbNgihLmK/Z2oW63k/WbjjFAt8XiSNNrC7MUe1+
3eLIgpN7T9WuqurC/8TyH8q5s0D2So9/wocu7HuuzW8dwoLnP34Ppd7tQoNP
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
      "]]}, 
    {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
HEs=
      "]]}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->{550.833333333334, Automatic},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-1, 1}, {-1, 1}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.6804509250131807`*^9, 3.6804509297789345`*^9}, 
   3.6804510142546864`*^9, 3.6804510767099495`*^9, 3.6804512176141224`*^9, 
   3.6804514877764874`*^9, {3.6804515233176336`*^9, 3.6804515337227573`*^9}, 
   3.6804515693191414`*^9, 3.680451621840664*^9, 3.680451742628253*^9, {
   3.6804518567635612`*^9, 3.6804518600697737`*^9}, 3.6804519783103304`*^9, 
   3.680458943317133*^9, 3.680459113103657*^9, 3.6804592412002287`*^9, 
   3.68053633332635*^9, 3.680538578536227*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"x", "^", "3"}], "-", "x"}], ")"}], "-", 
    RowBox[{"result", "[", "x", "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6803583789252787`*^9, 3.6803584162012367`*^9}, {
   3.6803584735966024`*^9, 3.6803584917210913`*^9}, {3.680358552786993*^9, 
   3.6803585569379997`*^9}, {3.6804507381376443`*^9, 3.6804507479426928`*^9}, 
   3.680450929230296*^9, {3.680451013709833*^9, 3.6804510138222623`*^9}, 
   3.680451076397651*^9, {3.680451527751148*^9, 3.6804515330462055`*^9}, {
   3.6804517309652963`*^9, 3.680451733757086*^9}, {3.680451851701318*^9, 
   3.6804518594453087`*^9}, {3.680538593466922*^9, 3.6805386088590937`*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
uQKFoKW5SoNtmA4Myy5R4WuFMOnwfclq3iCY/LigySFUBMyDbDkx1kHwpkI+
rfl6MWQ7XfI5xxMMBon5GnbyBCRMejIG9ELghQe0brckUMW8UDZ6NQS4dStN
e5gEzAI3tHX4hUApT7ur9giBFAXr1tv3Q2CdivfZpFMsUBKIGXT5GQLeBQme
AQssEOL42a13IxTU0ztrz1wsgzzG75p7RWEwGZRrVWFfBk45Ik6Xa8Mg3ibw
35HAMpCZKmwU6sHvvd2790rmluH8F/P1luL3bwEtbtnycmDd/WYlpsaAqtod
hgVPyoHyffhfZgN+z8+5jQhzVIAMr+aDza3hMP5Rwz9esAImx+QMegfC4VbJ
tk1rZCuAInGdw3cmHIYC3p9aNKoAoYlmxUi+CAjm2vKk7Rnqjd3ug1oR8E7k
rVu4yTvIu1tdsqcqAk5o8i6bfVkJlH0U2fbsSIgyXzk1/74SmJL7tS+9jIQO
N0rP38+VoOSifra1NBKuJI8XrmCvAkqlSFL4R/RPVDsL6lYBs7crQ3pVFHTc
CPyi8rMKhMzL447ZRsGVtpnSmIPVwCpXWeK6MRqej449ua1RDXk+H5saRKJh
8e+Xu0km1eDEyjbn3x0NUTsaPbOCq4HnyU9nr2Po93i8t7CtGhrupIda26J/
k1Vqn/sH4Nl1N63hZTREm7bTZPJrIO/5bKObEBOCvx2FoZoaWKHyqKNbjAm+
nml/Er/UgJYLd8ZOSSY4xNp7cXDXglnVO8qrvUw4U7nMtftyLYSyTASOKzOB
e4+MdQRvHeo7lqqbM4G9+OZ2ZYk66PXkMJ+5zIS/ar/7fynUgRCf/OVYGyaM
W7wzu2RbBync3vX5jkyou2VkcJhVB06ZnTT360yI+huqOWJfDw17/4RV3cJ8
4eOrkgPrgel86kjhHcy38Xy1zp166O2LdspMwnyy21TJ23oYMR7o1ktjwo7n
BkIfuBogRXUz74HHTEj3jPyXubEBej28djY8YcI2JVY3TbQBhBZTXxk/Y8KG
2u13D8o3gBLnvrSL+UzgGJ4USLvcACtKi7les5gQ+Fh03sexAXj+lqyaL2PC
PxfdDj2vBqDl6duLVzDhF6X4FhcTx4eoN1u/Z8LwphA+zyKs73HlmkEjEy71
vf6h864BDn1KbpZuZkLP/W+N0o2od0LYklYmtO/XZg4MNQDlSZ6VbwcTKs9s
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
      "]]}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-1, 1}, {-0.036234479721273805`, 0.0440305213887352}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.680538605123011*^9, 3.680538609660611*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"x", "^", "3"}], "-", "x"}], ",", 
     RowBox[{"result", "[", "x", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "4"}], ",", "4"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6803583789252787`*^9, 3.6803584162012367`*^9}, {
  3.6803584735966024`*^9, 3.6803584917210913`*^9}, {3.680358552786993*^9, 
  3.6803585569379997`*^9}, {3.6804507381376443`*^9, 3.6804507479426928`*^9}, {
  3.680450929230296*^9, 3.6804509457342772`*^9}, {3.680451632502454*^9, 
  3.6804516366058693`*^9}, {3.680451982381126*^9, 3.680451982949171*^9}, {
  3.680459286335997*^9, 3.680459292655905*^9}, {3.680536345277197*^9, 
  3.6805363469327793`*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1:eJwVV3k41N8XprKkki1RKkTIEtpLzmSJlFJaRImKRJS+FVKSStaSkCQ7ISEp
S3JGluwxxszHPos9xpo9/eb3133e577nOct7znPPlbt046TdEh4enhReHp7/
n7ur85UVPQXIebX5ljKOu8iJwp3SkUx+crAZcSLAfwc52kTrVpM/H5m6J68h
hqJJ9rlu665yeBlZaPsLvzB/VbLn0nS3W8NLyOfjDNT/K1Ek23r/UqCl8pJX
M/4TEJGWI4d/74mMduQhZxqp+StbrSNbu0d57bbjIV/d9OUjZf86svL241co
F3nIc41Bmq9k1pELU/O3CZ7mISuW5W0/2ylN7nwVWPEf8JA3lXfbDl6SJis5
ak2aSPCQyfdZQ7tuSpFvqc/FjHv+Q8m2lN0730qSC7uUV2bIL6LgWoVbW7XE
yfd1eD9GSS2iw45dLhwpcfKBNy2m/sKLeL1SzaSMR5xMPhnwwn7uL360bPdP
bhAj/yz/LSZH+YuL5oT3AVcxMvVDpnTEo794eLZdtPiLKJnjtkPJm7GAV4S6
u+lHRMibRUh6p2LmsdPEZ1D3zAryc03mPcdX8xjM5/GYR3UFecbM57O33zyK
hcm86f8nRK59Wabw8dY82h978Fc1XYh8W/ywAL/RPGYqqPJ48QiRKyRP1uaN
zKHKt6tvDuYKkh03XDmz/uAcpqV33W/fzU+mHuB7obVrDk/pfFE2E+Un61qn
/DRSncPl2Q3X+gf5yOKx/Xtur5lDi4tDLr4xfOQiWef1dQOzOFWl03pXgI8s
rHCX4RU6iw+0XZnrGUvJOVv9HFnsGax2ShRfmcFL3tRoU6DaMoNDYlaqYQG8
5CC3vYJ36mdwn5F31oFrvGS7ssFkgYIZFPNzKZ3cwkuWsjZlqj2fQXGyhe9Y
Ig/5wUsxC7c9M9hn/zFfy/gfGs9EG64Mnsao8fWN/3nM45eYO2GnfabxRoWh
wXvdeZQ3PMaOcZvGDPLfP9LL5nH+5T9vrUvTWOVfH1/0Yg4zVS8Vndk9jUel
Rycm0mZR4qLS9njmFBY9kjIRHZzGrvJPsrt2TaHtepW/OpGTeN981mCP2hRq
TteahzhMohSTdG2f/BTuC6EGrt07iWYLvz7pCk+hl0qgXknrBJK1OXpGvX+Q
33B+/0PZCYyL3WpnEfEHxXxEB0O+jOElj8S0e1OTuGBEkfolxMFF/t9194cm
UcLk7DPx/GGMCtMe92Jx/RTbMwrshpGSVbLvcf0kki03vFb9MYT6vV01gSmT
uPXf59l3D3+jgrkMJ/rMJO7Ib0sLXzmAPWrh2vh1AiuFvjn4O3fjVq9kTv+H
CayNUjn1VbYbXX59SReLn8AZslHAcSobZ1xp8vaBE8jxHOsr12GjUN5a8VU2
E5hg85L1TYyFmgejJiyXT2C/mKu+VnIXep6OzZ2yGsf28QTLPhIdySlZN2VP
jCP1uMyn6yU0XDaDaiaHxpEU1ZXzTY+Gz6MYSe80ufzjvG25Rs0Y1yUXbsA3
jrkpndn8Vk1YcS3pTmjmGEq9JqS8TX+hqFfaLg3eMVS2t4oOiilB36/KlSLT
oxiSRnnR10HGOc77cxNDo+hwf3zq2UYysi6m3M8nRlE2YImmmtF3zDmY+EMv
exRJGy4TSR55eJLv3bGzF0eRJ3XvMd+MVKw4IMPYe5p7v/ywNns2Gffdfesq
c2QUyYMnLikeTUT5vjdhzF1cvHhkxdvFtzhRGdHqJMy1F32UjIv3UUlaro7H
cwTN1nKyG/fEgUjAptFy+xFsOLiHGRiTADNzG8QDT46gSLqW8ct/SVDZvu7c
mq0jqHm5vdX/cxo4xEn0qLRwsN+23bPU9ROkKwn+PbmbgzcbL69T214IartG
1JInhlBC98ns5qXlYK/x8GFBxxAqmLK2KfiUQ+yW1ZS6n1zsPXKs6185iK3d
5jb1dgjd2aHyAdMVMD3tUmJkMIRJUdaydfRK+FHAOT0Y9hvbE0U9GOdrYeGT
V+qi128k8XaML6mshZ3pwvNi137jUKVh6YhWHaRGacTtP/AbM5Sd9NWW1EOw
p8tgUM8gUhXsS46E/QKLAxyvbbsG8cztUKtFaITQnV6N+rKDuLAQpyJzvRFq
1IUVLIQGcfTCn5aU142gu1GjyrtzAENc1X8tG26Ezf+cxSm+A6h7YUXQaAgF
zk//teu9OYD9ih5DPvkUiBgJzp+zHMC7FqlCvl0UEGR8vLB52wAKlwm6MFSb
gEMefn+b3o/Z2ktOTHxvAqWCB3N+Jf24uvLDJmlmE9h8WmX67kM/9luEPvu8
lApN8erj5Q/7kdhJFTE2okK+j7POWuV+3Gtp5f/3JxUeGww3FLj34ZW98+L8
2c3ww3jo+I7LfXjA5vr+HdXNwGP6uz7TtA+TzU+5stnNcP/0QG2ifB966NW0
VayhwV37nsrg2l5sy1a6lfkfDXIdu40E83qxMEOOOuZPg3EXdoVPfC/2Faz9
XRBLgxtuzDK3u734JH3fitYqGjj4dZBtZXvx5mmNNnspOqQEtUO7UC+ePNr2
oX0rHbpD2orP/OlB3TfLiVYdOti+aSk6Ut2Db+hqkrcu0iHuHbG/IrcHd68r
FV15kw6d8fRCUmwP6p3eoKPpTQfL9Ob8nbd7cOaMzahULB0iM6m7s617kOoy
eLnzIx1oOU1ftx7uQU85z5ZtRXQw/9aYu2ljD/rNjr9zp9PhaG1d9vLKbjTo
ETbPFCQgoKF225OcblxjEPeOIU5AJbUmczG6G2/6fA9J2EiAYUdVxoRrNyqQ
OvXp2gQ8YVaqupzvxkyRx8MmOgT86PmZ3n+oG+UuT4mZGRKgyylP7VjfjYqa
gUkiZwi4P16mZMHfjT3zpnO1FwgonCpNoYyyceS3XKyMHcGdrx+Kpm1sbE2l
C/BcJ2D3v5Kkn+Vs1G2DNLdbBNxdWrJZL5uNuaqqM4/dCcgVICcURbGRqud4
TdGLgPEVKLf7KRt3VNW5nn9MgKZIcdynG2y8fnWLr4ofAS4S3zepWbJxbYXB
+uAgAjKkimJSDNhYHTyb/CyEgEGZbxvktrFxw9U1b6XDCFCRK4x+K83G9DmH
G/qvCXBQLFgvuYyN/GNlr/miCEhRyY8K4bCwenzWzyaagG71POkVLSwMSSXy
TsUQIK/9NfJpKQs5hVpvWLEE2Oz6spYnk4X3Kc3xQvEExO7LjbgXyULK6/BD
dVzcqft5zR8fFvp9PriwNYEAGf2csBvOLNxZn75bgYstjT6JD55l4X8h8c4F
XH7kkezQK3osJBKmxH7HEUA7niXapcbCxY/3ogu4/tacygw5t5aF9ywXvRS5
8eRsCSw0XMpCkTKcMOfGazZ7tVtrhInRqyxPqHPzGa4xEN7YxsRbkDz1iZtv
QIzcHqGfTBy09dBjceuh5LpoO5XDxLMPMl8VvySgTL8tkBXDRJEomcNGzwmw
lcz/Uh/AREfy25L7AQQs9od1Fd5lYtHM0vMXfQl4+811+ftLTLQ8ou428oiA
Pc+PbX91jImR5BFX9QcE3Nou+MxpCxNP7Yh7lMvVezV/T/ZZMSbe19c9tcjt
hwyipFV/kYFREc2Ppu0J6H3gqSFDY6D0VrNrs+cIeGxmYSH4g4HynmzGEnMC
ZDfv9Jn8yEBPrQaN70e49avkNNc+ZaDLyJoqQ26/TkfV/Mt3ZWCuwKYmiR0E
hDmnqiRfYGBsClMjQpWAerFLDx7sZGDBm4kzn6QJcOrRfX9NjoFhi+OMIyIE
COavbzy9ioFOK1buieIn4Glh+uHz1V1oo/u70nycDi7HX0Z+V+nCivFFqkEF
HVInTYbCebuQ7n1dya+QDqw3y0guLZ0YMvv5gE8mHc50u/Vt9O9Es1pNrehw
OoCH9S7v/g60Y/i8crWhw72NUgEW5A4U+2hz5c5JOuSWNnZoRnLxe2JE24AO
ysKGT5lGHehgMP2pfQsdRBJVqXrv2xFXhej96aeBiXGP0vqH7eikwTBqJGjw
ZDjGc+JMO0pjwOK1ShrM7BbbnMTfjvUnjs9TUmjArJ1x5bNvwwXF3aHBNjTI
mSpfXanQivpUP+2Zn83wPD3hh+5sCw4YOohK5jSDk/XDO1/qWlCtspTy+20z
KFTsaUu424LR464MskszRIR/SHlQSWBKINhsFG2GezteHth+nY7u2oZfRQ5T
Qe/WeaeYz1T8+J8iU9afAhu37N24xo+Kf7X+6Ck6UWC+ZU1j4HkqesdbJI4e
pUDuwV+7PPioqOF3Qb9zNQW2iOotOXW2CXNkJ/fIv2oEoWylN8vnG9GRNVv8
9UUDJLf1BA88qceboYp5ZO772HpfMvbd9nocX+bvqP60FoQ3GmWfYNVhWHn1
shMHa+GuTSqlAOpwbniGh5xfA4d6HNcGzNVg+DKXdyeTqqGfMxK39WYVbnil
FjrlUglbl8x9drIqQw3fpxVR9FK4cEImt+1yLsaFjTsX6+VCgZBn8487n4Ea
8ubBrMVnjFNf05Qlnwu22odka5fkoq9ZVkP0r1ywzqpPuJqRi6ci2DV3Vb7C
pFAJc2zxC47KHf2xtSMf7CaOPNwUn49b9m7ICjUohiuMf7Mk4jtWfb5o8Mm/
DEJc+TxPLylDnXK1UiVGGYhljCkvOVmG2bTZgzG7ysFWdGn2nfgyjJh9BYHs
clhiUBTxEcrxClTuszvwE2pjIlmHPCrwX7WmlvRYFcw0e54yY1TiThbvxkcW
v6AjhTfZ0K0ONQrPjmmm/QL+wvNlRwrqcEvoxzLG7C+IKoi8yj9fhyviM3bG
mTbAV8ruPREP6nHBzKL9H6cBXL5nTws9/IUd2VkqqEWB/X/hmFlBA7ZGW4qv
taSACeOLfTW9AWl+fH9dfCjQx1IolppqwHobq4aNTRSQc9VM09RuxGIRATev
200w3lI7qJfaiLE3rcsO5FGBvilsPDqQgtHnl2eGd1Ghc+x8t/p7CkYa574e
FmiGqiAlseAfFAyRFXJ6Z9EMaUbL4nNnKOjd8EX072wzsGbT+WMuNaGt5qqL
Rdx3ecWrLZVP1ahoLZNvLGFHh6cDtZfrDKhoKXhZ+3owHXRyHuzp4PblSUY+
n0wnHQrKSCtPBVFRL+RKhudDAo5KyhCv+qm4efTb7L4fLfAuM44uENGM9+v0
n0wOt8C9OOqjCxnNSEuvEc6UboXWS3PBjj+aMcCubbOcayus3GbCSh1uxtHW
OVMB2TZoLNaTTCPR0CTfhyAfaYOjwqZOGadomBQudPmeWxsot6Ycu+xAw7Nm
69yH69tgpsiNNvCchsXlexOaHrSDrx/t6VGChlKJJWrBae2QHJbU3zlAw1ve
h/MONbeDQNUmfrl5GiruP1dboNYBT7yPPsuRoWNQtvtUbFsHzC39eeCvFR17
g3kenRPohArVQ6I8TnQkOfmtEN/eCblKDTWZHnScUIyU9Q3ohFHX7SuFI+ho
+TbP5PreLriu8vB0RTUdc92hWdGuC4ZqohfW0ekofObnxa6QLrjJkc9by6Zj
iQj99sn+LnD3f31fYI6Oq9yy/vEJMeDP9Xehs8sILLSbKGNtYoB9yj7Ky9UE
Suh7Ho8+wgCZsWvdOZsJLNFCCQ9bBlg4i//Yp06gi+zS1tNuDLi35nGX/S4C
K/8GXFmdyAAbZI+kGRF4Z6heZSifa682NIzHCZRvExuprGdAVtTAQfezBHrm
R3n4zDHgsPk4b70dgcrvO3UvijDBWHCNh+N1Aqnh8st0tjBBONzq/PtbBD56
Yl8lpcMEqawTWk/cCdT4L/35nxNMYK14/IDHi8A2W4455SoTem08K9Y/JtDP
TFs66wETEi5XvGx+RuBOuNsZ+IoJoVUjV9SDCGSpFyY6pDFB2/hxuXwIgS9k
Fh0MkQmLYSv3fnlFoM4KPQ35Zia42q017I4gcGD26cTiIBMEb2y7kfWGwIj+
qvw2HhaQrjJ0JKMJ1Kev8sqXZEH40q/bpWIIHC0/oR+uxgKf2f0tubEERueG
C97SY8GTxb853P0CDye21B2zYIFk5bNDRfFc/tNM+3JnFgj+ObRWMYHASIfH
//Y/ZsHPts1O3P0FSUcsInMiWWDdD/U1XH6/urqWSiYLWn2LagW5OERkSXVs
KQsMNn8bZ3D97ZmgXZJsYUG6yoVac248jOYP80EcFqzlL+vh7lfol+8dtnQZ
GyIURGsEogjUfHta/Z40G7TH7ASNXxNIPNhaMarBhhk6W0UujEBvm3/WVw3Y
MGGQ8S2UWy9lfep0xzk2aCQxDkdz69mgmBZy6gYbvtom2BzwI9Bd0Eul5gkb
wgbEgu5w9aisU7LKz2KDn6DviTSufjezFyY0ytmQ41azNImrr9SrxqDkVjZc
sTWc387V38HCsziUrxt8T50fFLUmUGS/2dnl67tBeJfOnPUZAvM3KI4+1OwG
Ez3aQzhGoCC7Xs7ZqhtWBhbLFOgQmF2eWMi+2Q0fYo8fPbGdQItUd3NL325Q
fSEr76lCYKqz/FOjT92wJEtg7JEEgUYzd/rlBHrAuDT0xvEeOnJaTR5FyvSA
rne1ggNBx4jvm9at1u6BW+6mTOEa7rz6VB1ZON8D5dWFccuy6Oi7akMWLacH
zle2Bj1xpaPG6JiRaWUPBGlKNPDY0pFGqWCUdvSAxY4kTwEzOm6JvCn2SbAX
xopNdXLU6FghX3Yn0LoXHD655N1k0NCF743wktu9kP9z2cvttTSU7Hd+7+7f
CzytC9sf5NHQ/uPaFrvcXnifEMmfGERD/j1OOiShPggJ36KtpkVDQ1OxpX++
9MF0YCv8utSMz22Xj81W9YGurpdMlnEzEnd4uhY7+oBkchE2aTSjYwynUJC/
H6KYpV2Z01R8PlJ9S+ZMP+xT89Z79JSKxMvHLP2pfrDdInwkLrAJ5VLuNRgL
DYBZE4+HhWMTOha6FptuHIALCa0r3xo34QLrYtTZQwPQK6XB+b6Uy9+hc9Ip
YgAsfb8fu3mbgo60yZLQXYOw0uKn3k5oxM+Dv7NemwxC1NPkoquSjbiwyHoX
bT0ISe8kijYON+BzpUaPFN9BOPTvRZPUmwb87P5Rq5A2CLXHqvbY037hwjr7
eObd3xDH8y7eaqQWX1yke2vmDcHMAv2AuXUF+g7pQG/tEJDcrR1+sMrRyyPh
71vWEPAMuTlP2JWjyyvnewLCw2Cwbb3xa4cyPPZz6e3OK8MQZqi0rNb6Bwpv
07waJMYBM6dhr20yRchfFK6op8wBEbA44bBQiIvG8+zpAxzIj0jq5G8tQM6l
CpvL1zhg89Xsg3NwHtZHnLfcR+bAzZnFiI/UHHy+6Gfa7zwCDNnfq1Mq4tE3
kLMi5vEIxJV01K27EoNeUqeqzd9wcfQ5L0HNN+iivckIy0aANNJEGB4LRqXP
lrI1q0aB53eF03SBJwj0jUonXOHiY4etKGvT4eexDavMxMaArKj0Gft+gIQG
U/KWzBhoKqbUaGSUgs2qZNmwLWOQ3SNv1udaBnM1ajuIfWNAemaftpu3AtQO
61jZXB6DyLNHJxy3VUGIvlXazdwxcA/Qi6io/gWWe94YvjwzDmGrNZrMebn/
8bUXjn+2GQcHta51Xe50mJiSPdfsOA6aMZTD68foEPQl9br0w3EY5aSy37MJ
QO38V/Hvx2HPEY0cmcZWUFCnMz/NjMPKDbfFq+s6YVhujRclagIca2lnbqSy
YY9nvGtJ0gRIwrbV+zhs8KGq22VnToDFYm/CxR3dIPns0NHnPyYgpXy/RFFJ
N+gOua0zGZyAGFWOAjJ64MXX1q8leychYFpcW1KzH7SOxI1kE5OwNcEs8vCa
YbifpMaOZU3C+ZAtJZX2w1DxN5/2fIiLWRGPU/OHwTK78ft1nj+QLyEcHHCB
Az5rlgYpK/8BtavV+R0fRqCpy045zu0PlGoHmd9WH4M7t1VtX0hOgZPz/IEB
3kmQFBopOiM3BcIvey0YOyYhPzZHaqPaFKjx+n8Vd5iEheq9DRkHpyA11zJr
269J8JEzhurrU5AywFsHcX/gef2VDXylU3AojG3fajoNKcoxLfduTEPANgn/
CvocGBfb7tS7Nw27pMsIL7F5GDBXfLn86TTsL74k6WY6D2oPM4wjo6bBTLmp
QalsHnKaC/O+lHPt/5q5B+cuQLEPPXx0/QwU5RqQHscvAr1d5KR95Qx8PSop
8d8ZXpJJoB1xmzIDGev7Ij/c4SUV7S20ftw+A936kv684bykuIjLTnGjM+Ao
dKCNj8pLcjD7+qRVahbCzjqGuZovIc2VWuUduzYLa7S2V3adXUqS+ZAis1to
DtKbp5Mc3fhINh46fQJH5+FKsExWs7gQaeuVymbOmXkQiIi1FtYVIk0cO1XW
bDsP3cYP5Z0dhEi+CtfjE93m4cWAqMK770KkjF9vrSBxHmSKsvMqr60gzSrO
/7o7Nw+Mxr2OVlUrSaGUgvye1AXAjYlGLcmrSaWquwNK+RYh+c3zmLLfYiTr
bacSx1YvwkLmbQmFZeKkGW3Xok3rFiFK8kVNuIw4SW3fB46nxiI4t6+TzDYV
J4UZbzLfcXYRHEhJVeRscZK9nYBMcuoiBJ3TELe4J0ESjKV/9D3yD04cj73j
v16StGV5UX+SMQ8pHkYTT7yWJm0ocjLk8+Ml6Q501u5IlyXxzC1Ju8VaQioO
fnVHNkKRNH3iu3W54jJS/5bPfL/7t5Ladlxcr/iEj6RYXPesr1STdPOsiKh8
Oz9J/mPOufseO0g/WVdOe7oKkHh/Uq6nHN5F+h+fLSJo
      "]]}, 
    {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
BzP/+sNs4n//bwfPO8om/h+JPhUH
      "]]}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->{517.5000000000006, Automatic},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-4, 4}, {-22.414495153538805`, 22.28769569536144}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.6804509462533226`*^9, 3.68045102457915*^9, 3.68045108312936*^9, 
   3.6804512244298472`*^9, 3.680451493924821*^9, 3.6804515726345844`*^9, 
   3.6804516383805337`*^9, 3.6804517463633504`*^9, 3.6804519860853086`*^9, 
   3.68045895955268*^9, {3.6804592693123207`*^9, 3.6804592933401585`*^9}, {
   3.6805363409467664`*^9, 3.680536347425081*^9}, 3.68053862464725*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{958, 1028},
WindowMargins->{{-7, Automatic}, {Automatic, 0}},
Magnification:>1.5 Inherited,
FrontEndVersion->"11.0 for Microsoft Windows (64-bit) (July 28, 2016)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 180, 2, 150, "Title"],
Cell[763, 26, 121, 1, 45, "Text"],
Cell[887, 29, 259, 7, 45, "Input"],
Cell[CellGroupData[{
Cell[1171, 40, 264, 3, 106, "Section"],
Cell[CellGroupData[{
Cell[1460, 47, 363, 9, 58, "Subsubsection"],
Cell[1826, 58, 218, 4, 45, "Text"],
Cell[CellGroupData[{
Cell[2069, 66, 972, 18, 220, "Input"],
Cell[3044, 86, 6313, 133, 148, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9394, 224, 211, 4, 45, "Input"],
Cell[9608, 230, 6238, 131, 148, "Output"]
}, Open  ]],
Cell[15861, 364, 115, 1, 45, "Text"],
Cell[15979, 367, 661, 16, 45, "Input"],
Cell[16643, 385, 108, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[16776, 390, 262, 5, 45, "Input"],
Cell[17041, 397, 6281, 131, 148, "Output"]
}, Open  ]],
Cell[23337, 531, 114, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[23476, 536, 835, 20, 45, "Input"],
Cell[24314, 558, 6173, 113, 365, "Output"]
}, Open  ]],
Cell[30502, 674, 253, 5, 74, "Text"],
Cell[CellGroupData[{
Cell[30780, 683, 337, 10, 45, "Input"],
Cell[31120, 695, 15560, 270, 357, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[46729, 971, 434, 11, 58, "Subsubsection"],
Cell[47166, 984, 345, 6, 102, "Text"],
Cell[CellGroupData[{
Cell[47536, 994, 1202, 22, 249, "Input"],
Cell[48741, 1018, 7777, 160, 174, "Output"]
}, Open  ]],
Cell[56533, 1181, 106, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[56664, 1186, 211, 4, 45, "Input"],
Cell[56878, 1192, 7386, 153, 174, "Output"]
}, Open  ]],
Cell[64279, 1348, 661, 16, 45, "Input"],
Cell[CellGroupData[{
Cell[64965, 1368, 191, 4, 45, "Input"],
Cell[65159, 1374, 722, 18, 146, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[65918, 1397, 423, 8, 45, "Input"],
Cell[66344, 1407, 7578, 156, 174, "Output"]
}, Open  ]],
Cell[73937, 1566, 307, 9, 47, "Text"],
Cell[CellGroupData[{
Cell[74269, 1579, 833, 20, 45, "Input"],
Cell[75105, 1601, 6322, 115, 542, "Output"]
}, Open  ]],
Cell[81442, 1719, 341, 9, 76, "Text"],
Cell[CellGroupData[{
Cell[81808, 1732, 696, 15, 45, "Input"],
Cell[82507, 1749, 8444, 153, 359, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[91000, 1908, 450, 11, 58, "Subsubsection"],
Cell[91453, 1921, 207, 4, 74, "Text"],
Cell[CellGroupData[{
Cell[91685, 1929, 1417, 26, 307, "Input"],
Cell[93105, 1957, 9863, 204, 224, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[103005, 2166, 211, 4, 45, "Input"],
Cell[103219, 2172, 9710, 200, 224, "Output"]
}, Open  ]],
Cell[112944, 2375, 1053, 23, 45, "Input"],
Cell[CellGroupData[{
Cell[114022, 2402, 189, 4, 45, "Input"],
Cell[114214, 2408, 1009, 28, 146, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[115260, 2441, 525, 9, 45, "Input"],
Cell[115788, 2452, 10031, 205, 224, "Output"]
}, Open  ]],
Cell[125834, 2660, 361, 9, 76, "Text"],
Cell[CellGroupData[{
Cell[126220, 2673, 1182, 26, 45, "Input"],
Cell[127405, 2701, 11678, 204, 371, "Output"]
}, Open  ]],
Cell[139098, 2908, 94, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[139217, 2913, 978, 18, 45, "Input"],
Cell[140198, 2933, 21471, 365, 354, "Output"]
}, Open  ]],
Cell[161684, 3301, 349, 9, 76, "Text"],
Cell[CellGroupData[{
Cell[162058, 3314, 957, 24, 45, "Input"],
Cell[163018, 3340, 13224, 229, 511, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[176291, 3575, 460, 11, 58, "Subsubsection"],
Cell[176754, 3588, 301, 9, 47, "Text"],
Cell[CellGroupData[{
Cell[177080, 3601, 279, 8, 45, "Input"],
Cell[177362, 3611, 10889, 191, 354, "Output"]
}, Open  ]],
Cell[188266, 3805, 159, 3, 45, "Text"],
Cell[CellGroupData[{
Cell[188450, 3812, 1571, 28, 307, "Input"],
Cell[190024, 3842, 9790, 202, 224, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[199851, 4049, 210, 4, 45, "Input"],
Cell[200064, 4055, 9689, 200, 224, "Output"]
}, Open  ]],
Cell[209768, 4258, 107, 1, 45, "Text"],
Cell[209878, 4261, 877, 21, 45, "Input"],
Cell[CellGroupData[{
Cell[210780, 4286, 372, 10, 45, "Input"],
Cell[211155, 4298, 957, 26, 146, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[212149, 4329, 523, 9, 45, "Input"],
Cell[212675, 4340, 9954, 203, 224, "Output"]
}, Open  ]],
Cell[222644, 4546, 114, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[222783, 4551, 1033, 26, 45, "Input"],
Cell[223819, 4579, 18162, 309, 535, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[242018, 4893, 823, 17, 45, "Input"],
Cell[242844, 4912, 16134, 277, 360, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[259015, 5194, 770, 17, 45, "Input"],
Cell[259788, 5213, 16959, 292, 503, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

