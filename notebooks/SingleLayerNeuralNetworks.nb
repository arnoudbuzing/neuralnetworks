(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    223401,       4985]
NotebookOptionsPosition[    216425,       4753]
NotebookOutlinePosition[    216797,       4769]
CellTagsIndexPosition[    216754,       4766]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Neural Networks", "Title",
 CellChangeTimes->{{3.6805340369401255`*^9, 3.6805340397721033`*^9}, 
   3.6805342179092436`*^9}],

Cell["Use a GPU for training, when available:", "Text",
 CellChangeTimes->{{3.680534931845997*^9, 3.680534941341607*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"SetOptions", "[", 
   RowBox[{"NetTrain", ",", 
    RowBox[{"TargetDevice", "\[Rule]", "\"\<GPU\>\""}]}], "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.680450832737338*^9, 3.680450847613676*^9}, 
   3.680534057604774*^9}],

Cell[CellGroupData[{

Cell["Single Layer Neural Networks", "Section",
 CellChangeTimes->{{3.680534042540225*^9, 3.6805340504446907`*^9}, {
  3.6805350702056704`*^9, 3.680535078469378*^9}}],

Cell[CellGroupData[{

Cell[TextData[{
 "Simplest Case \[LongDash] Training for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"y", " ", "=", " ", "0"}], TraditionalForm]]]
}], "Subsubsection",
 CellChangeTimes->{{3.6804507867252703`*^9, 3.680450797133446*^9}, {
  3.6804509791092367`*^9, 3.680450979173298*^9}, {3.6805341374287252`*^9, 
  3.6805341684528255`*^9}, {3.68053502884593*^9, 3.680535034591074*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\"\<input\>\"", "\[Rule]", "\"\<hidden\>\""}], ",", 
     RowBox[{"\"\<hidden\>\"", "\[Rule]", "\"\<output\>\""}]}], "}"}], ",", 
   RowBox[{"VertexLabels", "\[Rule]", "\"\<Name\>\""}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6805369596548247`*^9, 3.6805370416368914`*^9}}],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{"input", "hidden", "output"}, {{{1, 2}, {2, 3}}, Null}, {
      VertexLabels -> {"Name"}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
        ArrowBox[{{{0., 3.6739403974420594`*^-16}, {1., 
         2.4492935982947064`*^-16}}, {{1., 2.4492935982947064`*^-16}, {2., 
         0.}}}, 0.02261146496815286]}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[
        0.7]}], {DiskBox[{0., 3.6739403974420594*^-16}, 0.02261146496815286], 
         InsetBox["\<\"input\"\>", 
          Offset[{2, 2}, {0.02261146496815286, 0.02261146496815323}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {
         DiskBox[{1., 2.4492935982947064*^-16}, 0.02261146496815286], 
         InsetBox["\<\"hidden\"\>", 
          Offset[{2, 2}, {1.0226114649681528, 0.022611464968153108}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}, {DiskBox[{2., 0.}, 0.02261146496815286], 
         InsetBox["\<\"output\"\>", 
          Offset[{2, 2}, {2.022611464968153, 0.02261146496815286}], 
          ImageScaled[{0, 0}],
          BaseStyle->"Graphics"]}}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{{3.6805369682645082`*^9, 3.6805369738209467`*^9}, {
  3.680537004800626*^9, 3.680537042257887*^9}}]
}, Open  ]],

Cell["\<\
Define a single layer fully-connected neural network, with a single (scalar) \
input and a single (scalar) output:\
\>", "Text",
 CellChangeTimes->{{3.680456458693856*^9, 3.6804564949900727`*^9}, {
  3.68053433357345*^9, 3.6805343362052765`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetChain", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"DotPlusLayer", "[", "1", "]"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", "\"\<Scalar\>\""}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.6803580407480574`*^9, 3.680358081136017*^9}, 
   3.680358318545034*^9, {3.680358450833645*^9, 3.680358454922589*^9}, {
   3.680358520949281*^9, 3.6803585273934994`*^9}, {3.680450694661951*^9, 
   3.680450695821642*^9}, 3.680450816894287*^9, 3.6804565235670967`*^9, {
   3.6805342301841908`*^9, 3.6805342322539377`*^9}, {3.6805342718383827`*^9, 
   3.6805343265107517`*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"encoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Inputs", "Input"}, 
             "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 1}], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[1, {1}]]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "1", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`EncodedType[
             NetEncoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Output" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{344., {30., 39.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.68045652418118*^9, 3.6805341865272665`*^9, 3.6805342406805687`*^9, {
   3.68053427811098*^9, 3.6805343158323*^9}, 3.680534345957467*^9, 
   3.680537045449563*^9, 3.680537105953275*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetGraph", "[", "net", "]"}]], "Input",
 CellChangeTimes->{{3.68053704753458*^9, 3.6805370505809546`*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetGraph", 
     RowBox[{"[", 
      PanelBox[
       TagBox[
        DynamicModuleBox[{NeuralNetworks`NetGraph`PackagePrivate`selection$$ =
          2, NeuralNetworks`NetGraph`PackagePrivate`outIndex$$ = 2, 
         NeuralNetworks`NetGraph`PackagePrivate`inputs$$ = Association[
         "Input" -> NeuralNetworks`TensorT[1, {1}]], 
         NeuralNetworks`NetGraph`PackagePrivate`outputs$$ = Association[
         "Output" -> NeuralNetworks`TensorT[1, {1}]], 
         NeuralNetworks`NetGraph`PackagePrivate`labels$$ = {
         "Input", "1", "Output"}, 
         NeuralNetworks`NetGraph`PackagePrivate`vertices$$ = Association[
         "1" -> Association[
           "Type" -> "DotPlus", "Arrays" -> 
            Association[
             "Weights" -> NeuralNetworks`TensorT[2, {1, 1}], "Biases" -> 
              NeuralNetworks`Nullable[
                NeuralNetworks`TensorT[1, {1}]]], "Parameters" -> 
            Association["Size" -> 1, "$InputSize" -> 1], "Inputs" -> 
            Association["Input" -> NeuralNetworks`TensorT[1, {1}]], "Outputs" -> 
            Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         NeuralNetworks`NetGraph`PackagePrivate`vports$$ = {
          NetPort["Inputs", "Input"], 
          NetPort["Vertices", "1"], 
          NetPort["Outputs", "Output"]}}, 
         TagBox[GridBox[{
            {
             TemplateBox[{TagBox[
                GraphicsBox[{{
                   GrayLevel[0.7], {
                    
                    LineBox[{{-2., 1.2246467991473532`*^-16}, {-1., 
                    6.123233995736766*^-17}}], 
                    LineBox[{{-1., 6.123233995736766*^-17}, {0., 0.}}]}}, {
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-1.4, 
                    8.572527594031473*^-17}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736766*^-17}], 
                   InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7], StripOnInput -> False]], {-0.4, 
                    2.4492935982947065`*^-17}, {-0.25, 0}, 
                    Offset[8], {1., -6.123233995736766*^-17}]}, {
                   GrayLevel[0], {
                    AbsolutePointSize[5], {{
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{-2., 1.2246467991473532`*^-16}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.35], 
                    TagBox[
                    PointBox[{-1., 6.123233995736766*^-17}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, {
                    GrayLevel[0.5], 
                    TagBox[
                    PointBox[{0., 0.}], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$ = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}}}}, {{
                    InsetBox[
                    FormBox["\"Input\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-2., 1.2246467991473532`*^-16}], 
                    Offset[{0, -5.5}, {-2., 1.2246467991473532`*^-16}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {-1., 6.123233995736766*^-17}], 
                    Offset[{0, -5.5}, {-1., 6.123233995736766*^-17}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox[
                    FormBox["\"Output\"", TraditionalForm], 
                    NCache[
                    Offset[{0, 
                    Rational[-11, 2]}, {0., 0.}], 
                    Offset[{0, -5.5}, {0., 0.}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}]}, 
                   StyleBox[{
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{3.3677786976552215`*^-16, 5.5}, {-1.4, 
                    8.572527594031473*^-17}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -6.123233995736766*^-17}], 
                    InsetBox[
                    FormBox["\"1\"", TraditionalForm], 
                    
                    Offset[{3.3677786976552215`*^-16, 5.5}, {-0.4, 
                    2.4492935982947065`*^-17}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    1., -6.123233995736766*^-17}]}, FontColor -> 
                    GrayLevel[0.5], FontSize -> 8, FontWeight -> "Thin", 
                    StripOnInput -> False]}, 
                  
                  DynamicModuleBox[{
                   GeneralUtilities`Graphics`PackagePrivate`vpos$14139 = \
{{-2., 1.2246467991473532`*^-16}, {-1., 6.123233995736766*^-17}, {0., 0.}}}, 
                   DynamicBox[
                    Typeset`ToBoxes[
                    If[
                    Not[
                    IntegerQ[
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$]], {}, {
                    AbsolutePointSize[10], 
                    Opacity[0.2, Black], 
                    Point[
                    Part[
                    GeneralUtilities`Graphics`PackagePrivate`vpos$14139, 
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$]]}], 
                    StandardForm, Graphics], 
                    TrackedSymbols :> {
                    NeuralNetworks`NetGraph`PackagePrivate`selection$$}], 
                   DynamicModuleValues :> {}]}, 
                 ImageSize -> {170., 25.680000000000007`}, AspectRatio -> 
                 Full, PlotRangePadding -> 0, 
                 ImagePadding -> {{19.5, 22.5}, {15.5, 10.179999999999998`}}, 
                 ImageMargins -> {{0, 0}, {15, 15}}, 
                 BaseStyle -> {TooltipBoxOptions -> {TooltipDelay -> 0.08}}], 
                
                EventHandlerTag[{
                 "MouseClicked" :> (
                   NeuralNetworks`NetGraph`PackagePrivate`selection$$ = None),
                   Method -> "Preemptive", PassEventsDown -> Automatic, 
                  PassEventsUp -> True}]],FormBox[
                TemplateBox[{
                  StyleBox["DotPlusLayer", 
                   GrayLevel[0.35], StripOnInput -> False]}, "PointLegend", 
                 DisplayFunction -> (FormBox[
                   StyleBox[
                    StyleBox[
                    PaneBox[
                    TemplateBox[{"   ", "\"   \"", 
                    TemplateBox[{
                    GraphicsBox[{{}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    GrayLevel[0.35]], {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    AbsoluteThickness[1.6], 
                    GrayLevel[0.35]], 
                    PointBox[
                    NCache[{
                    Scaled[{
                    Rational[1, 2], 
                    Rational[1, 2]}]}, {
                    Scaled[{0.5, 0.5}]}]]}}}, AspectRatio -> Full, 
                    ImageSize -> {12, 12}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.16666666666666669`] -> 
                    Baseline)], "\" \"", #}, "RowDefault"]}, 
                    "RowWithSeparators"], Alignment -> Left, 
                    AppearanceElements -> None, 
                    ImageMargins -> {{2, 2}, {2, 2}}, ImageSizeAction -> 
                    "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
                    FontFamily -> "Arial"}, Background -> Automatic, 
                    StripOnInput -> False], TraditionalForm]& ), 
                 InterpretationFunction :> (RowBox[{"PointLegend", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Directive", "[", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.35], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.23333333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                    "GrayLevel[0.35]"], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.35]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.35], Editable -> False, Selectable -> False], 
                    "]"}], "}"}], ",", 
                    RowBox[{"{", #, "}"}], ",", 
                    RowBox[{"LegendMarkerSize", "\[Rule]", "12"}], ",", 
                    RowBox[{"LegendMargins", "\[Rule]", "2"}], ",", 
                    
                    RowBox[{
                    "LegendLayout", "\[Rule]", 
                    "GeneralUtilities`Graphics`PackagePrivate`legendTable"}]}]\
, "]"}]& ), Editable -> True], TraditionalForm]},
              "Legended",
              DisplayFunction->(GridBox[{{
                  TagBox[
                   ItemBox[
                    PaneBox[
                    TagBox[#, "SkipImageSizeLevel"], 
                    Alignment -> {Center, Baseline}, BaselinePosition -> 
                    Baseline], DefaultBaseStyle -> "Labeled"], 
                   "SkipImageSizeLevel"]}, {
                  ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Center}}, "Rows" -> {{Center}}}, AutoDelete -> 
                False, GridBoxItemSize -> Automatic, 
                BaselinePosition -> {1, 1}]& ),
              Editable->True,
              InterpretationFunction->(RowBox[{"Legended", "[", 
                 RowBox[{#, ",", 
                   RowBox[{"Placed", "[", 
                    RowBox[{#2, ",", "Below"}], "]"}]}], "]"}]& )]},
            {
             DynamicBox[ToBoxes[
               If[
                IntegerQ[NeuralNetworks`NetGraph`PackagePrivate`selection$$], 
                Item[
                 NeuralNetworks`NetGraph`PackagePrivate`vportInfo[
                  Part[
                  NeuralNetworks`NetGraph`PackagePrivate`vports$$, 
                   NeuralNetworks`NetGraph`PackagePrivate`selection$$], 
                  NeuralNetworks`NetGraph`PackagePrivate`inputs$$, 
                  NeuralNetworks`NetGraph`PackagePrivate`outputs$$, 
                  NeuralNetworks`NetGraph`PackagePrivate`vertices$$], 
                 Alignment -> Center], 
                Item["", ItemSize -> {0, 0}]], StandardForm],
              ImageSizeCache->{334., {133., 143.}},
              
              TrackedSymbols:>{
               NeuralNetworks`NetGraph`PackagePrivate`selection$$}]}
           },
           AutoDelete->False,
           GridBoxAlignment->{"Columns" -> {{Left}}},
           
           GridBoxItemSize->{
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
          "Grid"],
         DynamicModuleValues:>{},
         Initialization:>{NetGraph}],
        Deploy,
        DefaultBaseStyle->"Deploy"],
       BaselinePosition->(Top -> Scaled[3])], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.6805370523051877`*^9}]
}, Open  ]],

Cell["Initialize the neural network with random values", "Text",
 CellChangeTimes->{{3.680456506230349*^9, 3.6804565183108463`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetInitialize", "[", "net", "]"}]}]], "Input",
 CellChangeTimes->{{3.680358433289722*^9, 3.6803584364737926`*^9}, 
   3.6804508183659563`*^9, 3.6804565267914157`*^9}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"encoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Inputs", "Input"}, 
             "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 1}], "Biases" -> 
               NeuralNetworks`TensorT[1, {1}]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "1", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`EncodedType[
             NetEncoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Output" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{344., {30., 39.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.6804565273566*^9, 3.6805341866235795`*^9, 
  3.6805343712403965`*^9, 3.6805344308356056`*^9, 3.6805371083809357`*^9}]
}, Open  ]],

Cell["\<\
Take a look at the fully-connected layer (DotPlusLayer), as it is right now:\
\>", "Text",
 CellChangeTimes->{{3.680456533750704*^9, 3.6804565436224594`*^9}, {
  3.680534401381789*^9, 3.6805344114057484`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"layer", "=", 
  RowBox[{"NetExtract", "[", 
   RowBox[{"net", ",", "1"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6804565454386578`*^9, 3.6804565865283566`*^9}, {
  3.6805343840782194`*^9, 3.6805343955820885`*^9}}],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["DotPlusLayer", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open$$ = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Arrays:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Weights\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"matrix\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Biases\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Ports:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic], BaselinePosition -> 
        Baseline], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("None"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.680534396689509*^9, 3.68053443215318*^9}, 
   3.680537118681257*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetExtract", "[", 
  RowBox[{"layer", ",", "\"\<Weights\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.6804565454386578`*^9, 3.6804565865283566`*^9}, {
  3.6805343840782194`*^9, 3.6805343909825*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"-", "0.8273963928222656`"}], "}"}], "}"}]], "Output",
 CellChangeTimes->{{3.6805344162038307`*^9, 3.6805344334225693`*^9}, 
   3.680537119841915*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetExtract", "[", 
  RowBox[{"layer", ",", "\"\<Biases\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.6804565454386578`*^9, 3.6804565865283566`*^9}, {
  3.6805343840782194`*^9, 3.6805343924060507`*^9}}],

Cell[BoxData[
 RowBox[{"{", "0.`", "}"}]], "Output",
 CellChangeTimes->{{3.680456556170534*^9, 3.680456587239055*^9}, 
   3.6805341866481037`*^9, {3.6805344180919104`*^9, 3.6805344346690755`*^9}, 
   3.6805371210576563`*^9}]
}, Open  ]],

Cell["Generate some random test data, all of the form x\[Rule]0:", "Text",
 CellChangeTimes->{{3.680456589806814*^9, 3.6804566102717667`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomReal", "[", 
  RowBox[{"1", ",", "10"}], "]"}]], "Input",
 CellChangeTimes->{{3.680537159271124*^9, 3.6805371628764477`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.18437491556235375`", ",", "0.3549586518015593`", ",", 
   "0.25260132460423534`", ",", "0.9109765077016558`", ",", 
   "0.9643361529380492`", ",", "0.22592757738892022`", ",", 
   "0.20942121993022367`", ",", "0.6357583603428563`", ",", 
   "0.4191551544198868`", ",", "0.15227703768170908`"}], "}"}]], "Output",
 CellChangeTimes->{3.6805371632263093`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"x", "\[Rule]", "0"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"RandomReal", "[", 
        RowBox[{"1", ",", "10000"}], "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.680358323212538*^9, 3.6803584031626587`*^9}, {
   3.68035846091537*^9, 3.68035846465798*^9}, {3.680358535081916*^9, 
   3.6803585378656015`*^9}, 3.6804507086856833`*^9}],

Cell["\<\
Look at a few entries in the test data. All values have an expected result of \
zero:\
\>", "Text",
 CellChangeTimes->{{3.6804566256315656`*^9, 3.6804566344882975`*^9}, {
  3.6805344493417587`*^9, 3.680534461141848*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomSample", "[", 
   RowBox[{"data", ",", "5"}], "]"}], "//", "Column"}]], "Input",
 CellChangeTimes->{{3.680456616768426*^9, 3.680456621992693*^9}, {
  3.680534440647626*^9, 3.680534442766179*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{"0.8759884043778214`", "\[Rule]", "0"}]},
    {
     RowBox[{"0.8539523581970079`", "\[Rule]", "0"}]},
    {
     RowBox[{"0.7150042556152862`", "\[Rule]", "0"}]},
    {
     RowBox[{"0.5325897237933364`", "\[Rule]", "0"}]},
    {
     RowBox[{"0.8225153990519398`", "\[Rule]", "0"}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{3.680456635839094*^9, 3.6805341866881447`*^9, 
  3.6805344434254837`*^9, 3.680537185171729*^9}]
}, Open  ]],

Cell["Learn from the test data:", "Text",
 CellChangeTimes->{{3.680456643167961*^9, 3.6804566505841312`*^9}, 
   3.6805344722460637`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"result", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", "data"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6803583683570848`*^9, 3.6803583753528333`*^9}, 
   3.680358427497135*^9, 3.6804508205499535`*^9, 3.6804566533765073`*^9}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"encoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Inputs", "Input"}, 
             "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 1}], "Biases" -> 
               NeuralNetworks`TensorT[1, {1}]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "1", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`EncodedType[
             NetEncoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Output" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{344., {30., 39.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.680456660139127*^9, 3.680534189110179*^9, 
  3.680534469273891*^9, 3.6805373466232567`*^9}]
}, Open  ]],

Cell["As expected, result[x] is now always returning 0:", "Text",
 CellChangeTimes->{{3.6804566796167183`*^9, 3.6804566966086664`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"result", "[", "0.2", "]"}]], "Input",
 CellChangeTimes->{{3.680537353877839*^9, 3.680537357172469*^9}}],

Cell[BoxData["0.000040540238842368126`"], "Output",
 CellChangeTimes->{3.6805373584280643`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"result", "[", "0.5", "]"}]], "Input",
 CellChangeTimes->{{3.6805373595504203`*^9, 3.680537362716384*^9}}],

Cell[BoxData["4.293706297175959`*^-6"], "Output",
 CellChangeTimes->{3.680537363391013*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"result", "[", ".98", "]"}]], "Input",
 CellChangeTimes->{{3.6805373748895187`*^9, 3.680537377316682*^9}}],

Cell[BoxData[
 RowBox[{"-", "0.00005370075086830184`"}]], "Output",
 CellChangeTimes->{3.680537377918417*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"result", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", ".1"}], ",", ".1"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", "Orange"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6803583789252787`*^9, 3.6803584162012367`*^9}, {
  3.6803584735966024`*^9, 3.6803584917210913`*^9}, {3.680358552786993*^9, 
  3.6803585569379997`*^9}, {3.6804507381376443`*^9, 3.6804507479426928`*^9}, {
  3.6804566749383917`*^9, 3.6804566767530994`*^9}, {3.680537391420689*^9, 
  3.68053740402005*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[1, 0.5, 0], AbsoluteThickness[1.6], Opacity[1.], 
     LineBox[CompressedData["
1:eJwl0H8w22ccB/BEUpR8Ce3WpV30KNuo/rjWqHW+j40bo+woo6PkFOvSrVVz
6+y6k2xY11LWc2ZDaZnVrKLzY1V8H0eu63LUz4puGho/iggyQqOtTD7PH997
vq/73Of9fu5xTDgTnmTGYrFCNj7TGZQ03dc+E0lv/Ep8V/iI67c9ZVTggTY8
1rnERwfLikrqBf4m+wbo+Ci4W/lHqSDCZFboHB9FJa62XREkmiyJUfPRo33f
+eUK0kwu/+I+H5W/9EH2RUEm5P1exUdSy/rXvxcUQJ4gio+ij12TLeoqYS6M
tEXWRmlsgIPMZNETexvkEjY/3XmpAfo4Sh46d98bFS03Q1+0xBpta7BTsdkY
5jm+VqhJ7dfV83YHzA2TlqhDXLrj2Jwc8m//YIH0r/nY3vzsL5h/GGGOzAw1
/B0uCtjf+5yLPI2ipqO1XTAfv8NBXZke9++69cB9NRlmaGe+xlA932tyu7sb
G2lWR1UP9veDi4aMdOVsi8Lm8gA4eNcL2kb468LExCDkV5xfo3M+aUwudx6C
vCbOU3rFt2biZIYS7BOpp9MOyBte7hyGfsngf/RorfxSn+M/kOflsEg/Ew8W
u371L8xdZmbp3e9YrCe3jIAjdJN0wHXHj29tU4HFl8foc8J4p8exo9C/RClp
97lIa2XIGNj/hILeYrtoKV8jXnxaQXNxsWxXyWPwPV0bc8qj5eHmYDX4UGg/
U/N+QjmzQizWjjB6zXb+VOE4eEg8zjQeDeAU+E+AbRXTTEZgVlnDFHFvt5Zx
fBQ0XJE1CfdzjtUxb3llFggOTIG15stMrEOPgT1AbPh2hdErctUp0iewf8XT
wBRx49LCnadhfrrlGbNF1XjdTE5cdXCd2fS1NML77Ay8V2MKC7Oq42Rq+1lw
cx0bp/4sy7XvALMyrTm4bfcFS7vTGnj/5/FcbBeU6v6NzRzkFZZuwiN7egfS
W8GsVb05rruKnCfitOB0L0t8XOZpJ1wnrk7djCVZ16Qjv81DXtk9K3xzWlhs
c2QB/KcFD18ozRKpQsGsQIqHE8O1LrVh4PZhex5+tbW1LiSKeE3IwxfzYu7m
JBD7ePDwSc+fdFbpYIlcxMNOmVsDLaqI+5p5eP3QeUp5g/QlYB5+qB3vr6oh
XpLzcH5U/fH3bpG8rb08bHQL/zyrldwneoqHR/ryrnIGSJ7KnsK3s1dPDDwg
+2deoXDB4XjXimFilgOFg3/Z2/Cuiuw7uVL4zpfdf0tniJMQhQv3vJkXNkf6
9P4UPqsuiXBcIM4OovAbRz4dbV8mfTciKcxlD1bmr5J87xgKjzUeFovWSJ5C
ROFWccW+/S/I/kfJFP5xp7XeaCTWnKLw/9uI6xA=
      "]]}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->{497., Automatic},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 1}, {-0.1, 0.1}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.6803583844536123`*^9, 3.6803584165055304`*^9}, {
   3.680358477844705*^9, 3.6803584921484995`*^9}, {3.6803585457131696`*^9, 
   3.680358557266316*^9}, {3.680450718778447*^9, 3.6804507484972744`*^9}, {
   3.6804508537378654`*^9, 3.680450879431159*^9}, 3.6804566671964655`*^9, 
   3.680456702499284*^9, 3.6805341892988605`*^9, 3.6805344793733144`*^9, {
   3.680537384028496*^9, 3.6805374045262947`*^9}}]
}, Open  ]],

Cell["Or something close to zero:", "Text",
 CellChangeTimes->{{3.680456711360964*^9, 3.6804567167528353`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"result", "[", "0.4", "]"}]], "Input",
 CellChangeTimes->{{3.6804567046491055`*^9, 3.6804567074013824`*^9}}],

Cell[BoxData["0.00008268620877061039`"], "Output",
 CellChangeTimes->{3.680456707795187*^9, 3.6805341893268876`*^9, 
  3.6805344831974115`*^9}]
}, Closed]],

Cell["\<\
The weights and biases should also be zero in this simplest possible case:\
\>", "Text",
 CellChangeTimes->{{3.680456732713106*^9, 3.6804567492171936`*^9}}],

Cell[CellGroupData[{

Cell[BoxData["result"], "Input",
 CellChangeTimes->{{3.680537420397217*^9, 3.6805374208279676`*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"encoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Inputs", "Input"}, 
             "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 1}], "Biases" -> 
               NeuralNetworks`TensorT[1, {1}]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "1", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`EncodedType[
             NetEncoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Output" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{344., {30., 39.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.680537421310944*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"layer", "=", 
  RowBox[{"NetExtract", "[", 
   RowBox[{"result", ",", "1"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6803588173681602`*^9, 3.6803588579327717`*^9}}],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["DotPlusLayer", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open$$ = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Arrays:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Weights\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"matrix\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Biases\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Ports:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic], BaselinePosition -> 
        Baseline], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("None"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.6803588194134603`*^9, {3.680358852127247*^9, 3.680358858232108*^9}, 
   3.680450770458625*^9, 3.680450884427509*^9, 3.6804567505639763`*^9, 
   3.680534189356917*^9, 3.6805344858035154`*^9, 3.6805374146699886`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetExtract", "[", 
  RowBox[{"layer", ",", "\"\<Weights\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.680358859064044*^9, 3.680358865869697*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"-", "0.00012082178000127897`"}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.6803588661890554`*^9, 3.6804507725301237`*^9, 
  3.6804508853219275`*^9, 3.6804567513886085`*^9, 3.6805341893884473`*^9, 
  3.6805344880694256`*^9, 3.680537427397225*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetExtract", "[", 
  RowBox[{"layer", ",", "\"\<Biases\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.680358859064044*^9, 3.6803588746555767`*^9}}],

Cell[BoxData[
 RowBox[{"{", "0.00006470459629781544`", "}"}]], "Output",
 CellChangeTimes->{3.6803588750600305`*^9, 3.6804507739786596`*^9, 
  3.6804508861564054`*^9, 3.680456752487939*^9, 3.68053418941097*^9, 
  3.680534490195589*^9, 3.6805374292556877`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Training for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"y", " ", "=", " ", "x"}], TraditionalForm]]]
}], "Subsubsection",
 CellChangeTimes->{{3.6804507867252703`*^9, 3.6804508078216476`*^9}, {
  3.6804509740052004`*^9, 3.6804509751492233`*^9}, {3.680534530902028*^9, 
  3.680534540693801*^9}, {3.6805349857498436`*^9, 3.6805350403184586`*^9}}],

Cell["\<\
Slightly more complicated: train a single layer neural network on the \
relationship y=x. First set up the neural network as before:\
\>", "Text",
 CellChangeTimes->{{3.6804567626729527`*^9, 3.680456803762041*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetChain", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"DotPlusLayer", "[", "1", "]"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", "\"\<Scalar\>\""}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.6803580407480574`*^9, 3.680358081136017*^9}, 
   3.680358318545034*^9, {3.680358450833645*^9, 3.680358454922589*^9}, {
   3.680358520949281*^9, 3.6803585273934994`*^9}, {3.680450694661951*^9, 
   3.680450695821642*^9}, 3.680450816894287*^9, {3.6805345544705963`*^9, 
   3.6805345646705112`*^9}, 3.6805374791484003`*^9}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"encoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Inputs", "Input"}, 
             "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 1}], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[1, {1}]]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "1", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`EncodedType[
             NetEncoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Output" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{344., {30., 39.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.6805374796863165`*^9}]
}, Open  ]],

Cell["And initialize it again:", "Text",
 CellChangeTimes->{{3.6804568070816936`*^9, 3.6804568146183376`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetInitialize", "[", "net", "]"}]}]], "Input",
 CellChangeTimes->{{3.680358433289722*^9, 3.6803584364737926`*^9}, 
   3.6804508183659563`*^9, 3.680537481860115*^9}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"encoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Inputs", "Input"}, 
             "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 1}], "Biases" -> 
               NeuralNetworks`TensorT[1, {1}]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "1", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`EncodedType[
             NetEncoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Output" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{344., {30., 39.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.680537482434912*^9}]
}, Open  ]],

Cell["Define the training data, here the rule is x\[Rule]x:", "Text",
 CellChangeTimes->{{3.6804568222098846`*^9, 3.6804568415306864`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"x", "\[Rule]", "x"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"RandomReal", "[", 
        RowBox[{"1", ",", "10000"}], "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.680358323212538*^9, 3.6803584031626587`*^9}, {
   3.68035846091537*^9, 3.68035846465798*^9}, {3.680358535081916*^9, 
   3.6803585378656015`*^9}, 3.6804507086856833`*^9, {3.6804509096300173`*^9, 
   3.6804509097505503`*^9}, {3.680537491964377*^9, 3.680537493228829*^9}}],

Cell["\<\
Here is a sample of the training data, note how the input matches the \
expected result:\
\>", "Text",
 CellChangeTimes->{{3.6804568650986795`*^9, 3.6804568700027847`*^9}, {
  3.680534583862047*^9, 3.6805345954221907`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomSample", "[", 
   RowBox[{"data", ",", "5"}], "]"}], "//", "Column"}]], "Input",
 CellChangeTimes->{{3.6804568715719194`*^9, 3.680456877474792*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{"0.29410845692336984`", "\[Rule]", "0.29410845692336984`"}]},
    {
     RowBox[{"0.45989546331543685`", "\[Rule]", "0.45989546331543685`"}]},
    {
     RowBox[{"0.1862673432883637`", "\[Rule]", "0.1862673432883637`"}]},
    {
     RowBox[{"0.4420811345092486`", "\[Rule]", "0.4420811345092486`"}]},
    {
     RowBox[{"0.19096421423127685`", "\[Rule]", "0.19096421423127685`"}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{3.6804568781863613`*^9, 3.680534578335505*^9, 
  3.6805374952199917`*^9}]
}, Open  ]],

Cell["\<\
And train the neural network with the training data, the loss function goes \
to zero very quickly:\
\>", "Text",
 CellChangeTimes->{{3.6804568524983177`*^9, 3.680456902659047*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"result", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", "data"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6803583683570848`*^9, 3.6803583753528333`*^9}, 
   3.680358427497135*^9, 3.6804508205499535`*^9, 3.6805346004146976`*^9}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"encoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Inputs", "Input"}, 
             "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 1}], "Biases" -> 
               NeuralNetworks`TensorT[1, {1}]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "1", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`EncodedType[
             NetEncoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Output" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{344., {30., 39.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.6805346115579195`*^9, 3.680537516228555*^9}]
}, Open  ]],

Cell["Plot the result, using the the trained function:", "Text",
 CellChangeTimes->{{3.680456915651329*^9, 3.6804569349792037`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"result", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6803583789252787`*^9, 3.6803584162012367`*^9}, {
   3.6803584735966024`*^9, 3.6803584917210913`*^9}, {3.680358552786993*^9, 
   3.6803585569379997`*^9}, {3.6804507381376443`*^9, 3.6804507479426928`*^9}, 
   3.680450929230296*^9}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1:eJwlkH1MU2cUhwt2kY2IFnWkKh9F6jcIDtj8mKcDM6TINhBFMsCOgUOmDpWE
SXS0Czj8YCWmcZ2AVkEdEimMYmCtg9FGJwGBtlpUaLFgLbTwYgZ0OG13e+4f
N7/75Pzuc973crK+S87xZDAYidTjTn6Otb9jbM926pUXtiIEmLHL8k3sSKBY
wFm1HT64Iq1qZu9wc8fSwHhI6DH8Xs1OcTOjonIvpGY77l5gZyP3pOXA0Maf
YsvZBW6W2VoLQLb089Nn2SVuHi7KLQGRV/PqM2yJm4UxPAnsS7sqn3pVi/t+
YF4Hb5coPS5Ajr4l4XLgJk1a1ecU2E+QKKDw4WaQTre5OajtTRv4KVhGD492
9Hd6tcMdc2x377ZO9J3kdUJnXvXyNLsGz68lGphZ9fHC24fvo9+Rfx885+oX
Led2oT9iTRdEuwR3djd043xLUzd0l0Q+vLeuF/2nQnshsMI2VzfZh2wjfWBz
mIyPwrXIrggt1I4ru3x+1uG+ALEOfPxvktFRPfqfvdDD+YMtB2Qhj93MK+Y+
hlle/WhusQHvEyY0QMEmjeJ99QD61FSaGjTn+jlP8X9mBz+F//L0lWuLnuH3
NVSu/2S+84ByEPf9TWXcNc43TX5GvP8clYX++4Ofp5vwPqwME2yw7/E2JA7j
vhEqFy+c8tK8RhaoqWS2V8pXVj3Hvh+V30Yqn7ybYMZ9U3wz1Mdnyf6cpVlK
5Yxt2SLLxRE8bzOVLbvj5kl2jCKnUFm8s/SKwoIsPEglZ4g/UFP6Av2JVG75
sETC3mTBfkuEBdIDeuc8dMiCC1oLzHSVm/NFL3HftPAlSJmZBckhVuw/WGmF
xcaWa54a5KAjaiu8c0qUsvnoGPql+VTWZcrNvuP4fRSVxy7Jy307kYP2/TUO
d9eXebGO2NAXf9gGLP6xDT/62HEuX2CHwdA+3QkVMuOS0g6NlyFkNHMC5/9m
TECGPJrl70QWcN9OgLD0qmjw1iT6DHWTcNvqX+mzi2DfySdQVl0qMH6GLOtJ
JJCdPMFtSKLn1V8QWKFSNSamIgu27SVwVvzlvfNZyMKirwjkRv/66r0TdN9R
SCC4ZMnO+TeQGVO1BJwfnVxg+I32t98k8GRiRHujHpknvkWgIrU549Mm2h/W
SMC1Lvl4qYruH1ISGOwXX56no/1j/QRaTzu+1j2i5616ApKt+9fWDNDzMgOB
hOthihgj7Vs9ROCP73seiMbo8+ZYCVwMjRIn2el+lI3AUXNVCocgdzAnCazZ
dcjUMY08XPMPAaaHvrbCQfuOzxIYbtmaJ3hNz2PmCKjyajaGv6X9vm8I/BLo
PeNy0X6zk8D/EBUDPQ==
      "]]}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 1}, {0, 1}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.6804509250131807`*^9, 3.6804509297789345`*^9}, 
   3.6804569370724583`*^9, 3.680534619413399*^9, 3.6805375237030883`*^9}]
}, Open  ]],

Cell["\<\
In this case the weight should be 1 (also the slope of this function) and the \
bias should be 0 (also the intercept of this function):\
\>", "Text",
 CellChangeTimes->{{3.680456950235668*^9, 3.680456980451868*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"layer", "=", 
  RowBox[{"NetExtract", "[", 
   RowBox[{"result", ",", "1"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6803588173681602`*^9, 3.6803588579327717`*^9}}],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["DotPlusLayer", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open$$ = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Arrays:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Weights\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"matrix\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Biases\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Ports:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic], BaselinePosition -> 
        Baseline], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("None"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.6803588194134603`*^9, {3.680358852127247*^9, 3.680358858232108*^9}, 
   3.680450770458625*^9, 3.680450884427509*^9, 3.6804567505639763`*^9, {
   3.6804569957781506`*^9, 3.6804570098932743`*^9}, 3.68053462441588*^9, 
   3.6805375407928677`*^9}]
}, Open  ]],

Cell["\<\
Here the weight (also the \[OpenCurlyQuote]slope\[CloseCurlyQuote] of the \
function) is indeed close to 1:\
\>", "Text",
 CellChangeTimes->{{3.680457013436302*^9, 3.680457022268735*^9}, {
  3.680534643366013*^9, 3.6805346560860233`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetExtract", "[", 
  RowBox[{"layer", ",", "\"\<Weights\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.680358859064044*^9, 3.680358865869697*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", "0.9997102618217468`", "}"}], "}"}]], "Output",
 CellChangeTimes->{3.6803588661890554`*^9, 3.6804507725301237`*^9, 
  3.6804508853219275`*^9, 3.6804567513886085`*^9, 3.680456997193976*^9, 
  3.6805346337448177`*^9, 3.680537551065691*^9}]
}, Open  ]],

Cell["\<\
And the bias (also the y-intercept of this function) is close to 0:\
\>", "Text",
 CellChangeTimes->{{3.6804570262683797`*^9, 3.680457033044355*^9}, {
  3.680534660046091*^9, 3.6805346734535575`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetExtract", "[", 
  RowBox[{"layer", ",", "\"\<Biases\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.680358859064044*^9, 3.6803588746555767`*^9}}],

Cell[BoxData[
 RowBox[{"{", "0.0001534073380753398`", "}"}]], "Output",
 CellChangeTimes->{3.6803588750600305`*^9, 3.6804507739786596`*^9, 
  3.6804508861564054`*^9, 3.680456752487939*^9, 3.6804569987589293`*^9, 
  3.6805346356129427`*^9, 3.6805346793568726`*^9, 3.6805375526328487`*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Training for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"y", " ", "=", " ", 
    RowBox[{
     RowBox[{"2", "x"}], "+", "1"}]}], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Subsubsection",
 CellChangeTimes->{{3.6804507867252703`*^9, 3.6804508078216476`*^9}, {
  3.680450965765478*^9, 3.6804509705495915`*^9}, {3.6805346881115026`*^9, 
  3.68053470301396*^9}, {3.680535047005644*^9, 3.6805350516868725`*^9}}],

Cell["\<\
One more linear example, in the most general sense: y=a*x+b (here a is 2 and \
b is 1). Set up the same network again:\
\>", "Text",
 CellChangeTimes->{{3.680457044388588*^9, 3.680457077037274*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetChain", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"DotPlusLayer", "[", "1", "]"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", "\"\<Scalar\>\""}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.6803580407480574`*^9, 3.680358081136017*^9}, 
   3.680358318545034*^9, {3.680358450833645*^9, 3.680358454922589*^9}, {
   3.680358520949281*^9, 3.6803585273934994`*^9}, {3.680450694661951*^9, 
   3.680450695821642*^9}, 3.680450816894287*^9, {3.680534711638402*^9, 
   3.680534722141971*^9}, 3.6805375842685547`*^9}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"encoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Inputs", "Input"}, 
             "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 1}], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[1, {1}]]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "1", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`EncodedType[
             NetEncoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Output" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{344., {30., 39.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.6805375848080125`*^9}]
}, Open  ]],

Cell["And initialize it:", "Text",
 CellChangeTimes->{{3.6804570820289125`*^9, 3.6804570845974197`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetInitialize", "[", "net", "]"}]}]], "Input",
 CellChangeTimes->{{3.680358433289722*^9, 3.6803584364737926`*^9}, 
   3.6804508183659563`*^9, 3.6805375864840565`*^9}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"encoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Inputs", "Input"}, 
             "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 1}], "Biases" -> 
               NeuralNetworks`TensorT[1, {1}]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "1", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`EncodedType[
             NetEncoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Output" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{344., {30., 39.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.680537587764722*^9}]
}, Open  ]],

Cell["And prepare the test data for the neural network again:", "Text",
 CellChangeTimes->{{3.680457089309304*^9, 3.6804571101575756`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"x", "\[Rule]", 
      RowBox[{
       RowBox[{"2", "x"}], "+", "1"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"RandomReal", "[", 
        RowBox[{"1", ",", "10000"}], "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.680358323212538*^9, 3.6803584031626587`*^9}, {
   3.68035846091537*^9, 3.68035846465798*^9}, {3.680358535081916*^9, 
   3.6803585378656015`*^9}, 3.6804507086856833`*^9, {3.6804509096300173`*^9, 
   3.6804509097505503`*^9}, {3.680450994789851*^9, 3.680450996390175*^9}}],

Cell["Let\[CloseCurlyQuote]s take a look at the test data:", "Text",
 CellChangeTimes->{{3.6804571252616816`*^9, 3.680457133270008*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomSample", "[", 
   RowBox[{"data", ",", "5"}], "]"}], "//", "Column"}]], "Input",
 CellChangeTimes->{{3.680457135106247*^9, 3.6804571494301367`*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{"0.21065625439168523`", "\[Rule]", "1.4213125087833705`"}]},
    {
     RowBox[{"0.2226072362778284`", "\[Rule]", "1.4452144725556568`"}]},
    {
     RowBox[{"0.9554489677848712`", "\[Rule]", "2.9108979355697424`"}]},
    {
     RowBox[{"0.7103182696448249`", "\[Rule]", "2.42063653928965`"}]},
    {
     RowBox[{"0.22621875668635294`", "\[Rule]", "1.4524375133727059`"}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{3.680457151944789*^9, 3.6805347336916018`*^9, 
  3.6805376000494576`*^9}]
}, Open  ]],

Cell["And train with this test data:", "Text",
 CellChangeTimes->{{3.6804571604538918`*^9, 3.6804571655581975`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"result", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", "data"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6803583683570848`*^9, 3.6803583753528333`*^9}, 
   3.680358427497135*^9, 3.6804508205499535`*^9, 3.680534749470128*^9}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"encoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Inputs", "Input"}, 
             "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 1}], "Biases" -> 
               NeuralNetworks`TensorT[1, {1}]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "1", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`EncodedType[
             NetEncoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Output" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{344., {30., 39.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.68053475787779*^9, 3.6805376216680546`*^9}]
}, Open  ]],

Cell["The result should be close to the function 2x+1:", "Text",
 CellChangeTimes->{{3.6804571846543703`*^9, 3.680457200654663*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"result", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "3"}], "}"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6803583789252787`*^9, 3.6803584162012367`*^9}, {
   3.6803584735966024`*^9, 3.6803584917210913`*^9}, {3.680358552786993*^9, 
   3.6803585569379997`*^9}, {3.6804507381376443`*^9, 3.6804507479426928`*^9}, 
   3.680450929230296*^9, {3.680451013709833*^9, 3.6804510138222623`*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1:eJwl0HtQVHUUB/C7D/iBTCAriauhQEAqmg4hRlS/kzhBIBEIoQW4EpiipSIz
ZMnIOoBPBBpGSUCWly9GFuKRxRIMkE6IIK/AxGXFFXkuu7rLBshu7Ll/3Ln3
M+f8vueen1PM4dA4LsMwQYuP6R0QN9rVNBb+8eInZDNqyvddeWRI6EkXLbLj
qel7hbn51cLtJqdcNlPTwAf9vxYIw0xuKliiphGx+oafhbEmO96yU9Mnm077
ZggT0S1r1VTyZnD6OWGqyQrtF2oqtqh+56wwB/N3Fanprt1FUrWmFPPLgjXU
yiiO9Fstxfy4lxrqGqIabTlfg9Zmv6RJHd40V/s72pK+ovY1tnIOpxGdrXhF
64Z92zs/bMZ5hZla2hxfsGr3ZCvWT/joqM7tI5vb393Dee2PdZQ7W750lWsb
uvjsDPUyiup2VrSjJ9z1tD3Vs+Pu+k7ch3dfT9dkTczeVD3EfEnSf3RCPyTv
29yN+VUrZmnpeH2b9cUePO9/b5ZaO1yfVip78XxFwhy9cKB2n8TlH+xPF8zT
GShX7j/Zj/3PG+dpokdrzfKWAZPht72v6VBF6/kup39NZmxsF+h8fG/euh8f
Y/+WhgXq/gkx7KsfxHpnlIH6FTt9W2Uvx3yVlZEmOexxfho5hPctrjDSDZPh
Vv1BCrTGjYFlNmqL1jk0E5fMAL8xT/p2/lOcL+hg4KBn/SPLwGGTJadcOVD+
WYzkzxk0fPUTB3QTK5eOXHqG/3PwPgdqd/rxcrYrsZ86c+Gkf1phzQgago5x
welJwEBJ2nPsb27mwgdbU3OEHiPouRU8iFzdOcvpQTseOsADXVvG8BHxC9xH
0sSDXH50YqjLKHsfAj4sk9cWc1vRKcq9fDBLFod5Hx3D88l3+MDcjJYOC8bR
wZZmkHBFmiFoRoNSZAYN7mcsbL+fwHxFnRnYBiRsOGU9iV5OzGFw48Oe4zK0
wibaHCqvUhdl9BTe3zapOURJvWwdDKwHDeaQklYkHrylwnzvcAK3Rx3yrHdM
Y15nGYEzBWki+efolK3XCcSGTrlWhLAuvEHgLZmsMigC7Xi4nMC5zK/vXohh
69ZVBPZ7/aJZcnyavU8ZAedUO39yDS1p6yZgeP/EG/032H6PXgKPpp51XytH
i670EciKqI76tArNxA8QMK4PPZYmY+uWcgKDXZlXeT3sfP8xAnfS9d/09LH9
leMEcnz2rCsZYPexnyQQWPZuzTY5O++FisAfPzz4WzzG1tO1BC5t3JIZMsn+
n0pH4OhwfpjTNNv/pZ7A2h2Hhpq07D5ucwT4nN7SLD077+I8AUWtT7xojs3T
vSYgiy/ZtHmBdZSBwOU1Vjqjkc37y0jgfywX5DU=
      "]]}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 1}, {0, 3}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.6804509250131807`*^9, 3.6804509297789345`*^9}, 
   3.6804510142546864`*^9, 3.680452614768936*^9, 3.6804572052454057`*^9, 
   3.680534760807373*^9, 3.680537624798793*^9}]
}, Open  ]],

Cell["\<\
In this case the weight should be 2 (also the slope) and the bias should be \
close to 1 (the y-intercept):\
\>", "Text",
 CellChangeTimes->{{3.680457219302575*^9, 3.680457243318969*^9}, {
  3.68053477558988*^9, 3.680534775685932*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"layer", "=", 
  RowBox[{"NetExtract", "[", 
   RowBox[{"result", ",", "1"}], "]"}]}]], "Input"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["DotPlusLayer", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open$$ = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Arrays:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Weights\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"matrix\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Biases\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Ports:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic], BaselinePosition -> 
        Baseline], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("None"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.6804526306064167`*^9, 3.680457245289538*^9, 
  3.6805347660723457`*^9, 3.6805376460374465`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetExtract", "[", 
  RowBox[{"layer", ",", "\"\<Weights\>\""}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", "1.999750018119812`", "}"}], "}"}]], "Output",
 CellChangeTimes->{{3.6804526220979595`*^9, 3.680452632088944*^9}, 
   3.680457246509077*^9, 3.6805347672423277`*^9, 3.680537647141376*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetExtract", "[", 
  RowBox[{"layer", ",", "\"\<Biases\>\""}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", "1.000138521194458`", "}"}]], "Output",
 CellChangeTimes->{3.6804526384370637`*^9, 3.680457247436096*^9, 
  3.6805347681158323`*^9, 3.680537648090459*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Training for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"y", " ", "=", " ", 
    SuperscriptBox["x", "2"]}], TraditionalForm]],
  FormatType->"TraditionalForm"]
}], "Subsubsection",
 CellChangeTimes->{{3.6804507867252703`*^9, 3.6804508078216476`*^9}, {
  3.680450965765478*^9, 3.6804509705495915`*^9}, {3.6804510395973988`*^9, 
  3.6804510410773745`*^9}, {3.680534965581705*^9, 3.6805349763424664`*^9}, {
  3.6805350567738075`*^9, 3.6805350626540914`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"x", "^", "2"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6805376731436234`*^9, 3.6805376785726776`*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1:eJwVlWk01AsYxm2VVBNaNBNX2UppUtlS5rGVLSpbiSayJHUZJUo3jIxSRF2X
MIUYJcugQcaSLVpQthBGISH8c+OqVK4+vOc55znP7/f1XX/cx9pdREhI6M78
/U5z9+HmyhE72pT1zNZJkYrdYkYURh9ZAxEGed6d+hdoO5Jvsx+RjfFU/f4B
L/0E2qCsEjNAxQr+Rbz9Vp7ZNIvGjoI7ZFto5/8w2KFfQlOKlOPMyTtgxQlT
X3l+De2HuWu8iwodwg4vxZQ9G2ijYW21LnEu0Iiv2bLKrpV2yG2m/BbZDZwv
5XwZ/S5arRGluIbtgbYqW1XKdB9NXVEvb0r+JARCtbtJ/AEaW8Q5UzntFPK6
suyiBR9p4v2h9+xVvOHyyeWYpOcYjf+upbHGloEZypds06zPNMYBN3OnOF/k
OrEVFtt9ofVuvWIURfaDl6bSzGL9b7TY5DWVyo7nwGgQsTdn/qCZL3+4u4Lt
j4Fg0xyJ6Tla0USDJiF/AUvuht1bwBfFaTq94IpLILwUqqs5TxZAoYmgrku7
CBHNHX0swSLcyJHeeFAlCB1ieUsXei7FHrn09JETwZCpLpXLaCEhqC5Rsso2
BPXhl1YZZUlCQ0styiGOiZgNEnKidiuQsmp/+DVyGHwqDq8S1SfjYmN8rT0/
DGPt2SSbtxTYs96JKDqywOJRFhoxZbF02je4lB0OiXojQmRaHufbYs+PyUcg
P8XdTpivCJvI3qLHlREQPPM3zyxRAtVYZTrM5RoS22JpqU+UMfio2Fcu7Tr4
cTOKTMEGHPz7rZeVyg2kPz00IOSpBjULxUxK/Q0YSLx+vTFxC8RFT38cOhGN
P7fblae0UHGs5Ff+E9sYFK2uMdPPUscq1Rjq4bibED9hQBGy2wGm+KMNEeRY
fHc6mz6HndhkcvNqASMWs3uz1nXK6qKF5TPSXR8L0zU8A4+fulASVcui+v+D
ZobOmbTnu1H3M53a1hKHqh+sugMm+lj6JU5TPjIBlRqErb27MQq3nYszHUjA
VrdbJT6TxqAzbGZ8dROxZ9Hdz67Be8AdX15SO5wItwcT7T0pe2E9fHW31x42
AuzPXZL8borbvYFGhb/u4qPLGv3gBVYwkHVIF9gl4+lLw5d7uFYYPaK9QDwn
GWaZ7Rs/HtmPP8YuuOZsSUHascQtvY4H4HNSS1moJwVXN5+2aq45CGk37gOO
zj18S3xrpldpi8MOqdzPk+lgdPZvUDrlCKLbVuIehQNHD9W8VW8cEU4Xd7cx
4mDsmb3mGwMnPHL1oRTFcvBjiYdW7dqjIHnrsS5qZ+B9hP0K2y46noZ2HVl4
6T6cCsBO1XPB9myphbLiD2Fi8TV+6xZ3PKc+dW5Uf4i4nqubbvu4wzn/fGmQ
w0Nod0bu8ixwR1RRH+P9w4fwJRGdtJ0eGK7M6c6wzEK9v6xwncUJ3G03y9/2
dzZmtNYu2h12EkvmmE4mf3DBOPdgpM7QG7dPHqKr7eXierJiV3SMN5Ta1Jyl
vLmICGo3KBN4g5bZ4dpdzoW2Y28Q/vJBSWZcYTE1D5z6itaZowyM24yVWTTl
QXUy2GE2wxd2D+Jfnl1WgC/k8K79dD+wj4bu81hfAMufuYOnrvuhX/rPxsOa
BZDZdTa75LEffC4ZvtI7WgCxukbf0RXnEGE93rIopwA7yS9bUxrOofyH4duk
fY+wqnBoytkkAMoHJ4ZrrvNwozo1i3o8EJRgE90TqTw0JFUZCBICIZmTcl2i
mAevZGv6s+ZAfBe3oR7s56Fc+dmmfYYX8bqy+KxApxCdVGEpaZW/EKjO/PX1
QyGqtmdJx3+9hKblK1dS9YtREeIzXT0YgoCmnbg9VQKz3uMBF5exQKIWfngu
zsff5B3B5lQW0qPUI2dl+ahml4vu2M9C874NXfQ9fHQECF8+cJOFzS9XnlWO
46M9xPhI+epw9NUTGQXapaAIik/RVa7ApIpDagwsw+unNpSKwxGQ4UkJhIWf
YMLMOePL4hso6jdqeLW7Gi8Ck7P5z2NR7XVnrcNYLchnHiwJdUrCtIre8pw/
6+HBuZK9bkMqRL5lSa5VfoGgoVrhACcOtOaci2xyG3BnrRv1GS8TDWEaTXWb
XkFxoxad4pgL+ZhP3zInXoM0x53d9Skfn2b6BO3qLWiY6Tbyz+UhfbT0BelG
K9hMiueBoWKQ5O4Tg4NtCE5OerfQrBSRJws9UpTewGltxL9LORX4Tz9r0DO4
AwwpjrSCQRX8ttfyVtd0wjl48pSJag36cmuvN69/C2JZtv6aQ08x69WWpBrY
jaBqRuzX+HpsNlj0y6O0B0oKN0v0Gp7D5N76E/kyArxq0lUL2teAALljCu+d
+hDUYVkvXN4EtTG7JR2W77BQo6Z+453XWLH8s3jt93f4sdfBrF+sBWJPkriK
7PeoGz0S9cSlFac0SrsWW/QjlGm8Wmu0DVlmx1Mq/utHyNoQGYnAN5j+RJEc
ihuA8deuyMnZDhTamIjGGg9C4/T9mfjsLgSbspJ5Q4OIPp8rX23ZjfW95p1p
rA/w20Gz3vSlB7raYbHk7UN4XOyn4/pCAKc/Xn0Tbh3CEePr5Fsm7zD9Iqqf
wfwIcppTr5zxe9wWo/tZKw0j4MDH4XStfqwQFN4TqR1GtM6RWN6mASy4xLTd
6TuC+m67bYG6gxDKpHP7pUfxddw4tJT2AWcSuVHS1aMQJdE2zBwbQvnmq+JS
3p+w/HKEjfblj5AyP6MWShrDT+9KF6+EYfRsed16oWwM2eNTFpubRpB3F0qD
9HHIvDg+uHp6FEe5WlJyv8ah+Xz+a8qOIYSVyux5OIGpjL4n467jyBmWSyLt
I3Dt1KSUFHsCV++wnAVWBL49U9C7mToBN+tx5dyDBAqjXg1J3Z+AbFlZnuUh
AtKWSYUrCyZwLdqxLvI4AYe0Wf11zybgqZUwKXGBgGZuH2n/1AQUwlaaLsog
IK6neWWJJYFfOn8t63hA4OflVmaSNYGu8YGWjCwCetvHv28+TCDm0KOje/MJ
pNXe8rRyJTC3yfosq4yASFXGtoR5b09z9F3RVgIL1/wbuHfe+zh8xrW1nUBF
696jgnlP7K5jqmmdBGr+W13hP++x4FB5hgICuWdUZx/Me/jnG58zRwisMZRx
XTHviduiGX1wjMA2HZOd3HnOt59tu54g8M8//0ZZzHMb953uq5wiYBheWsCa
58SE29JjZghEkrtCFed37wp3eTl/J6C48kxz1fyuzCttq/pPAgv8w+/+7uPl
l0zPzRHYjtWjv/N/9SW6zA==
      "]]}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 1}, {0., 0.9999999591836739}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.680537679055808*^9}]
}, Open  ]],

Cell[TextData[{
 "In this case the single linear \[OpenCurlyQuote]DotPlusLayer\
\[CloseCurlyQuote] is not going to be able to adequately model the function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"y", "=", 
    SuperscriptBox["x", "2"]}], TraditionalForm]]],
 ". Simply because there is nothing to make it nonlinear. But let\
\[CloseCurlyQuote]s try it anyway:"
}], "Text",
 CellChangeTimes->{{3.6804572575992517`*^9, 3.680457333424203*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetChain", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"DotPlusLayer", "[", "1", "]"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"\"\<Input\>\"", "\[Rule]", "\"\<Scalar\>\""}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellChangeTimes->{{3.6803580407480574`*^9, 3.680358081136017*^9}, 
   3.680358318545034*^9, {3.680358450833645*^9, 3.680358454922589*^9}, {
   3.680358520949281*^9, 3.6803585273934994`*^9}, {3.680450694661951*^9, 
   3.680450695821642*^9}, 3.680450816894287*^9, {3.680534785502366*^9, 
   3.680534798525943*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"encoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Inputs", "Input"}, 
             "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 1}], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[1, {1}]]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "1", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`EncodedType[
             NetEncoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Output" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{344., {30., 39.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.6805347992490587`*^9, 3.6805376925052032`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetInitialize", "[", "net", "]"}]}]], "Input",
 CellChangeTimes->{{3.680358433289722*^9, 3.6803584364737926`*^9}, 
   3.6804508183659563`*^9, 3.680534803582551*^9}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"encoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Inputs", "Input"}, 
             "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 1}], "Biases" -> 
               NeuralNetworks`TensorT[1, {1}]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "1", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`EncodedType[
             NetEncoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Output" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{344., {30., 39.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.680534804171402*^9, 3.680537699220723*^9}]
}, Open  ]],

Cell[TextData[{
 "Here use ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["x", "2"], TraditionalForm]],
  FormatType->"TraditionalForm"],
 " for the training data:"
}], "Text",
 CellChangeTimes->{{3.680457342544424*^9, 3.680457355040625*^9}, {
  3.680537707691684*^9, 3.6805377105483246`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"x", "\[Rule]", 
      RowBox[{"x", "^", "2"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"RandomReal", "[", 
        RowBox[{"1", ",", "10000"}], "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.680358323212538*^9, 3.6803584031626587`*^9}, {
   3.68035846091537*^9, 3.68035846465798*^9}, {3.680358535081916*^9, 
   3.6803585378656015`*^9}, 3.6804507086856833`*^9, {3.6804509096300173`*^9, 
   3.6804509097505503`*^9}, {3.680450994789851*^9, 3.680450996390175*^9}, {
   3.6804510501735764`*^9, 3.68045105076607*^9}}],

Cell["And let\[CloseCurlyQuote]s take a look at a random sample:", "Text",
 CellChangeTimes->{{3.6804573609603834`*^9, 3.68045737288091*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomSample", "[", 
   RowBox[{"data", ",", "5"}], "]"}], "//", "Column"}]], "Input",
 CellChangeTimes->{{3.6804573739768114`*^9, 3.6804573801168165`*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{"0.3047465866679355`", "\[Rule]", "0.09287048208575754`"}]},
    {
     RowBox[{"0.2420800873747988`", "\[Rule]", "0.05860276870339022`"}]},
    {
     RowBox[{"0.8589546446725058`", "\[Rule]", "0.7378030816044707`"}]},
    {
     RowBox[{"0.5398737693790829`", "\[Rule]", "0.2914636868635792`"}]},
    {
     RowBox[{"0.959050732112473`", "\[Rule]", "0.9197783067654706`"}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{3.6804573805930557`*^9, 3.6805348104694343`*^9, 
  3.680537717690073*^9}]
}, Open  ]],

Cell["\<\
Train the data and hope for the best, even though this probably won\
\[CloseCurlyQuote]t work:\
\>", "Text",
 CellChangeTimes->{{3.6804573855207615`*^9, 3.6804573966969304`*^9}, {
  3.6804574304015894`*^9, 3.6804574560336647`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"result", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", "data"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6803583683570848`*^9, 3.6803583753528333`*^9}, 
   3.680358427497135*^9, 3.6804508205499535`*^9, 3.680534814318162*^9}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"encoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Inputs", "Input"}, 
             "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 1}], "Biases" -> 
               NeuralNetworks`TensorT[1, {1}]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "1", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`EncodedType[
             NetEncoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Output" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{344., {30., 39.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.6805348212466354`*^9, {3.680537742948181*^9, 3.6805377568076596`*^9}}]
}, Open  ]],

Cell["And check the results:", "Text",
 CellChangeTimes->{{3.680457470145887*^9, 3.680457473170123*^9}, 
   3.6805348234936423`*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"x", "^", "2"}], ",", 
     RowBox[{"result", "[", "x", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6803583789252787`*^9, 3.6803584162012367`*^9}, {
   3.6803584735966024`*^9, 3.6803584917210913`*^9}, {3.680358552786993*^9, 
   3.6803585569379997`*^9}, {3.6804507381376443`*^9, 3.6804507479426928`*^9}, 
   3.680450929230296*^9, {3.680451013709833*^9, 3.6804510138222623`*^9}, 
   3.680451076397651*^9, {3.68053485716147*^9, 3.680534860983384*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1:eJwVlWk01AsYxm2VVBNaNBNX2UppUtlS5rGVLSpbiSayJHUZJUo3jIxSRF2X
MIUYJcugQcaSLVpQthBGISH8c+OqVK4+vOc55znP7/f1XX/cx9pdREhI6M78
/U5z9+HmyhE72pT1zNZJkYrdYkYURh9ZAxEGed6d+hdoO5Jvsx+RjfFU/f4B
L/0E2qCsEjNAxQr+Rbz9Vp7ZNIvGjoI7ZFto5/8w2KFfQlOKlOPMyTtgxQlT
X3l+De2HuWu8iwodwg4vxZQ9G2ijYW21LnEu0Iiv2bLKrpV2yG2m/BbZDZwv
5XwZ/S5arRGluIbtgbYqW1XKdB9NXVEvb0r+JARCtbtJ/AEaW8Q5UzntFPK6
suyiBR9p4v2h9+xVvOHyyeWYpOcYjf+upbHGloEZypds06zPNMYBN3OnOF/k
OrEVFtt9ofVuvWIURfaDl6bSzGL9b7TY5DWVyo7nwGgQsTdn/qCZL3+4u4Lt
j4Fg0xyJ6Tla0USDJiF/AUvuht1bwBfFaTq94IpLILwUqqs5TxZAoYmgrku7
CBHNHX0swSLcyJHeeFAlCB1ieUsXei7FHrn09JETwZCpLpXLaCEhqC5Rsso2
BPXhl1YZZUlCQ0styiGOiZgNEnKidiuQsmp/+DVyGHwqDq8S1SfjYmN8rT0/
DGPt2SSbtxTYs96JKDqywOJRFhoxZbF02je4lB0OiXojQmRaHufbYs+PyUcg
P8XdTpivCJvI3qLHlREQPPM3zyxRAtVYZTrM5RoS22JpqU+UMfio2Fcu7Tr4
cTOKTMEGHPz7rZeVyg2kPz00IOSpBjULxUxK/Q0YSLx+vTFxC8RFT38cOhGN
P7fblae0UHGs5Ff+E9sYFK2uMdPPUscq1Rjq4bibED9hQBGy2wGm+KMNEeRY
fHc6mz6HndhkcvNqASMWs3uz1nXK6qKF5TPSXR8L0zU8A4+fulASVcui+v+D
ZobOmbTnu1H3M53a1hKHqh+sugMm+lj6JU5TPjIBlRqErb27MQq3nYszHUjA
VrdbJT6TxqAzbGZ8dROxZ9Hdz67Be8AdX15SO5wItwcT7T0pe2E9fHW31x42
AuzPXZL8borbvYFGhb/u4qPLGv3gBVYwkHVIF9gl4+lLw5d7uFYYPaK9QDwn
GWaZ7Rs/HtmPP8YuuOZsSUHascQtvY4H4HNSS1moJwVXN5+2aq45CGk37gOO
zj18S3xrpldpi8MOqdzPk+lgdPZvUDrlCKLbVuIehQNHD9W8VW8cEU4Xd7cx
4mDsmb3mGwMnPHL1oRTFcvBjiYdW7dqjIHnrsS5qZ+B9hP0K2y46noZ2HVl4
6T6cCsBO1XPB9myphbLiD2Fi8TV+6xZ3PKc+dW5Uf4i4nqubbvu4wzn/fGmQ
w0Nod0bu8ixwR1RRH+P9w4fwJRGdtJ0eGK7M6c6wzEK9v6xwncUJ3G03y9/2
dzZmtNYu2h12EkvmmE4mf3DBOPdgpM7QG7dPHqKr7eXierJiV3SMN5Ta1Jyl
vLmICGo3KBN4g5bZ4dpdzoW2Y28Q/vJBSWZcYTE1D5z6itaZowyM24yVWTTl
QXUy2GE2wxd2D+Jfnl1WgC/k8K79dD+wj4bu81hfAMufuYOnrvuhX/rPxsOa
BZDZdTa75LEffC4ZvtI7WgCxukbf0RXnEGE93rIopwA7yS9bUxrOofyH4duk
fY+wqnBoytkkAMoHJ4ZrrvNwozo1i3o8EJRgE90TqTw0JFUZCBICIZmTcl2i
mAevZGv6s+ZAfBe3oR7s56Fc+dmmfYYX8bqy+KxApxCdVGEpaZW/EKjO/PX1
QyGqtmdJx3+9hKblK1dS9YtREeIzXT0YgoCmnbg9VQKz3uMBF5exQKIWfngu
zsff5B3B5lQW0qPUI2dl+ahml4vu2M9C874NXfQ9fHQECF8+cJOFzS9XnlWO
46M9xPhI+epw9NUTGQXapaAIik/RVa7ApIpDagwsw+unNpSKwxGQ4UkJhIWf
YMLMOePL4hso6jdqeLW7Gi8Ck7P5z2NR7XVnrcNYLchnHiwJdUrCtIre8pw/
6+HBuZK9bkMqRL5lSa5VfoGgoVrhACcOtOaci2xyG3BnrRv1GS8TDWEaTXWb
XkFxoxad4pgL+ZhP3zInXoM0x53d9Skfn2b6BO3qLWiY6Tbyz+UhfbT0BelG
K9hMiueBoWKQ5O4Tg4NtCE5OerfQrBSRJws9UpTewGltxL9LORX4Tz9r0DO4
AwwpjrSCQRX8ttfyVtd0wjl48pSJag36cmuvN69/C2JZtv6aQ08x69WWpBrY
jaBqRuzX+HpsNlj0y6O0B0oKN0v0Gp7D5N76E/kyArxq0lUL2teAALljCu+d
+hDUYVkvXN4EtTG7JR2W77BQo6Z+453XWLH8s3jt93f4sdfBrF+sBWJPkriK
7PeoGz0S9cSlFac0SrsWW/QjlGm8Wmu0DVlmx1Mq/utHyNoQGYnAN5j+RJEc
ihuA8deuyMnZDhTamIjGGg9C4/T9mfjsLgSbspJ5Q4OIPp8rX23ZjfW95p1p
rA/w20Gz3vSlB7raYbHk7UN4XOyn4/pCAKc/Xn0Tbh3CEePr5Fsm7zD9Iqqf
wfwIcppTr5zxe9wWo/tZKw0j4MDH4XStfqwQFN4TqR1GtM6RWN6mASy4xLTd
6TuC+m67bYG6gxDKpHP7pUfxddw4tJT2AWcSuVHS1aMQJdE2zBwbQvnmq+JS
3p+w/HKEjfblj5AyP6MWShrDT+9KF6+EYfRsed16oWwM2eNTFpubRpB3F0qD
9HHIvDg+uHp6FEe5WlJyv8ah+Xz+a8qOIYSVyux5OIGpjL4n467jyBmWSyLt
I3Dt1KSUFHsCV++wnAVWBL49U9C7mToBN+tx5dyDBAqjXg1J3Z+AbFlZnuUh
AtKWSYUrCyZwLdqxLvI4AYe0Wf11zybgqZUwKXGBgGZuH2n/1AQUwlaaLsog
IK6neWWJJYFfOn8t63hA4OflVmaSNYGu8YGWjCwCetvHv28+TCDm0KOje/MJ
pNXe8rRyJTC3yfosq4yASFXGtoR5b09z9F3RVgIL1/wbuHfe+zh8xrW1nUBF
696jgnlP7K5jqmmdBGr+W13hP++x4FB5hgICuWdUZx/Me/jnG58zRwisMZRx
XTHviduiGX1wjMA2HZOd3HnOt59tu54g8M8//0ZZzHMb953uq5wiYBheWsCa
58SE29JjZghEkrtCFed37wp3eTl/J6C48kxz1fyuzCttq/pPAgv8w+/+7uPl
l0zPzRHYjtWjv/N/9SW6zA==
      "]]}, 
    {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1:eJwlzw1Qy3Ecx/FJzkMZleNIsimXxzwk0XXfeUgo7iS681DdkOSxdKc89aDR
oQd0kZJUHrKz5WxIky67Ooketqwy21pr9f+txLG6UNO+v939b/e69+f///3/
HP7J4EM2LBYLRi/rf/mei9rfv+RW4s8832/Ks+O1aK74FtgMCac6u9dZnXS+
pAS8LREvd4rqsZeVi6A+1etzzcIGNHu7BFyzTEOl3xtx3/S0HEyDWk3Lsmb0
a2EllJCKOnaGAvfT7auB7fK432BQWs0rkMrh+hFpZKHbF9z7LK+FAZ7QEJWo
wp6r/wBxK+SS6e9b8X77yHrQiuTXmjjtaH/XBvgbrcxbcPYr7o1djbBo3fiR
yAo19pXuzRBQxDn8fIbGah0/UQFnXMK5Hfu06LxqJSzu3WWn2qZDn7O0gNOU
HxPkf9BzIVQFtu/yxPPyO6yOsLvTCke9KtomBuqxV/xqA+EWfmHlALrQYctX
MJtmTTXmdOI+5ooapDsDxmZvNOBeovsGiZsF9yVGtM7C1QLn29bWYkEXfn+C
pw7Wrk7NnrnCiDa062DfnIahMQo0T3m2A8x16fpTyd3YV3no4Y5tWFywWw92
5zo9OGmkRTZydJIyqhPGXUgOWRPDYLdMGz23NEysdyRWV4mkBoi9K053rKZu
ONAFbxelTXA4YcK9nG0Eh62xi1PYvWg/kRHUSxoVCTI0y2NvN5QVgJshrA/7
7X/dsF/s7eAygma13+2BJMGDZPXT79gzNjHwrMcljx3Uj641MpB2TxCh2Y6u
uskwcDC4z120A80K62VgtkxWti2U2vyTgauZe2uu89FJ3GEGorxzf05KoP2i
EwFu6rTN4x/R53nxCIz4nJ+sekLPY20g0NbX2fxISPtHfwJZoS/2b3pOn8cP
JGBZGHxaIKP7rN0E1E2ZBWMVtJuOEXh9efCAooWe9+okgWzf8AXFrbSnxBII
fLhUsl5D758ZT+BN/KcPyQzdB1wikLNkVeaOXtodLxOI0eeHcPpp16QR8Ag6
pq36Td8vLoOA7RhlSdYg7bwbBHRS3+iIP/Q8u2wCsuhiz2XDtKtyCNx2tTNb
LLQX5RL4D1hco/Y=
      "]]}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 1}, {0, 1}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.6804509250131807`*^9, 3.6804509297789345`*^9}, 
   3.6804510142546864`*^9, 3.6804510767099495`*^9, 3.680457475235032*^9, 
   3.6805348257952766`*^9, 3.6805348620133314`*^9, 3.6805377655500126`*^9}]
}, Open  ]],

Cell["\<\
As expected the single layer neural network is only going to get a line \
(linear result): We need more layers, including at least one non-linear layer \
to approximate the quadratic function with a neural network.\
\>", "Text",
 CellChangeTimes->{{3.6804574812735825`*^9, 3.6804575522509336`*^9}, {
  3.6805348366775723`*^9, 3.680534910917691*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{958, 1028},
WindowMargins->{{-7, Automatic}, {Automatic, 0}},
Magnification:>1.5 Inherited,
FrontEndVersion->"11.0 for Microsoft Windows (64-bit) (July 28, 2016)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 130, 2, 150, "Title"],
Cell[713, 26, 121, 1, 45, "Text"],
Cell[837, 29, 259, 7, 45, "Input"],
Cell[CellGroupData[{
Cell[1121, 40, 166, 2, 106, "Section"],
Cell[CellGroupData[{
Cell[1312, 46, 380, 8, 58, "Subsubsection"],
Cell[CellGroupData[{
Cell[1717, 58, 367, 8, 45, "Input"],
Cell[2087, 68, 1628, 33, 63, "Output"]
}, Open  ]],
Cell[3730, 104, 256, 5, 74, "Text"],
Cell[CellGroupData[{
Cell[4011, 113, 802, 16, 162, "Input"],
Cell[4816, 131, 5287, 110, 124, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[10140, 246, 130, 2, 45, "Input"],
Cell[10273, 250, 14330, 301, 456, "Output"]
}, Open  ]],
Cell[24618, 554, 132, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[24775, 559, 213, 4, 45, "Input"],
Cell[24991, 565, 5174, 107, 124, "Output"]
}, Open  ]],
Cell[30180, 675, 219, 4, 45, "Text"],
Cell[CellGroupData[{
Cell[30424, 683, 239, 5, 45, "Input"],
Cell[30666, 690, 20680, 413, 101, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[51383, 1108, 223, 4, 45, "Input"],
Cell[51609, 1114, 206, 5, 45, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[51852, 1124, 226, 4, 45, "Input"],
Cell[52081, 1130, 224, 4, 45, "Output"]
}, Open  ]],
Cell[52320, 1137, 142, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[52487, 1142, 155, 3, 45, "Input"],
Cell[52645, 1147, 401, 8, 75, "Output"]
}, Open  ]],
Cell[53061, 1158, 483, 13, 45, "Input"],
Cell[53547, 1173, 230, 5, 45, "Text"],
Cell[CellGroupData[{
Cell[53802, 1182, 236, 5, 45, "Input"],
Cell[54041, 1189, 633, 18, 146, "Output"]
}, Open  ]],
Cell[54689, 1210, 137, 2, 45, "Text"],
Cell[CellGroupData[{
Cell[54851, 1216, 262, 5, 45, "Input"],
Cell[55116, 1223, 5148, 107, 124, "Output"]
}, Open  ]],
Cell[60279, 1333, 135, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[60439, 1338, 127, 2, 45, "Input"],
Cell[60569, 1342, 95, 1, 45, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[60701, 1348, 129, 2, 45, "Input"],
Cell[60833, 1352, 91, 1, 45, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[60961, 1358, 129, 2, 45, "Input"],
Cell[61093, 1362, 109, 2, 45, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[61239, 1369, 786, 19, 75, "Input"],
Cell[62028, 1390, 3162, 62, 468, "Output"]
}, Open  ]],
Cell[65205, 1455, 111, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[65341, 1460, 131, 2, 45, "Input"],
Cell[65475, 1464, 143, 2, 67, "Output"]
}, Closed]],
Cell[65633, 1469, 166, 3, 38, "Text"],
Cell[CellGroupData[{
Cell[65824, 1476, 100, 1, 45, "Input"],
Cell[65927, 1479, 5077, 106, 124, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[71041, 1590, 189, 4, 45, "Input"],
Cell[71233, 1596, 20828, 415, 101, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[92098, 2016, 170, 3, 45, "Input"],
Cell[92271, 2021, 306, 6, 45, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[92614, 2032, 171, 3, 45, "Input"],
Cell[92788, 2037, 259, 4, 45, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[93096, 2047, 359, 8, 58, "Subsubsection"],
Cell[93458, 2057, 224, 4, 74, "Text"],
Cell[CellGroupData[{
Cell[93707, 2065, 748, 15, 162, "Input"],
Cell[94458, 2082, 5122, 107, 124, "Output"]
}, Open  ]],
Cell[99595, 2192, 110, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[99730, 2197, 211, 4, 45, "Input"],
Cell[99944, 2203, 5077, 106, 124, "Output"]
}, Open  ]],
Cell[105036, 2312, 139, 1, 45, "Text"],
Cell[105178, 2315, 583, 14, 45, "Input"],
Cell[105764, 2331, 233, 5, 45, "Text"],
Cell[CellGroupData[{
Cell[106022, 2340, 189, 4, 45, "Input"],
Cell[106214, 2346, 707, 18, 146, "Output"]
}, Open  ]],
Cell[106936, 2367, 191, 4, 74, "Text"],
Cell[CellGroupData[{
Cell[107152, 2375, 262, 5, 45, "Input"],
Cell[107417, 2382, 5101, 106, 124, "Output"]
}, Open  ]],
Cell[112533, 2491, 132, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[112690, 2496, 634, 16, 45, "Input"],
Cell[113327, 2514, 2844, 57, 365, "Output"]
}, Open  ]],
Cell[116186, 2574, 225, 4, 74, "Text"],
Cell[CellGroupData[{
Cell[116436, 2582, 189, 4, 45, "Input"],
Cell[116628, 2588, 20857, 416, 101, "Output"]
}, Open  ]],
Cell[137500, 3007, 248, 5, 45, "Text"],
Cell[CellGroupData[{
Cell[137773, 3016, 170, 3, 45, "Input"],
Cell[137946, 3021, 281, 5, 45, "Output"]
}, Open  ]],
Cell[138242, 3029, 210, 4, 45, "Text"],
Cell[CellGroupData[{
Cell[138477, 3037, 171, 3, 45, "Input"],
Cell[138651, 3042, 287, 4, 45, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[138987, 3052, 435, 11, 58, "Subsubsection"],
Cell[139425, 3065, 208, 4, 74, "Text"],
Cell[CellGroupData[{
Cell[139658, 3073, 744, 15, 162, "Input"],
Cell[140405, 3090, 5122, 107, 124, "Output"]
}, Open  ]],
Cell[145542, 3200, 104, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[145671, 3205, 213, 4, 45, "Input"],
Cell[145887, 3211, 5077, 106, 124, "Output"]
}, Open  ]],
Cell[150979, 3320, 139, 1, 45, "Text"],
Cell[151121, 3323, 633, 16, 45, "Input"],
Cell[151757, 3341, 136, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[151918, 3346, 189, 4, 45, "Input"],
Cell[152110, 3352, 701, 18, 146, "Output"]
}, Open  ]],
Cell[152826, 3373, 116, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[152967, 3378, 260, 5, 45, "Input"],
Cell[153230, 3385, 5100, 106, 124, "Output"]
}, Open  ]],
Cell[158345, 3494, 132, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[158502, 3499, 682, 16, 45, "Input"],
Cell[159187, 3517, 2912, 58, 365, "Output"]
}, Open  ]],
Cell[162114, 3578, 245, 5, 74, "Text"],
Cell[CellGroupData[{
Cell[162384, 3587, 119, 3, 45, "Input"],
Cell[162506, 3592, 20706, 413, 101, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[183249, 4010, 104, 2, 45, "Input"],
Cell[183356, 4014, 230, 4, 45, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[183623, 4023, 103, 2, 45, "Input"],
Cell[183729, 4027, 182, 3, 45, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[183960, 4036, 471, 11, 58, "Subsubsection"],
Cell[CellGroupData[{
Cell[184456, 4051, 233, 6, 45, "Input"],
Cell[184692, 4059, 4784, 92, 353, "Output"]
}, Open  ]],
Cell[189491, 4154, 441, 10, 104, "Text"],
Cell[CellGroupData[{
Cell[189957, 4168, 720, 15, 162, "Input"],
Cell[190680, 4185, 5146, 107, 124, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[195863, 4297, 211, 4, 45, "Input"],
Cell[196077, 4303, 5099, 106, 124, "Output"]
}, Open  ]],
Cell[201191, 4412, 293, 9, 47, "Text"],
Cell[201487, 4423, 661, 16, 45, "Input"],
Cell[202151, 4441, 141, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[202317, 4446, 191, 4, 45, "Input"],
Cell[202511, 4452, 702, 18, 146, "Output"]
}, Open  ]],
Cell[203228, 4473, 241, 5, 45, "Text"],
Cell[CellGroupData[{
Cell[203494, 4482, 260, 5, 45, "Input"],
Cell[203757, 4489, 5130, 107, 124, "Output"]
}, Open  ]],
Cell[208902, 4599, 132, 2, 45, "Text"],
Cell[CellGroupData[{
Cell[209059, 4605, 830, 20, 45, "Input"],
Cell[209892, 4627, 6119, 112, 365, "Output"]
}, Open  ]],
Cell[216026, 4742, 359, 6, 102, "Text"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

