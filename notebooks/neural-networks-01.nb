(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1034347,      19678]
NotebookOptionsPosition[   1019356,      19204]
NotebookOutlinePosition[   1019728,      19220]
CellTagsIndexPosition[   1019685,      19217]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Neural Networks", "Title",
 CellChangeTimes->{{3.6804505372055655`*^9, 3.680450539773773*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"SetOptions", "[", 
   RowBox[{"NetTrain", ",", 
    RowBox[{"TargetDevice", "\[Rule]", "\"\<GPU\>\""}]}], "]"}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.680450832737338*^9, 3.680450847613676*^9}}],

Cell[CellGroupData[{

Cell["Single Layer Neural Networks", "Subsection",
 CellChangeTimes->{{3.6804505426775184`*^9, 3.680450569773883*^9}, 
   3.6804564977746*^9}],

Cell[CellGroupData[{

Cell["Learning \[OpenCurlyDoubleQuote]y=0\[CloseCurlyDoubleQuote]", \
"Subsubsection",
 CellChangeTimes->{{3.6804507867252703`*^9, 3.680450797133446*^9}, {
  3.6804509791092367`*^9, 3.680450979173298*^9}}],

Cell["\<\
Define a single layer neural network, with a single (scalar) input and a \
single (scalar) output:\
\>", "Text",
 CellChangeTimes->{{3.680456458693856*^9, 3.6804564949900727`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{"{", 
    RowBox[{"DotPlusLayer", "[", 
     RowBox[{"1", ",", 
      RowBox[{"\"\<Input\>\"", "\[Rule]", "\"\<Scalar\>\""}], ",", 
      RowBox[{"\"\<Output\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], "]"}], "}"}],
    "]"}]}]], "Input",
 CellChangeTimes->{{3.6803580407480574`*^9, 3.680358081136017*^9}, 
   3.680358318545034*^9, {3.680358450833645*^9, 3.680358454922589*^9}, {
   3.680358520949281*^9, 3.6803585273934994`*^9}, {3.680450694661951*^9, 
   3.680450695821642*^9}, 3.680450816894287*^9, 3.6804565235670967`*^9}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"encoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Inputs", "Input"}, 
             "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 1}], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[1, {1}]]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "1", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`EncodedType[
             NetEncoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Output" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{299., {26., 34.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.68045652418118*^9}]
}, Closed]],

Cell["Initialize the neural network with random values", "Text",
 CellChangeTimes->{{3.680456506230349*^9, 3.6804565183108463`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetInitialize", "[", "net", "]"}]}]], "Input",
 CellChangeTimes->{{3.680358433289722*^9, 3.6803584364737926`*^9}, 
   3.6804508183659563`*^9, 3.6804565267914157`*^9}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"encoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Inputs", "Input"}, 
             "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 1}], "Biases" -> 
               NeuralNetworks`TensorT[1, {1}]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "1", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`EncodedType[
             NetEncoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Output" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{299., {26., 34.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.6804565273566*^9}]
}, Closed]],

Cell["Take a look at the layer, as it is right now:", "Text",
 CellChangeTimes->{{3.680456533750704*^9, 3.6804565436224594`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"layer", "=", 
   RowBox[{"NetExtract", "[", 
    RowBox[{"net", ",", "1"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"{", 
  RowBox[{
   RowBox[{"NetExtract", "[", 
    RowBox[{"layer", ",", "\"\<Weights\>\""}], "]"}], ",", 
   RowBox[{"NetExtract", "[", 
    RowBox[{"layer", ",", "\"\<Biases\>\""}], "]"}]}], "}"}]}], "Input",
 CellChangeTimes->{{3.6804565454386578`*^9, 3.6804565865283566`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{"-", "0.083152174949646`"}], "}"}], "}"}], ",", 
   RowBox[{"{", "0.`", "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.680456556170534*^9, 3.680456587239055*^9}}]
}, Closed]],

Cell["Generate some random test data, all of the form x\[Rule]0:", "Text",
 CellChangeTimes->{{3.680456589806814*^9, 3.6804566102717667`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"x", "\[Rule]", "0"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"RandomReal", "[", 
        RowBox[{"1", ",", "10000"}], "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.680358323212538*^9, 3.6803584031626587`*^9}, {
   3.68035846091537*^9, 3.68035846465798*^9}, {3.680358535081916*^9, 
   3.6803585378656015`*^9}, 3.6804507086856833`*^9}],

Cell["Look at a few entries in the test data:", "Text",
 CellChangeTimes->{{3.6804566256315656`*^9, 3.6804566344882975`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomSample", "[", 
  RowBox[{"data", ",", "5"}], "]"}]], "Input",
 CellChangeTimes->{{3.680456616768426*^9, 3.680456621992693*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"0.32098455917988367`", "\[Rule]", "0"}], ",", 
   RowBox[{"0.5115069028558474`", "\[Rule]", "0"}], ",", 
   RowBox[{"0.11905182899108513`", "\[Rule]", "0"}], ",", 
   RowBox[{"0.13445881043171748`", "\[Rule]", "0"}], ",", 
   RowBox[{"0.1916482962303545`", "\[Rule]", "0"}]}], "}"}]], "Output",
 CellChangeTimes->{3.680456635839094*^9}]
}, Closed]],

Cell["Learn from the test data", "Text",
 CellChangeTimes->{{3.680456643167961*^9, 3.6804566505841312`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"result", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", "data"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6803583683570848`*^9, 3.6803583753528333`*^9}, 
   3.680358427497135*^9, 3.6804508205499535`*^9, 3.6804566533765073`*^9}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"encoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Inputs", "Input"}, 
             "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 1}], "Biases" -> 
               NeuralNetworks`TensorT[1, {1}]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "1", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`EncodedType[
             NetEncoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Output" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{299., {26., 34.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.680456660139127*^9}]
}, Closed]],

Cell["As expected, result[x] is now always returning 0:", "Text",
 CellChangeTimes->{{3.6804566796167183`*^9, 3.6804566966086664`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"result", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6803583789252787`*^9, 3.6803584162012367`*^9}, {
  3.6803584735966024`*^9, 3.6803584917210913`*^9}, {3.680358552786993*^9, 
  3.6803585569379997`*^9}, {3.6804507381376443`*^9, 3.6804507479426928`*^9}, {
  3.6804566749383917`*^9, 3.6804566767530994`*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1:eJwl0ntQVGUYBvAFt5GkuKhFiy62CiVe0iHEFPugYES51IAYEIjELYRKQYro
MrLKgikINWAUoKsQZTuyELuIsrwgbKgbt70dLrsut424ozOshE4Q+35/nDnn
N9/zvO+cM4cXezIkwZLFYgWtXOa7f8K4smXiKFl5FEpP6wjbx/HUIMfda8Ws
uyd15M2rJWV1HF+zYzpSdCSgs/ePck6o2a+OxulIWPxC0w+ceLOz7EJ15OGu
XJ98TjrmU9x1RPjS+zkXONmY55kGCN+q7vXvOEWYz/tigIRHXBM/elyJ+16J
7yfWy/woPycxnqvj+ohL8Ox420WJ2UPFSb0ko2ufV8n8bfQL4QxxkNgbLCya
sS+J0JL6EZ+O7gOtZgttD2pIa3L5hohpudneaXvVxPTa27Y3P71ndgvbU0Us
F0V2G1wU2A90VRKP5Zj6I9UdmG9z7SEd2e5d7du6cd/Z6C6yqXBq8cZsD77f
OOkgUwuDBu1uFfarfRSkcrJRYXNJjXk99z6x4f46ZzRq8H04lu0k74Q0UejM
4Pz6NXLyxFtkTDrTi5aN3yXpbnLJy219OM+XaSaD1fKLSt4AelTQSJ4la0pd
v9Khyw/fItvfWb2U2KhHO3xQR/yu8z6udTCg7ztWkwzu8c3DUYPoYccqsmP6
qHVv0BA6MaeMrLN9ZCV/Si1k5xJ2c6l4S9kw2urrVEhxb+x/PmAEfamoGESH
Y4XwhNp0oAJMU452Y5dH0VucRCA94reqyNeI1mpq4cwhwVXJGHW/Ugq8h/59
FYK/0a13bsP+vdlFHLcxdN+/TRDl1L1ooaZ2WGgBkyJ/5BT/H/x+4RvboIQd
nR7iPI7ez/0T1hmk1y3laJbN+nvw3Lf80H2pE+jMPQ+AdSNaPLJ2En3O7S9I
+1mcv7YVneX8YSc0bT9vZf/ZFJ43ZHSDvX/ajrM20/h/fN7QA/qdPepMGZoV
qVBCzRUvZ2P0DNpOoYJjYg977hLaG+RqyBJc4+t/n8X+LY0Gbo5zS20C5/Cc
r9LC+XJBjOE9dNYso4X4kBmX6mDqSJ0WNspkNUFhNO9h1MKFgsj2vFh0y6RJ
C0kePz1ek0kdymFgc/b6Q6ur0KytMQwsvfXNi72/URfHM9A/M6qqEtH5licY
KAyrO3awlvb1qQwsbws5LZBRf3+OAb2y4MoqNd3/rIqBhpyFOLWW9pNEDBR5
Hnet6KN5rZiBgF/ekLxroPmaBgbufNn5gD9B9ycoGLi8c09B8DS1qouB1JGy
UN4cneelZmBr4CeDLfN0HkfPANtCU1m4QPO5QwwMST2TY57S+fNGBmTJFbt2
/0f7H00w8OMma9PyMu13zTDwP6bvCDo=
      "]]}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->{497., Automatic},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 1}, {-1, 1}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.6803583844536123`*^9, 3.6803584165055304`*^9}, {
   3.680358477844705*^9, 3.6803584921484995`*^9}, {3.6803585457131696`*^9, 
   3.680358557266316*^9}, {3.680450718778447*^9, 3.6804507484972744`*^9}, {
   3.6804508537378654`*^9, 3.680450879431159*^9}, 3.6804566671964655`*^9, 
   3.680456702499284*^9}]
}, Closed]],

Cell["Or something close to zero:", "Text",
 CellChangeTimes->{{3.680456711360964*^9, 3.6804567167528353`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"result", "[", "0.4", "]"}]], "Input",
 CellChangeTimes->{{3.6804567046491055`*^9, 3.6804567074013824`*^9}}],

Cell[BoxData["1.7403649508196395`*^-6"], "Output",
 CellChangeTimes->{3.680456707795187*^9}]
}, Closed]],

Cell["\<\
The weights and biases should also be zero in this simplest possible case:\
\>", "Text",
 CellChangeTimes->{{3.680456732713106*^9, 3.6804567492171936`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"layer", "=", 
  RowBox[{"NetExtract", "[", 
   RowBox[{"result", ",", "1"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6803588173681602`*^9, 3.6803588579327717`*^9}}],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["DotPlusLayer", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open$$ = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Arrays:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Weights\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"matrix\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Biases\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Ports:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic], BaselinePosition -> 
        Baseline], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("None"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.6803588194134603`*^9, {3.680358852127247*^9, 3.680358858232108*^9}, 
   3.680450770458625*^9, 3.680450884427509*^9, 3.6804567505639763`*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetExtract", "[", 
  RowBox[{"layer", ",", "\"\<Weights\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.680358859064044*^9, 3.680358865869697*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"-", "0.000012011749277007766`"}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.6803588661890554`*^9, 3.6804507725301237`*^9, 
  3.6804508853219275`*^9, 3.6804567513886085`*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetExtract", "[", 
  RowBox[{"layer", ",", "\"\<Biases\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.680358859064044*^9, 3.6803588746555767`*^9}}],

Cell[BoxData[
 RowBox[{"{", "6.5450649344711564`*^-6", "}"}]], "Output",
 CellChangeTimes->{3.6803588750600305`*^9, 3.6804507739786596`*^9, 
  3.6804508861564054`*^9, 3.680456752487939*^9}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Learning \[OpenCurlyDoubleQuote]y=x\[CloseCurlyDoubleQuote]", \
"Subsubsection",
 CellChangeTimes->{{3.6804507867252703`*^9, 3.6804508078216476`*^9}, {
  3.6804509740052004`*^9, 3.6804509751492233`*^9}}],

Cell["\<\
Slightly more complicated: train a single layer neural network on the \
relationship y=x. First set up the neural network as before:\
\>", "Text",
 CellChangeTimes->{{3.6804567626729527`*^9, 3.680456803762041*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetChain", "[", 
    RowBox[{"{", 
     RowBox[{"DotPlusLayer", "[", 
      RowBox[{"1", ",", 
       RowBox[{"\"\<Input\>\"", "\[Rule]", "\"\<Scalar\>\""}], ",", 
       RowBox[{"\"\<Output\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], "]"}], 
     "}"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6803580407480574`*^9, 3.680358081136017*^9}, 
   3.680358318545034*^9, {3.680358450833645*^9, 3.680358454922589*^9}, {
   3.680358520949281*^9, 3.6803585273934994`*^9}, {3.680450694661951*^9, 
   3.680450695821642*^9}, 3.680450816894287*^9}],

Cell["And initialize it again:", "Text",
 CellChangeTimes->{{3.6804568070816936`*^9, 3.6804568146183376`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetInitialize", "[", "net", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.680358433289722*^9, 3.6803584364737926`*^9}, 
   3.6804508183659563`*^9}],

Cell["Define the training data, here the rule is x\[Rule]x:", "Text",
 CellChangeTimes->{{3.6804568222098846`*^9, 3.6804568415306864`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"x", "\[Rule]", "x"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"RandomReal", "[", 
        RowBox[{"1", ",", "10000"}], "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.680358323212538*^9, 3.6803584031626587`*^9}, {
   3.68035846091537*^9, 3.68035846465798*^9}, {3.680358535081916*^9, 
   3.6803585378656015`*^9}, 3.6804507086856833`*^9, {3.6804509096300173`*^9, 
   3.6804509097505503`*^9}}],

Cell["Here is a sample of the training data:", "Text",
 CellChangeTimes->{{3.6804568650986795`*^9, 3.6804568700027847`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomSample", "[", 
   RowBox[{"data", ",", "5"}], "]"}], "//", "Column"}]], "Input",
 CellChangeTimes->{{3.6804568715719194`*^9, 3.680456877474792*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{"0.4248527623250835`", "\[Rule]", "0.4248527623250835`"}]},
    {
     RowBox[{"0.03969144742951136`", "\[Rule]", "0.03969144742951136`"}]},
    {
     RowBox[{"0.46850786807770906`", "\[Rule]", "0.46850786807770906`"}]},
    {
     RowBox[{"0.8276399002336299`", "\[Rule]", "0.8276399002336299`"}]},
    {
     RowBox[{"0.00952727966920075`", "\[Rule]", "0.00952727966920075`"}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{3.6804568781863613`*^9}]
}, Closed]],

Cell["\<\
And train the neural network with the training data, the loss function goes \
to zero very quickly:\
\>", "Text",
 CellChangeTimes->{{3.6804568524983177`*^9, 3.680456902659047*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"result", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{"net", ",", "data"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6803583683570848`*^9, 3.6803583753528333`*^9}, 
   3.680358427497135*^9, 3.6804508205499535`*^9}],

Cell["Plot the result, using the the trained function:", "Text",
 CellChangeTimes->{{3.680456915651329*^9, 3.6804569349792037`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"result", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6803583789252787`*^9, 3.6803584162012367`*^9}, {
   3.6803584735966024`*^9, 3.6803584917210913`*^9}, {3.680358552786993*^9, 
   3.6803585569379997`*^9}, {3.6804507381376443`*^9, 3.6804507479426928`*^9}, 
   3.680450929230296*^9}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1:eJwlkX9MU1cUxwviZCNWUDdSGUoZMESYqIxN3ThsmMFAtoAwJAPssDjtREBJ
RDMDXaiCyCBLw9goUgs4lUBhFKMDB0KjkaBAWy0gtLVWVij0SsKPVIXu9rw/
Xj7vk+85957zHjczJzHLmcVixdPHwdgs83DPVHIEfWV56T3BJWpTrp4TBlQj
s933wK66akk7Z5/De0o3RkPcQ+3ftZwkh/tUVyVDCn/pzm8cPtbXafkwsf1C
VDkn3+EG34J8kL777fmLnGKHS/kxxSB0bf+wlCN2eJEoVAwHU6/IX841YD7/
pgHc7MK06M1yh/NGA+Xgn2A195Up8DxNpQJOP9oN1fO3sf647TZ4Kjx0Tk7d
6LWru+GmMWpg8LNeh7PsEb3QK6j1Sp1R4nwCqxIWAj5f15x9H+eX5dwHZ1uT
u5d/P+43F9AP4XbezQMtA9jPbh2AgeKwR/eCBrE+K3gQtlRabNetQ5gLyBBY
lvS6x6EqnO/CDhU0THf2s39V4/xtlGzvv4jJpMF9C15o4NKxjiNSvyfYH+D/
BBYjm0xHC7VYr6fM36lUvNc3gnkhpb5FWTbMHcM8yHcMXgs0NVvPPsXzTlFu
+2LNypHOcZxfRhkt4/7Y5qnDeSYoT3sf8n2Wpsd+O2XwTLKbNt6A++gpN6x7
6ap8hV7koEt3jfwDyTPMvSl/CuscfTvOiN/3dawRmr7OlP67iG64Rrlg2eQ+
WfUcz39A2XEgepV4nwnrcygLY0R1ikl0n1JK7kTsSL3oBd6XR7nnk2IxZ+ck
1ut3TELa5kGbkxqddVc1CQv95cZc4X/4/wIpq10y8hP9zLivM+UGXYfMWYlu
aOozw+pzwqTdeVPY/zSX8nqG3Lh+GvvPUZ78U16+vhed13h3Gu5sK3H1OGFB
l2RbwCP2ZPAv7Bmc7y3K8ZAh9ZkudOli5wy0XgY/U8Ys3p9KmS4P9/BeYbxs
eRaKRFeE4zesWB9F2Wz2rmHvJ+gn4giU1Ip4um/QIyMo+Ymz/i0J6Ia1lO93
dbXGpzB583cELlZ8f+9SJnqP5QcCR8P/mHvnDDrrWAEB3+KNMWuuovMONxJY
+fTntdprTL6LcnT2uepqE9PvTFmZ0p7+VRuTy1oJ2IMST4m6mPkMnQTGhysu
r1Iz9ekqArfOLx1WP2bOD6EU7z20tX6E6V/WEohr/EjxpY7JJRME/il4+EA4
xewzZiZQFfJxRcIMetENC4E8oySJS5j9zloJBO4/ru+ZZ3IOpYuTpqFyCd1n
apGAoWOvgPeKmeeWjUCXoH576DJzX8kbAr9vcVuw25n6g5T/A4JeBhg=
      "]]}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 1}, {0, 1}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.6804509250131807`*^9, 3.6804509297789345`*^9}, 
   3.6804569370724583`*^9}]
}, Closed]],

Cell["\<\
In this case the weight should be 1 (also the slope of this function) and the \
bias should be 0 (also the intercept of this function):\
\>", "Text",
 CellChangeTimes->{{3.680456950235668*^9, 3.680456980451868*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"layer", "=", 
  RowBox[{"NetExtract", "[", 
   RowBox[{"result", ",", "1"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6803588173681602`*^9, 3.6803588579327717`*^9}}],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["DotPlusLayer", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open$$ = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Arrays:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Weights\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"matrix\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Biases\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Ports:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic], BaselinePosition -> 
        Baseline], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("None"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.6803588194134603`*^9, {3.680358852127247*^9, 3.680358858232108*^9}, 
   3.680450770458625*^9, 3.680450884427509*^9, 3.6804567505639763`*^9, {
   3.6804569957781506`*^9, 3.6804570098932743`*^9}}]
}, Closed]],

Cell["", "Text"],

Cell["Here the weight is indeed close to 1:", "Text",
 CellChangeTimes->{{3.680457013436302*^9, 3.680457022268735*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetExtract", "[", 
  RowBox[{"layer", ",", "\"\<Weights\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.680358859064044*^9, 3.680358865869697*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", "0.9998289346694946`", "}"}], "}"}]], "Output",
 CellChangeTimes->{3.6803588661890554`*^9, 3.6804507725301237`*^9, 
  3.6804508853219275`*^9, 3.6804567513886085`*^9, 3.680456997193976*^9}]
}, Closed]],

Cell["And the bias is close to 0:", "Text",
 CellChangeTimes->{{3.6804570262683797`*^9, 3.680457033044355*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetExtract", "[", 
  RowBox[{"layer", ",", "\"\<Biases\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.680358859064044*^9, 3.6803588746555767`*^9}}],

Cell[BoxData[
 RowBox[{"{", "0.00009104216587729752`", "}"}]], "Output",
 CellChangeTimes->{3.6803588750600305`*^9, 3.6804507739786596`*^9, 
  3.6804508861564054`*^9, 3.680456752487939*^9, 3.6804569987589293`*^9}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Learning \[OpenCurlyDoubleQuote]y=2x+1\[CloseCurlyDoubleQuote]", \
"Subsubsection",
 CellChangeTimes->{{3.6804507867252703`*^9, 3.6804508078216476`*^9}, {
  3.680450965765478*^9, 3.6804509705495915`*^9}}],

Cell["\<\
One more linear example, in the most general sense: y=a*x+b (here a is 2 and \
b is 1). Set up the same network again:\
\>", "Text",
 CellChangeTimes->{{3.680457044388588*^9, 3.680457077037274*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetChain", "[", 
    RowBox[{"{", 
     RowBox[{"DotPlusLayer", "[", 
      RowBox[{"1", ",", 
       RowBox[{"\"\<Input\>\"", "\[Rule]", "\"\<Scalar\>\""}], ",", 
       RowBox[{"\"\<Output\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], "]"}], 
     "}"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6803580407480574`*^9, 3.680358081136017*^9}, 
   3.680358318545034*^9, {3.680358450833645*^9, 3.680358454922589*^9}, {
   3.680358520949281*^9, 3.6803585273934994`*^9}, {3.680450694661951*^9, 
   3.680450695821642*^9}, 3.680450816894287*^9}],

Cell["And initialize it:", "Text",
 CellChangeTimes->{{3.6804570820289125`*^9, 3.6804570845974197`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetInitialize", "[", "net", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.680358433289722*^9, 3.6803584364737926`*^9}, 
   3.6804508183659563`*^9}],

Cell["And prepare the test data for the neural network again:", "Text",
 CellChangeTimes->{{3.680457089309304*^9, 3.6804571101575756`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"x", "\[Rule]", 
      RowBox[{
       RowBox[{"2", "x"}], "+", "1"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"RandomReal", "[", 
        RowBox[{"1", ",", "10000"}], "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.680358323212538*^9, 3.6803584031626587`*^9}, {
   3.68035846091537*^9, 3.68035846465798*^9}, {3.680358535081916*^9, 
   3.6803585378656015`*^9}, 3.6804507086856833`*^9, {3.6804509096300173`*^9, 
   3.6804509097505503`*^9}, {3.680450994789851*^9, 3.680450996390175*^9}}],

Cell["Let\[CloseCurlyQuote]s take a look at the test data:", "Text",
 CellChangeTimes->{{3.6804571252616816`*^9, 3.680457133270008*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomSample", "[", 
   RowBox[{"data", ",", "5"}], "]"}], "//", "Column"}]], "Input",
 CellChangeTimes->{{3.680457135106247*^9, 3.6804571494301367`*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{"0.2828550380422479`", "\[Rule]", "1.5657100760844957`"}]},
    {
     RowBox[{"0.755509041877755`", "\[Rule]", "2.51101808375551`"}]},
    {
     RowBox[{"0.19205837082878974`", "\[Rule]", "1.3841167416575795`"}]},
    {
     RowBox[{"0.3836581474401599`", "\[Rule]", "1.7673162948803198`"}]},
    {
     RowBox[{"0.08358041560254348`", "\[Rule]", "1.167160831205087`"}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{3.680457151944789*^9}]
}, Closed]],

Cell["And train with this test data:", "Text",
 CellChangeTimes->{{3.6804571604538918`*^9, 3.6804571655581975`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"result", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{"net", ",", "data"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6803583683570848`*^9, 3.6803583753528333`*^9}, 
   3.680358427497135*^9, 3.6804508205499535`*^9}],

Cell["The result should be close to the function 2x+1:", "Text",
 CellChangeTimes->{{3.6804571846543703`*^9, 3.680457200654663*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"result", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "3"}], "}"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6803583789252787`*^9, 3.6803584162012367`*^9}, {
   3.6803584735966024`*^9, 3.6803584917210913`*^9}, {3.680358552786993*^9, 
   3.6803585569379997`*^9}, {3.6804507381376443`*^9, 3.6804507479426928`*^9}, 
   3.680450929230296*^9, {3.680451013709833*^9, 3.6804510138222623`*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1:eJwl0X9Q03UYB/DvxuADciEgZhNBQTAFTU8JFMrPU1gYSArCESe/QUP6JUhH
lMZWw1QkyOOQAnQIoraTSQzTGMJNTi5EkF+BCQORiB8DvgRjwYLFnu8fu+11
z73fz/P9zinus+CjfIZhApc/xm//oyNt9aOhe5d/Mo4MSwW+a0/0Cz3oMqGE
z9JdVwqKqoT7jI5xMWVpwOPuX4qFIUbXu61gaViCrvaiMMFokZcdS/u2f+eb
LUw1euDQZpZKVx88c14oMVr67SGWis2rXj0nzMP+USlLPwgvkbPTZdjnfXCa
WhrEEX6OcqM3GKanqWvQ5MiDLAX64g//0LSWPbRg9h7uk+2doWsUNmoerw77
vQZm6J1B3+bWN1TY758zS1VJxfbhmga8391HS7Wb3lx565NGnGc801L+vMza
3rUJ94efm6Oehpg7hyua0eXuOtos8Wh56NaK+1RNOro+d3z+5uQT3JeQ9i8d
1/Wru3a04zz9lXlaNlbTZPV9B+btGueplcP1qaGhTvTXKQv0wvHqY1KXP/Ce
I7Z6OgeyocSMbszfr9PT1J0Nipcf9OB9ebH/0f6Khqw2pz9xzlovUn1SZ+GW
L5+h7WsXqftbZOlYTa/RzL3IJep31enDyjVqfF99lgaa5hDt/DyiH+epFQa6
VRNq2R04gPdrNjGwaiVr3rCAFsWdZkBQVyjfWPQc/z+bFgY+8qh5ahEwiPdK
XHkgey9Oen8ODVFf8UA7vtZ6OP8F5pMf8aD6sJ9J3r4hfF4/Zz5k7M+8ohhG
i8JO8sGpz7+nNPMv3N+i4oO3lyRPuHMY77MQmkCEY+s8rwMtPXXcBLRN2YMn
xH9jvqreBAoEUanBLiPYv9FWAKvU1Vf5DWjQxwrA9LQ4ZE/yKPbl3xUAczNK
Pmg7hvMkC1NI+UmebatCi3ixplDrftbc5tNxnDO/moKNf8rWb6w06N3EDHq3
PelIV6JFu6LM4PZl6jIUNYHvN1FuBpFyTxuHJTQjMJiBKLNE3PvzJObjQwnc
GnEotDowhffqrxE4W5wZo34fLYq/TiAheMK1IojzoxsE1imVtwPD0FAoI3A+
58jDC3Fc3ruSQKLnj9Mr0jmnKwk4S+z2k3LOunYCS7tPvdR9Ay2N7iTwdOJF
e7mM62/sIpAbVhX5biXXf6mHgMEt+GSmkst7qgn0tuVcNung/PkogbtndPEd
XVxf3xiBPJ/oLaU9XN87GgIB115TvK3m+lZPEfjti8e/i0e5vGKWQP6213OC
NFx+3RyB5MGiEKcpLi/REdh84OP++lkuH7JAQMDrLMvVoTco9QQGqn2SYhbQ
jMsiAWVS6fYdi+iBrCUCl9Zbag0Gbt+MgcD/oG3geg==
      "]]}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 1}, {0, 3}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.6804509250131807`*^9, 3.6804509297789345`*^9}, 
   3.6804510142546864`*^9, 3.680452614768936*^9, 3.6804572052454057`*^9}]
}, Closed]],

Cell["\<\
In this case the weight should be 2 (also the slope) and the bias should be \
close to 1 (the intercept):\
\>", "Text",
 CellChangeTimes->{{3.680457219302575*^9, 3.680457243318969*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"layer", "=", 
  RowBox[{"NetExtract", "[", 
   RowBox[{"result", ",", "1"}], "]"}]}]], "Input"],

Cell[BoxData[
 TagBox[
  TemplateBox[{RowBox[{
      StyleBox[
       TagBox["DotPlusLayer", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open$$ = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = True), Appearance -> None,
                 Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                None, Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> 
               Dynamic[{
                 Automatic, 3.5 CurrentValue["FontCapHeight"]/
                  AbsoluteCurrentValue[Magnification]}]], 
              GraphicsBox[{{
                 Opacity[0.3], {{
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[-1, 2], 1}}, {{0, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[1, 2], 1}}, {{0, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{0, 0}, {
                    Rational[3, 2], 1}}, {{0, 0}, {1.5, 1}}]]}, {
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[-1, 2], 1}}, {{1, 0}, {-0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[1, 2], 1}}, {{1, 0}, {0.5, 1}}]], 
                   LineBox[
                    NCache[{{1, 0}, {
                    Rational[3, 2], 1}}, {{1, 0}, {1.5, 1}}]]}}}, {
                 AbsolutePointSize[5], 
                 PointBox[{{0, 0}, {1, 0}}], 
                 PointBox[
                  NCache[{{
                    Rational[-1, 2], 1}, {
                    Rational[1, 2], 1}, {
                    Rational[3, 2], 1}}, {{-0.5, 1}, {0.5, 1}, {1.5, 1}}]]}}, 
               ImageSize -> 32], 
              GridBox[{{
                 ItemBox[
                  StyleBox["\"Parameters:\"", Bold, StripOnInput -> False], 
                  StripOnInput -> False], 
                 ItemBox["\"\"", StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Size\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox["1", "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Arrays:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Weights\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"matrix\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{
                    "\[Times]", "\"\[Times]\"", "\"1\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Biases\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 ItemBox[
                  StyleBox["\"Ports:\"", Bold, StripOnInput -> False], 
                  Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                  GrayLevel[0.85], StripOnInput -> False], 
                 ItemBox[
                  InterpretationBox[
                   StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                   Spacer[{1, 11}]], Frame -> {{False, False}, {False, True}},
                   FrameStyle -> GrayLevel[0.85], StripOnInput -> False]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Input\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}, {
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation", StripOnInput -> False], 
                  "SummaryItem"], 
                 TagBox[
                  StyleBox[
                   TemplateBox[{"\"vector\"", "\" \"", 
                    
                    TemplateBox[{
                    "\"(\"", "\"\[VeryThinSpace]\"", "\"size\"", "\":\"", 
                    "\" \"", 
                    
                    TemplateBox[{"\[Times]", "\"\[Times]\"", "\"1\""}, 
                    "RowWithSeparators"], "\"\[VeryThinSpace]\"", "\")\""}, 
                    "Row", DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, AspectRatio -> 1, Frame -> 
                    True, FrameStyle -> GrayLevel[0.33333333333333337`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], "GrayLevel[0.5]"],
                     Appearance -> None, BaseStyle -> {}, BaselinePosition -> 
                    Baseline, DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem", StripOnInput -> False], 
                  "SummaryItem"]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
               BaseStyle -> {
                ShowStringCharacters -> False, NumberMarks -> False, 
                 PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open$$], ImageSize -> Automatic], BaselinePosition -> 
        Baseline], DynamicModuleValues :> {}], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("None"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.6804526306064167`*^9, 3.680457245289538*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetExtract", "[", 
  RowBox[{"layer", ",", "\"\<Weights\>\""}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", "1.9999481439590454`", "}"}], "}"}]], "Output",
 CellChangeTimes->{{3.6804526220979595`*^9, 3.680452632088944*^9}, 
   3.680457246509077*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NetExtract", "[", 
  RowBox[{"layer", ",", "\"\<Biases\>\""}], "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", "1.0000286102294922`", "}"}]], "Output",
 CellChangeTimes->{3.6804526384370637`*^9, 3.680457247436096*^9}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Learning \[OpenCurlyDoubleQuote]y=x^2\[CloseCurlyDoubleQuote]", \
"Subsubsection",
 CellChangeTimes->{{3.6804507867252703`*^9, 3.6804508078216476`*^9}, {
  3.680450965765478*^9, 3.6804509705495915`*^9}, {3.6804510395973988`*^9, 
  3.6804510410773745`*^9}}],

Cell[TextData[{
 "In this case the single linear \[OpenCurlyQuote]DotPlusLayer\
\[CloseCurlyQuote] is not going to be able to adequately model the function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"y", "=", 
    SuperscriptBox["x", "2"]}], TraditionalForm]],
  FormatType->"TraditionalForm"],
 ". Simply because there is nothing to make it nonlinear. But let\
\[CloseCurlyQuote]s try it anyway:"
}], "Text",
 CellChangeTimes->{{3.6804572575992517`*^9, 3.680457333424203*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetChain", "[", 
    RowBox[{"{", 
     RowBox[{"DotPlusLayer", "[", 
      RowBox[{"1", ",", 
       RowBox[{"\"\<Input\>\"", "\[Rule]", "\"\<Scalar\>\""}], ",", 
       RowBox[{"\"\<Output\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], "]"}], 
     "}"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6803580407480574`*^9, 3.680358081136017*^9}, 
   3.680358318545034*^9, {3.680358450833645*^9, 3.680358454922589*^9}, {
   3.680358520949281*^9, 3.6803585273934994`*^9}, {3.680450694661951*^9, 
   3.680450695821642*^9}, 3.680450816894287*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetInitialize", "[", "net", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.680358433289722*^9, 3.6803584364737926`*^9}, 
   3.6804508183659563`*^9}],

Cell["Here use x^2 for the training data:", "Text",
 CellChangeTimes->{{3.680457342544424*^9, 3.680457355040625*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"x", "\[Rule]", 
      RowBox[{"x", "^", "2"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"RandomReal", "[", 
        RowBox[{"1", ",", "10000"}], "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.680358323212538*^9, 3.6803584031626587`*^9}, {
   3.68035846091537*^9, 3.68035846465798*^9}, {3.680358535081916*^9, 
   3.6803585378656015`*^9}, 3.6804507086856833`*^9, {3.6804509096300173`*^9, 
   3.6804509097505503`*^9}, {3.680450994789851*^9, 3.680450996390175*^9}, {
   3.6804510501735764`*^9, 3.68045105076607*^9}}],

Cell["And let\[CloseCurlyQuote]s take a look at a random sample:", "Text",
 CellChangeTimes->{{3.6804573609603834`*^9, 3.68045737288091*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomSample", "[", 
   RowBox[{"data", ",", "5"}], "]"}], "//", "Column"}]], "Input",
 CellChangeTimes->{{3.6804573739768114`*^9, 3.6804573801168165`*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{"0.1587578956944249`", "\[Rule]", "0.025204069445321893`"}]},
    {
     RowBox[{"0.25514916059410697`", "\[Rule]", "0.06510109415187738`"}]},
    {
     RowBox[{"0.053042327083461016`", "\[Rule]", "0.002813488462428862`"}]},
    {
     RowBox[{"0.7318434438835111`", "\[Rule]", "0.5355948263552779`"}]},
    {
     RowBox[{"0.5913214687073538`", "\[Rule]", "0.349661079354222`"}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{3.6804573805930557`*^9}]
}, Closed]],

Cell["\<\
Train the data and hope for the best, even though this probably won\
\[CloseCurlyQuote]t work:\
\>", "Text",
 CellChangeTimes->{{3.6804573855207615`*^9, 3.6804573966969304`*^9}, {
  3.6804574304015894`*^9, 3.6804574560336647`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"result", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{"net", ",", "data"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6803583683570848`*^9, 3.6803583753528333`*^9}, 
   3.680358427497135*^9, 3.6804508205499535`*^9}],

Cell["And check the results", "Text",
 CellChangeTimes->{{3.680457470145887*^9, 3.680457473170123*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"result", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6803583789252787`*^9, 3.6803584162012367`*^9}, {
   3.6803584735966024`*^9, 3.6803584917210913`*^9}, {3.680358552786993*^9, 
   3.6803585569379997`*^9}, {3.6804507381376443`*^9, 3.6804507479426928`*^9}, 
   3.680450929230296*^9, {3.680451013709833*^9, 3.6804510138222623`*^9}, 
   3.680451076397651*^9}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1:eJwl0AdMk0EUB/CKGCcVxGAcIFVcDCUEUCHm4YgDRyKgxgFWVETE3agoQmuo
IQwhEXHUUUFx1FIVUGOLVqkYSEXkAwtS2lJqLQeIikiASPV79yWXL7+8/713
d7zYwxF7HTgcDvxf7F+w2CAcd+IdS/x6Zy8ZLz/4Hl0gzQGHfpnz1FnV6CCm
AILt/GeRxVp0uqMctGmBNZXeH1mHLReVwPTcjv4H32tZqwc7X0BHn9HQ4F+H
1g2Wwx2irOZeYFh7PlO+Aa77vW6LpZ41X5aogaz9ZXFSr8+spQHdlfAnTGaJ
T9Vh3u1+FQgCNKVuFY2sTZkBWjAWazI/8b5gPrqnBgYT6iXzTjfjeeRMLfgs
HTkUp9TjfIFbHawq4O17MsmA9QQBAyfdd85o3WHE+lxlPfh2bhqrW29CJw82
gOv4H6M0A9RDm3Xg+FqimHm9Fe8fLmmEA4HKptFrzayFFQNNIFsTK331B82p
i2yG3o4pztb8NvTDS3ooi1w1PG+FBfspfrVA6mrxrVIrdcoiI/BawhsLxV+x
389QE4QsTMubHGDFeki7CXZ4fOwfxqCFtoxW6K3ONh8RfcP7+IWY4YpjjCDC
y4bv8bnFDK6GsgIHDXV4ShuMOCuKWny0Hd9vk+//uQ9iFOYJBN//XY0Fjl1T
ZE94i/bUpnyFcp/0US6HOnDeDR8ruIQf8z3H7cQ8o7WC3q+WSVKhhdIz3+Dx
TfCyxHTR+3vYIFoR7OI+hA6reWUDofi2SP/wO+Z3JbaD3OYu4a7rxvpWLoH0
G2K+YQNa6OtCYE9E16zijWi13ZXANJXq8fotNF80mUBGzvbKrFg0p8eLQHzw
1Z9jktCmrFACM9Imrh5ZRPPqeAJDi5KddPdp/4sHCDR1tdUVyWj/uEMEcreU
RK98QvNOAgJ274jjYhXac1sqAf2nnJvDGdq/5xKBF+f7djMNdP77KwTyQnfO
K2yk+69JCKy9O790mQEtDbtN4OWpD1WidursRwTy/YJyNnZS8xUEjpqvR/G6
6bzApwTmrks0qn+j+V+eE3AcVn8nt4/m5S8JmMpCE/gD9DzCcgKqhMIF/n/p
/ig1gcvTx/ba7XT/nAoC/wAruq0q
      "]]}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 1}, {0, 1}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.6804509250131807`*^9, 3.6804509297789345`*^9}, 
   3.6804510142546864`*^9, 3.6804510767099495`*^9, 3.680457475235032*^9}]
}, Closed]],

Cell["\<\
As expected the single linear feedforward network is only going to get a line \
(linear result).\
\>", "Text",
 CellChangeTimes->{{3.6804574812735825`*^9, 3.6804575522509336`*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
Multi Layer Neural Network (single input, single output, with nonlinear \
layers)\
\>", "Subsection",
 CellChangeTimes->{{3.6804505426775184`*^9, 3.680450569773883*^9}, {
  3.680451094709401*^9, 3.680451104045273*^9}, {3.6804593462880363`*^9, 
  3.6804593555119247`*^9}}],

Cell["\<\
Adding in a second nonlinear layer may improve the neural network result.\
\>", "Text",
 CellChangeTimes->{{3.6804575912989316`*^9, 3.6804576154835835`*^9}}],

Cell[CellGroupData[{

Cell["Learning \[OpenCurlyDoubleQuote]y=x^2\[CloseCurlyDoubleQuote]", \
"Subsubsection",
 CellChangeTimes->{{3.6804507867252703`*^9, 3.6804508078216476`*^9}, {
  3.680450965765478*^9, 3.6804509705495915`*^9}, {3.6804510395973988`*^9, 
  3.6804510410773745`*^9}}],

Cell["\<\
Here add a nonlinear hyperbolic Tan function, so see how the results improve:\
\>", "Text",
 CellChangeTimes->{{3.6804576211557374`*^9, 3.680457655964021*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetChain", "[", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"DotPlusLayer", "[", 
       RowBox[{"1", ",", 
        RowBox[{"\"\<Input\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"ElementwiseLayer", "[", 
       RowBox[{"Tanh", ",", 
        RowBox[{"\"\<Output\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], "]"}]}], 
     "\[IndentingNewLine]", "}"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6803580407480574`*^9, 3.680358081136017*^9}, 
   3.680358318545034*^9, {3.680358450833645*^9, 3.680358454922589*^9}, {
   3.680358520949281*^9, 3.6803585273934994`*^9}, {3.680450694661951*^9, 
   3.680450695821642*^9}, 3.680450816894287*^9, {3.680451119407272*^9, 
   3.6804512049501567`*^9}, 3.6804576635645747`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetInitialize", "[", "net", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.680358433289722*^9, 3.6803584364737926`*^9}, 
   3.6804508183659563`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"x", "\[Rule]", 
      RowBox[{"x", "^", "2"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"RandomReal", "[", 
        RowBox[{"1", ",", "10000"}], "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.680358323212538*^9, 3.6803584031626587`*^9}, {
   3.68035846091537*^9, 3.68035846465798*^9}, {3.680358535081916*^9, 
   3.6803585378656015`*^9}, 3.6804507086856833`*^9, {3.6804509096300173`*^9, 
   3.6804509097505503`*^9}, {3.680450994789851*^9, 3.680450996390175*^9}, {
   3.6804510501735764`*^9, 3.68045105076607*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"result", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", "data"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6803583683570848`*^9, 3.6803583753528333`*^9}, 
   3.680358427497135*^9, 3.6804508205499535`*^9, 3.6804511683417273`*^9}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"encoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Inputs", "Input"}, 
             "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "2"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 1}], "Biases" -> 
               NeuralNetworks`TensorT[1, {1}]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {1}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "2", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`EncodedType[
             NetEncoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Output" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{332., {37., 45.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.68045116906149*^9, 3.680451213600884*^9, 
  3.680458077024909*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"result", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6803583789252787`*^9, 3.6803584162012367`*^9}, {
   3.6803584735966024`*^9, 3.6803584917210913`*^9}, {3.680358552786993*^9, 
   3.6803585569379997`*^9}, {3.6804507381376443`*^9, 3.6804507479426928`*^9}, 
   3.680450929230296*^9, {3.680451013709833*^9, 3.6804510138222623`*^9}, 
   3.680451076397651*^9}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1:eJwt0XtQTFEcB/BVGRQ9vbO0FVP0mqSHxvxiPAtDoj+kVpTknWY8hpRpaTyq
MXmksEQeTS9a09hNyarRRFtb2rJ2t+3uPWp7MFmJqbi/487cufOZ7/n9fuec
K4g9Eh5nxuPx4N/LfWVulem77d5xxMe0aIVN8aF6dF99DpiNFNk6LmzgXOO3
oxD8x4Uvt5U0cg5RScugMd3vY93iJs7i+x4vYUG2ceTpgIKzcGiaDIzDWk2b
Twtd/6YGHvZKG6wzlZydep+/BWv+40GGacV5Q9l1cGW/JF7s+gnneQW+h58h
RUzCuXbM4+wbIdlXXjHzrQrzNZKPoC2RX24WdOL8LXIF/ElszXM//Rnnz3Zp
gSUrJ43FS9W4PiheCeseCPaVz9KgFdWtcIIf49wVpcX+DaNt4NG33ap9kw77
GX3awcHm22T5b+rakyqwqM4rdcnv4qxLedQBB/ykHVPC9JxTrxs6oWhDrPj1
T7S4ao4aTMa5tuyNbsxzl34BybZ15jmrGbRtjAbOrRfdq2DRuvKjWhB8CVUV
iAx4X0+CdbA8ID1nji+L92Wq00HU/KaRCUq0uGdNF5garuqPphHMgxu74JZF
dHK461c8X8ZaPThoJA/M5OiQ81I9TDybFhF0rAfr5wX829fT6FK9fS+uj3vc
DUm3S6/a11JX8RmoWpIx2e6wEeuvZTJgF5rkcd66D++r4wcDak+F8pQMLb4o
NEDZXXBlovvR9rUG2FXqb8cfQzsNzGchVXQ/Tf1sAM9/J5WF4q/8POuNg/i/
vqlYyLgjEmo2o8XJnSzsDe9fWLIVnfrrMwvzZLKyTZFoJ56WhUtZO+uuxNL6
qQYWEvxzv1ueornjdxac06evn1RIc9spBMYCz0xrf4LmZVoS6OjvbiksornV
VALZkS92rS2n8ybaEBhfHH5cJEOHDE8noG7OumuupPtTOBGovDC8R9lG+4U5
E8gJjnEvUKF1chcCYY+8KlZpaL/KRQRenfzwPq2H5vkeBG54Lsva2kfzGV4E
junzIwSD//fnTcBt40FtzQ/qFF8CFhNaH2YP03rTUgI6SXCi8Dfd/6FlBGSJ
Bd4+o+gaxp/AzQVWpvFxWh8VSOAvmEql0Q==
      "]]}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 1}, {0, 1}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.6804509250131807`*^9, 3.6804509297789345`*^9}, 
   3.6804510142546864`*^9, 3.6804510767099495`*^9, 3.6804512176141224`*^9, 
   3.680458079327179*^9}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Learning \[OpenCurlyDoubleQuote]y=x^2\[CloseCurlyDoubleQuote]", \
"Subsubsection",
 CellChangeTimes->{{3.6804507867252703`*^9, 3.6804508078216476`*^9}, {
  3.680450965765478*^9, 3.6804509705495915`*^9}, {3.6804510395973988`*^9, 
  3.6804510410773745`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"DotPlusLayer", "[", 
      RowBox[{"10", ",", 
       RowBox[{"\"\<Input\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"ElementwiseLayer", "[", "Tanh", "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"DotPlusLayer", "[", 
      RowBox[{"1", ",", 
       RowBox[{"\"\<Output\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], "]"}]}], 
    "\[IndentingNewLine]", "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6803580407480574`*^9, 3.680358081136017*^9}, 
   3.680358318545034*^9, {3.680358450833645*^9, 3.680358454922589*^9}, {
   3.680358520949281*^9, 3.6803585273934994`*^9}, {3.680450694661951*^9, 
   3.680450695821642*^9}, 3.680450816894287*^9, {3.680451119407272*^9, 
   3.6804512049501567`*^9}, 3.68045125579736*^9, {3.680451324085854*^9, 
   3.680451472030263*^9}, {3.680451504061485*^9, 3.6804515104773593`*^9}, {
   3.6804581003940325`*^9, 3.680458100681896*^9}, {3.6804582581396284`*^9, 
   3.680458258243578*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"encoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Inputs", "Input"}, 
             "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "2"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["3", 
              GrayLevel[0.5]], {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "3"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {10, 1}], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[1, {10}]]], "Parameters" -> 
             Association["Size" -> 10, "$InputSize" -> 1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {10}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "3" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 10}], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[1, {1}]]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 10], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Layers", "3", "Inputs", "Input"] -> 
           NetPort["Layers", "2", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "3", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`EncodedType[
             NetEncoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Output" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{332., {48., 56.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.6804511575584764`*^9, 3.6804512059581394`*^9, 3.6804512566843214`*^9, {
   3.680451348593864*^9, 3.6804514727469683`*^9}, {3.6804515069597836`*^9, 
   3.68045151167461*^9}, 3.680458128699566*^9, {3.68045825946877*^9, 
   3.6804582686877103`*^9}}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetInitialize", "[", "net", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.680358433289722*^9, 3.6803584364737926`*^9}, 
   3.6804508183659563`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"x", "\[Rule]", 
      RowBox[{"x", "^", "2"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"RandomReal", "[", 
        RowBox[{"1", ",", "10000"}], "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.680358323212538*^9, 3.6803584031626587`*^9}, {
   3.68035846091537*^9, 3.68035846465798*^9}, {3.680358535081916*^9, 
   3.6803585378656015`*^9}, 3.6804507086856833`*^9, {3.6804509096300173`*^9, 
   3.6804509097505503`*^9}, {3.680450994789851*^9, 3.680450996390175*^9}, {
   3.6804510501735764`*^9, 3.68045105076607*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomSample", "[", 
   RowBox[{"data", ",", "5"}], "]"}], "//", "Column"}]], "Input",
 CellChangeTimes->{{3.6804582256015396`*^9, 3.6804582334192677`*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{"0.3642809791636896`", "\[Rule]", "0.13270063178045646`"}]},
    {
     RowBox[{"0.2816091785428001`", "\[Rule]", "0.07930372943955066`"}]},
    {
     RowBox[{"0.41561208714664866`", "\[Rule]", "0.17273340698239348`"}]},
    {
     RowBox[{"0.877892060709424`", "\[Rule]", "0.7706944702566391`"}]},
    {
     RowBox[{"0.9096610691845775`", "\[Rule]", "0.8274832607900287`"}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{3.680458233979476*^9, 3.680458272894126*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"result", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", "data", ",", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "200"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6803583683570848`*^9, 3.6803583753528333`*^9}, 
   3.680358427497135*^9, 3.6804508205499535`*^9, 3.6804511683417273`*^9, {
   3.680451541565759*^9, 3.6804515462452507`*^9}, {3.680451576949438*^9, 
   3.680451577173006*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"encoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Inputs", "Input"}, 
             "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "2"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["3", 
              GrayLevel[0.5]], {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "3"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {10, 1}], "Biases" -> 
               NeuralNetworks`TensorT[1, {10}]], "Parameters" -> 
             Association["Size" -> 10, "$InputSize" -> 1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {10}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "3" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 10}], "Biases" -> 
               NeuralNetworks`TensorT[1, {1}]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 10], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Layers", "3", "Inputs", "Input"] -> 
           NetPort["Layers", "2", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "3", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`EncodedType[
             NetEncoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Output" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{332., {48., 56.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.68045116906149*^9, 3.680451213600884*^9, 
  3.6804514859343963`*^9, 3.6804515211315565`*^9, 3.6804515673887005`*^9, 
  3.6804516191834087`*^9, 3.680458171217973*^9, 3.680458311624752*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"x", "^", "2"}], ",", 
     RowBox[{"result", "[", "x", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6803583789252787`*^9, 3.6803584162012367`*^9}, {
   3.6803584735966024`*^9, 3.6803584917210913`*^9}, {3.680358552786993*^9, 
   3.6803585569379997`*^9}, {3.6804507381376443`*^9, 3.6804507479426928`*^9}, 
   3.680450929230296*^9, {3.680451013709833*^9, 3.6804510138222623`*^9}, 
   3.680451076397651*^9, {3.680451527751148*^9, 3.6804515330462055`*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
l0zPzRHYjtWjv/N/9SW6zA==
      "]]}, 
    {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1:eJwt0XswVFEcB/D1aFQmhab3phWJEEJ6zW9rTCrVTNKYJiGyaT16YEqTWo1t
TK/1x6YHSUhpx2vCNHaTsiNJeax3a3ettS33eNS0CZOt/V135s6dz3zP+d7f
nMOKPBcUbcpgMNj/X+O3jVfr87O4Hhhzzwfuk9XHiZR2YiroN+xaXBL/Ee0X
nAWmU6Ilqx2b0CuSC8DXEFF9tLQZnREmguZ0768NLi3o8sIKsMukporHWtFZ
FtVATSoVnR7tRvNO+dRA4Yi4yeqeDO3YWQtWzBfjGk2H0Wyl+D3cOVvFyXPo
MrqOOVEPv9kiTcz1bvRMeAMkeUkrl9X3oKMqGkFZKr3dxurDPg77M8xwO7Kd
r3zDnN/yBTbttpjliOVGq4rWtkJAPutMxXIFOi65DS4xw+0HQpVGR4hr2sGV
HLPsPqTC/ddmZWC7eGK+dBrNWxjVCebvssvW5wxgnl/ZBbHe4t4FgWqj88qd
ekC0PzKv9jeaYfmoF/TUqiXarEFcP6bvg6qjAWZCfw3muiQ5XN/Hf1qpRdfd
V/QDq/9ATwF/CM9D66+E7VvThSu9tNiv4KggdG3LlIkMrZqwGwB90131+bTv
2Hd+ZAAemoclBTnocN7NxWqwVVTlm0rRjFfRgzAvNS1424Vh7C/a8v+/xWFl
apsRzNl6DVx8XHbX5gNtbuMQvN2UMd86gcI+w0MtWB+46HrDimCeE/od5G6t
shQJmi321EF5LjhowkbRgikdnCzztWbOohmutcPA4z9Lk78aw/N2E45AiY6Z
bXVwHB0fSkHGE36E4jA6j4RTcDpo1LH0CFoVG0XBGomk/FAInXO5FNwSnGi4
E4leF3OZghjfRz8WptCOFlJgn750n0XRnJspmPW7uqj7JZo91EJB7+hge5EI
XRctoyAz5PXJvRX0PJw+CgwuQYl8yVy/jgJ5myDXTEbPE2dO4M3NyShZJ5o3
akFAuCPcuaCH7k+wJBD43L1yj2Kcvh8bAjWXv3xKG6b7E9cRyHLzERwh9Ppf
6wlcUOcEs8bpPNmJwMaDccq6X3T/JXcC5iYdhZmTtP94ElBV7eBGTNPzp/gQ
kHALNnv8peeb9iPwwM5SbzDQ81/dSeAf1UWtLQ==
      "]]}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->{550.833333333334, Automatic},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 1}, {0, 1}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.6804509250131807`*^9, 3.6804509297789345`*^9}, 
   3.6804510142546864`*^9, 3.6804510767099495`*^9, 3.6804512176141224`*^9, 
   3.6804514877764874`*^9, {3.6804515233176336`*^9, 3.6804515337227573`*^9}, 
   3.6804515693191414`*^9, 3.680451621840664*^9, 3.680458173897005*^9, 
   3.6804583138004713`*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"x", "^", "2"}], ",", 
     RowBox[{"result", "[", "x", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "2"}], ",", "4"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6803583789252787`*^9, 3.6803584162012367`*^9}, {
   3.6803584735966024`*^9, 3.6803584917210913`*^9}, {3.680358552786993*^9, 
   3.6803585569379997`*^9}, {3.6804507381376443`*^9, 3.6804507479426928`*^9}, 
   3.680450929230296*^9, {3.680451013709833*^9, 3.6804510138222623`*^9}, 
   3.680451076397651*^9, {3.680451527751148*^9, 3.6804515330462055`*^9}, {
   3.68045819267883*^9, 3.6804582472036247`*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
81g=
      "]]}, 
    {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1:eJwl0HtMU1ccB/CWVw+wdQKrDhgGFJsg4IRQdNrt/iQICliQh8jwwSaCcwqL
BsMz8ggICXXVMRRFWzXqNjYmgxFZgFOlEGCQIZQMXIcFO6SOQaU3pStQxj33
j5t7P/l+z+/8cn0+y44/acPhcA6sPcy7+5jPi9XVVbz2qRwX0VhoEsVcMLNO
DaJxpTSqbdZAzPkrgMYx7ee/Hp9k84nNNB5274ls7mKtcaGxVn36UcYltq/6
14iXo1pKBvlsvue+EYfsiPS96WVlXMxzM2LALi/uui4TW4fe4A8UD2/Hb7UQ
J8gNuObOg8raaDNjxa7JOVwbHzUTEW4i9pXM4vwjbTHy4zRxl16PlwSDwvT4
BcZpcamv8ML8fv8OiYHMa5jR4Wt7fT8v/HOW5MrmKVzmZM1I7p0h+dQpLRaV
ZGWVWnRk/6Z2DR7Z2dQ/Sk0Se02P4SR5vq/dqefEqeNqLNuu7Fl+PswYrro8
wwWcoIuS5G4yT3KjD3te/n6dm+A+6bsUKXGjjnvHMbuZYpxiaMCxzrzHr819
xD2zd6m6bXXiyqtqYnHAE2qDe32Evl9D3B84RE1A0Uhh1hTj4qrzY9SZLoEl
JHiaMVgztJRyOl30buRrxlq7kL+p2MNemffWz5HzZRo9lafibirXG0i/tWyO
Cgwc8ogxLJD8et8byioe4X+hphkrczfSVPCtIKnXpIn0y2pMlEEjnNytMxN/
+MpMDXTFbf9ZZSH7SMwWynlp1LF9cJlYuGGFyhz/asKrxUrmXTBaqQfRX6py
9nFgzd4DiRz4Lb7nmDCayzjtYTAXLv7YaioV2zBWxhm5kP5IneAXZkt89Bcb
GHOQNhaE2jGGyqO24DK4jrYV2pN5Tou2ULj7qXXUz4Fxcd8VO8hZeZuX+D6P
2Ok9e1BkXlJ7bkaMFZ/I7UG2Z6DafYsjY063hwPwsxvCugROJPevcIDO8Mcd
rR7OxLoFB1g5ezz0EP8tcn/rQR5wecN1/ivEaS+/5UHovnNPozh8sk8RF4FF
88OMYIFYsShBEH6mV3bARKyNiEMgXXq5s9zC5t8cRODt4VlF27xD9glORBCZ
XOU34kasyEhBUPPs5GmZiLi48wSCbT0bZ53y2HxrLoLcpF01YUVsnpWH4Iku
SZxfQqxtykeQaCut1lex/R1FCApgKaD3BrE3VYqg99c/zpa3s+c/qkbgGmUU
dCjZ8wVSBEfG+Z20ij3fdhnB/OJefvog2w+5gmC9qKUxbILtb6lFkKb6/VD+
FNv/9BqC7xL+sTZNs3n9dQTic5tifebZ+11vIqjgfrx42MjOi6lHMCRLkcsW
iaHiFgIP75zI3iX2/yhvIzjxk2x+dZX1f3IE/wNPCNz7
      "]]}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-2, 4}, {-1.2631471157073975`, 9.523119735749926}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.6804582036564655`*^9, 3.6804582474152746`*^9}, 
   3.680458319356799*^9}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Learning \[OpenCurlyDoubleQuote]y=x^2\[CloseCurlyDoubleQuote]", \
"Subsubsection",
 CellChangeTimes->{{3.6804507867252703`*^9, 3.6804508078216476`*^9}, {
  3.680450965765478*^9, 3.6804509705495915`*^9}, {3.6804510395973988`*^9, 
  3.6804510410773745`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetChain", "[", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"DotPlusLayer", "[", 
       RowBox[{"2", ",", 
        RowBox[{"\"\<Input\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"ElementwiseLayer", "[", "Tanh", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"DotPlusLayer", "[", "2", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"ElementwiseLayer", "[", "Tanh", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"DotPlusLayer", "[", 
       RowBox[{"1", ",", 
        RowBox[{"\"\<Output\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], "]"}]}], 
     "\[IndentingNewLine]", "}"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6803580407480574`*^9, 3.680358081136017*^9}, 
   3.680358318545034*^9, {3.680358450833645*^9, 3.680358454922589*^9}, {
   3.680358520949281*^9, 3.6803585273934994`*^9}, {3.680450694661951*^9, 
   3.680450695821642*^9}, 3.680450816894287*^9, {3.680451119407272*^9, 
   3.6804512049501567`*^9}, 3.68045125579736*^9, {3.680451324085854*^9, 
   3.680451472030263*^9}, {3.680451504061485*^9, 3.6804515104773593`*^9}, {
   3.6804516629410973`*^9, 3.680451677661211*^9}, {3.6804583459663377`*^9, 
   3.680458384093192*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetInitialize", "[", "net", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.680358433289722*^9, 3.6803584364737926`*^9}, 
   3.6804508183659563`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"x", "\[Rule]", 
      RowBox[{"x", "^", "2"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"RandomReal", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", "10000"}], "]"}]}], 
      "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.680358323212538*^9, 3.6803584031626587`*^9}, {
   3.68035846091537*^9, 3.68035846465798*^9}, {3.680358535081916*^9, 
   3.6803585378656015`*^9}, 3.6804507086856833`*^9, {3.6804509096300173`*^9, 
   3.6804509097505503`*^9}, {3.680450994789851*^9, 3.680450996390175*^9}, {
   3.6804510501735764`*^9, 3.68045105076607*^9}, {3.680451687591172*^9, 
   3.680451688462194*^9}, {3.6804584025504065`*^9, 3.680458402781345*^9}, {
   3.6804585119992123`*^9, 3.680458512270993*^9}, {3.680458638808406*^9, 
   3.680458639727929*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomSample", "[", 
   RowBox[{"data", ",", "5"}], "]"}], "//", "Column"}]], "Input",
 CellChangeTimes->{{3.680458388758624*^9, 3.6804583948289547`*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{
      RowBox[{"-", "0.546483986470621`"}], "\[Rule]", "0.2986447474688219`"}]},
    {
     RowBox[{
      RowBox[{"-", "1.4178058700775082`"}], "\[Rule]", "2.01017348522624`"}]},
    {
     RowBox[{
      RowBox[{"-", "1.091331794365253`"}], "\[Rule]", "1.1910050853924827`"}]},
    {
     RowBox[{"0.8653610546858994`", "\[Rule]", "0.7488497549670922`"}]},
    {
     RowBox[{
      RowBox[{"-", "0.13384861720296826`"}], "\[Rule]", 
      "0.017915452327146728`"}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{{3.6804583954802465`*^9, 3.680458405000922*^9}, {
   3.680458519195114*^9, 3.680458523854719*^9}, 3.6804586471817484`*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"result", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", "data", ",", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "200"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6803583683570848`*^9, 3.6803583753528333`*^9}, 
   3.680358427497135*^9, 3.6804508205499535`*^9, 3.6804511683417273`*^9, {
   3.680451541565759*^9, 3.6804515462452507`*^9}, {3.680451576949438*^9, 
   3.680451577173006*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"encoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Inputs", "Input"}, 
             "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "2"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["3", 
              GrayLevel[0.5]], {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "3"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["4", 
              GrayLevel[0.5]], {"Layers", "4"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "4"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "4"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["5", 
              GrayLevel[0.5]], {"Layers", "5"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "5"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "5"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {2, 1}], "Biases" -> 
               NeuralNetworks`TensorT[1, {2}]], "Parameters" -> 
             Association["Size" -> 2, "$InputSize" -> 1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {2}]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {2}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {2}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {2}]]], "3" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {2, 2}], "Biases" -> 
               NeuralNetworks`TensorT[1, {2}]], "Parameters" -> 
             Association["Size" -> 2, "$InputSize" -> 2], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {2}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {2}]]], "4" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {2}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {2}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {2}]]], "5" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 2}], "Biases" -> 
               NeuralNetworks`TensorT[1, {1}]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 2], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {2}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Layers", "3", "Inputs", "Input"] -> 
           NetPort["Layers", "2", "Outputs", "Output"], 
           NetPort["Layers", "4", "Inputs", "Input"] -> 
           NetPort["Layers", "3", "Outputs", "Output"], 
           NetPort["Layers", "5", "Inputs", "Input"] -> 
           NetPort["Layers", "4", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "5", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`EncodedType[
             NetEncoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Output" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{332., {70., 78.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.68045116906149*^9, 3.680451213600884*^9, 
  3.6804514859343963`*^9, 3.6804515211315565`*^9, 3.6804515673887005`*^9, 
  3.6804516191834087`*^9, 3.680451739665532*^9, 3.6804584515102*^9, 
  3.680458586235962*^9, 3.6804587009491835`*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"x", "^", "2"}], ",", 
     RowBox[{"result", "[", "x", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "4"}], "}"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6803583789252787`*^9, 3.6803584162012367`*^9}, {
   3.6803584735966024`*^9, 3.6803584917210913`*^9}, {3.680358552786993*^9, 
   3.6803585569379997`*^9}, {3.6804507381376443`*^9, 3.6804507479426928`*^9}, 
   3.680450929230296*^9, {3.680451013709833*^9, 3.6804510138222623`*^9}, 
   3.680451076397651*^9, {3.680451527751148*^9, 3.6804515330462055`*^9}, {
   3.6804517309652963`*^9, 3.680451733757086*^9}, {3.6804584544784603`*^9, 
   3.6804584560058413`*^9}, {3.6804585458796186`*^9, 3.680458548968134*^9}, {
   3.6804586720246377`*^9, 3.6804586796884255`*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
      "]]}, 
    {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
m9k/8ha9Wb8A6i4ymscb0Sf3FIBDaO9ruRl1OD8ek/mfi10XH0R31U/mP7ze
tn0IrRdVCA7iwbwAww9Yz84ieGBT662X1kAcXVYMN7s3Q2cpuqunGLw8Isae
t6H3Mkvg3CPnP2WZjcQnzEvArEjarel3dENlCTDX6J25q9xEzGwuhfvjfqYS
52bibIVyKDJbomih3Ep8oVkEc3Vb57suRjf0i8BW8ZVqoAb6oEwljJboGNRt
RDtpVYLOns1HbU+hN7hVgv/2oywXHnqPQhUc2fBs58ODbVP2tjaphh61eV6V
we0kPr9dDBfdVtk9mN9J4qJXDVDboGRlL5RMObdgsBVsPTb/T3bfpylTY+87
QLBq/W3B9F7iI3QXaMzMlETt7iP7yaR9hiWZjjun+/XjfD3/AoxRKZZr2xec
/46v8M0y60ThisEp277YNAL1BjaLVvh+JearjIHLIaU56g1DUw6//JhBLQz8
aC2zZHjKLUN3paiEo+ExA5dHpqz6JFOGOrTl2m5h1iip36xkBpV4wll94/d/
Sb5ZiRw1LL9dOv3AGHGbRJ6yEm0yXBI0TvKflClQ8ptm5WW+IKaqahSovKgP
vx6LRDObFCi9yx52zxOIGV69ChRzadrdhYXEuTtmK1Jvnda2z/uC+c4WihQl
p+XP3DdBvFSkSA1fGP5PgiWx6oL3ihSnvuiV6SGMK7YqUioc+4y7J4m9v/Qp
Ut8PRHXKe6BfKjGptMilW2SjiRkB5kzqnOLnouhYXH/6EJPScM+2MknEfEMb
JhW49/jZG5mYX3mOSbn2Bz+SrsL87ntMSvuog0pkHcbjHzOp1gIj1rYmjDu+
YFIWQXXZf/1DnNsSx6TkpOg9ap8xP4jHpHIc3atzBzG+L5NJXaoxsbEdRY8L
mNSP/weRehJKmNT/AbZbKYU=
      "]]}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->{550.833333333334, Automatic},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-2, 2}, {0, 4}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.6804509250131807`*^9, 3.6804509297789345`*^9}, 
   3.6804510142546864`*^9, 3.6804510767099495`*^9, 3.6804512176141224`*^9, 
   3.6804514877764874`*^9, {3.6804515233176336`*^9, 3.6804515337227573`*^9}, 
   3.6804515693191414`*^9, 3.680451621840664*^9, 3.680451742628253*^9, 
   3.6804584575582104`*^9, {3.6804585925339003`*^9, 3.680458611006817*^9}, 
   3.6804587035446377`*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"x", "^", "2"}], ",", 
     RowBox[{"result", "[", "x", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "4"}], ",", "4"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "4"}], ",", "4"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "2"}], ",", "16"}], "}"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6803583789252787`*^9, 3.6803584162012367`*^9}, {
  3.6803584735966024`*^9, 3.6803584917210913`*^9}, {3.680358552786993*^9, 
  3.6803585569379997`*^9}, {3.6804507381376443`*^9, 3.6804507479426928`*^9}, {
  3.680450929230296*^9, 3.6804509457342772`*^9}, {3.680451632502454*^9, 
  3.6804516366058693`*^9}, {3.6804587380412893`*^9, 3.6804587491860275`*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1:eJw12Ok/FGzfgHH72AdRl5IsJcYySErF76wkKURIke1KipIkS4QmScoSClFE
trKnbMM51shWDLLvjN2kBRXP/Xw+9/3q+Au+bw5ph+umjmwsLCwirCws/18V
2DyzsUGkufgr0Tc2yOj6qmzI6hqRZvbBqHf5Bxnlv1OTW/5BpN0qcPOYniUj
dXlDh8lZIs2B+e5iTzcZ7RMO6m3uJtJmYvftbc4jIzTG/BSfR6SlBOx59teW
jEwftLzdY0ukUUv/no2oUkFebUHXnCoFaS++9vW6PlRGdDrfTJW9AO3cdSeJ
82sktJ12XXSfBD9NSCZY16dAHr13qeUkDvDSAiYmAslhcsjusdpSD4WH9lSv
J/aRxU60EuUbgoGbFkm6cFLSTgalCg6Kx41w0ZL5Tz90spZCiQZq7h0POWlr
enknXdclEOWqvbfCCQ4aLahxn2aJOPJlf+PlPs9GU78bast5cTOyD2zb2ZXJ
SjtHdHtDvbMJPa2YiEt0ZqFd5y2M2ugWQmVD8vzZMutY9A67vLw9P5IVQkfM
Xv7GGqolkdpdBFRICnEeHVvBxFzz2yRrdjRUVyClqfkTC+X8edDcuQ4TSk/V
8YdlnEFvsVE2WAFh/yxNFVYm3u7nYUAR+QbBH+QbhH4tYYWl4HTuv0xYW8g4
tzy3hA/PxzcnTDFh1Dbdr+TrEk6iVHkyqEwoPJxafSR/CfNv3XJ022UmmHK+
MDpru4QLfveVT9KWYLe4dAuL7yI+LRpvRVpZACXNRaW05TnsmfFELlltBi6p
BASUDsxhwRnKPAfvDCTJEdtbPs7h5qU31Aej0yCyhez1M2EOY4Okm1PR0/Dr
l2vVcd057KcqrktcYUB16YL5TMwstqwxuc5SPwWW2gv+ZM0Z/ISra+Gy9wRE
7fX/clRqBou2JlHDzSagSVlwpyXvDK44lxzVrjoBOpIqjYGD0zi44tjZoulx
kN24tqk9eBovfpA+Omw9Dgu0+QyPbgaWuSGZ1qM/Bvd05z+Xek9hXnbFKNN9
I1CtP2es8e8Uln43Vdm6ZQRYDGdbcw2n8KM1t0GnlWHwM59uTpWZwvbG0z+W
SofB89JEQ1jzJCYK3wi20RmGyyEDNHupSdzBKLUyih+EU80t+TwN4/ig5yml
gb+9EPq5mRxUOI7L387uF6nvhQZ6U+564jieJO5UvBveC8cGGrOXb4xjdNGO
xi/VCzoLdZkD28bx4iFCbu+xHlAVqkwuuD6GjXMFnpkkdoOYWW7kuS2jWPjJ
37i3HnQolHtUdox9FOfOCUZcOE6H06tO42qLI5i6O5BxeCsdQl9K7+f9OIIl
DlHqXtE6YJ0RM1TmOYLZBznkK4kdMHnHV0Wiaxi7cHFEXCn+Aq7GT+IqFIaw
YUdHo9i5Vsj8bjD3lHUIs1xaCBPha4XReA7k2jOIw4sb/vGoaAGLca8pyYeD
GGKpFEfZFgAfG81AxgBe0n+Vwfq9CYRSFelHMvrx/Vs2e3dkNkLhzzpiw85e
HLCcYbdoVQfhb1KqdVZ7cLuu0RWCWB242ATcet/Sg01cwxhPW2thZ/3+vhTP
HvzpRJfB5qO18Ozp2/Q7DV9xnkzUy9dqNXBb44n2nqvd+Lh1IeXXziqwYFxb
ykLd//E0+d1zggZ7Eg1SpcS6sWF/4cDVdBrMsXPwCFZ24VXq5k1UBRrYdHjS
GcQuHIqEt352qYQj7tYuL9/RsdmAgu9cQxlIymlJioXQsUNotnqZZRn87hH7
8siajuun7Lo9pkuh6HCbpg8nHQe/s2HkC5SCnPARNrOzHXg2PFde174YePN3
x/P8/oKNzZNkujWKIK1vImw6qBWzHQ79dWFbDvT6bU56sacVz6RVNG29mw2C
ksfzTUZb8F4rxUIPxlvwtMtsL4UW/OvD+/cb5W9Ab8J5S+haE1bdExzr7pkJ
jIXFZJJbI3bX2VzftP81SERKFQ5KNuIXWQsV50pS4bSaSU1USwNWdmRtCNJK
hZKbhRNrpAbs09IpUohS4OGKB6lpoh7XOxy4d8UhGUhsa+9crGrxeTTxInYy
HmxSSXU7eGvxAdlhurl4PETpWnV1lNTgsXRjVSPjOFgLpq4c3FyDwyMfm83X
PoMmvgBt/i9V2Gj+julEVzSw5OQZ0QKqsGfX9hwP2WjQMBq29VCpwv/aqSvp
3IyCxMjDlP5HNBxnURobIPEEvpK4w8+FVeL2uDv63ophgK5dya+aqcDpXoRj
WiuPIDPvU7uCfgXmi7sd6toUCj4aYVvW2Kg49IXE0t77IbBVR+TVc+9SbF5u
LLdfLwgogTdr2LpKcGG6rHOC3j2YraZPOO8pwSkdwz/dDSlAPR5LOrjwAWt8
2zzr7xoIF0wkivr+LcIGQeN+on98YG75h9at2nc4U4CYxnbVG/yetWHBXe/w
rsovfZYMT0jsozQdnizAPjE7bmlzeYCSv7VJn14BNi57092U4Q7lUprdHhn5
+DChVb/a/AYUNbXXGX/JxetKZTmtOdeALhT8hRKVg2MLnkwpmrnAsrnWwPsz
2fhKULzOuU1XQH046fu2rixcJXpAd2f/RTDZdYbFODYT67a3f6uacAA3Zy5+
imXGfzwnVJK57SHv+1VZRu9r7ES7Y/VLxQpataTI2xJTsX6OWso7bktY8O84
YHQhBb/S1JMVEjUHgdpgvbuSr/B16/JBfhNTsBTxeH0ZJ2FHbZmsMwHGEJvY
W956+AXuWwvnacUG0CV3uEOj9jnWYVIHQ/7VA9GCjJnnenH4kVS2fJDzEThz
UJCNtfEpDhcubQ3I0oaoOg9xp5PReOhM4l5v3X3w2bhPtaUlEnNxswUz09RA
suhe5KXkx1jEmh7QnaAACQ2nsXraA9zwKKu+xVsa/hnYvrCeRcF2OoSqR3Vi
oDjWqfXsgi8mnwvdu3GJAHL8brEqTjdwU8ge5/75bzqBdHn6tpoL+MRkE59+
bpOOEnHAmVNZF349S9XivxGv08WkJAmtXAYO3x9LCb5jOkvGu79dd/cELV5N
y8k7Gzq+0XqfXDQCQWY7l9m9K0Kw7u+TkES+D1sDuEsiBSQg0Dn7agcpFA6Y
8Y58dtwF7BZD2gS5CEg4JabVZ6ICNVIPH7wQigLLGJHCm44aEPRMxm1feAxo
fZcouH35AOjxUy2/8MXC71H6KdZ4BASK+WGXh/FQH9T/ntNeFxp+LShwEhLB
zzYt2uCxPoReCxFJCnoJ0jfJk21bDSGdGXlH4m4y9NhWdBlwmYCTE+nSh/UU
aL5LMmQ+tgB9Ga/z97Rfg/df5lDR83MgP1BjdNovDWLFtub802sNM6YX9s2s
ZkCSgJ7v8E97+CTwRrF4fxbYcbiUso38C28bfu4I8noDNidooj/GHOGqTiS3
5I9s4K38LWOg4QyGq/1/ZvbkQun8SGf23augUqTALHbPg1SXlbShKVdYiRmZ
k1/JBzGFvtbzGzeglNe3s/rWO/gzXnZL+K0XJCuLdeTJFIGDKqWa7awPBJ/O
+5zYVgQRTKPVMGFfMHs21uSp8AEMO1d2uhf6w5L0qWrSQAlICR8vKzG5B926
k3hLaCn8DqNxizsEQaVTYAXHvjKg1h06Ve9zHx7lFJUMRpbDtKN2IQE/ADmt
7XlRupXAfsV2bderx8BvXZwdwKwEzoqFpfnZMFj2N3lz9SWG+abAfjadCLAb
rTaV9aOBZphFI8+fSFCR/2X4t7MKRLWjtRkj0dD4zla34GEtHJcxkuy3fg6H
6pRqdg/Xglvq26qMQwmQ37V6+KVmHQhSQofEpRLh2Wo0PBqrg4SzzaFM5gu4
CA0HHLU/goB6vnHxcDJsfFJVE2c2gj6r43AbIQ3c+//mRRz/BG45ksHTMWkw
Of9JhevlJzDjFr/SJZsOzUKOSssGTXDkU9ukwvEMeG4Rv7vldTN0+B+rKk7N
gr2jrJJ3Ldsg943JN9eiXFApO8tUzWoDX7ZeO8MzeSAXlVM7vNoG0YPk99XL
ecD3KntvsuFn6BROIZQm5sOf05b9GwufodztQS1ztgAG8vMUsFo7UJ8+awzJ
L4LexPObtpxvB75xPXIe/3voCuH860ppB//vA4RXV95Dq53VZ8mOduixoglP
7foAlUIEL3+PDrDStQj5k1EMSW42tdrFdIjzq2cxbC+DRGue3KdDdDCeH40h
HSyHOP2i2HlCJ5CkJhM6XpdDpBSvywvLTjjTnMwWcpsKgZ/fC/9d7YSbOlPq
t8mVYK8qYEs91A0/da2J1UM0kF0qXz1Q3QMDNh+Et1Brwa/laND3+R6IChy4
V8xWB11vmgRzxXuhll50s+1EHYQ69slK3+iF56IezY49dbDUu2ZIkOoDwjcN
B6X1eqis00rpuNMPP2VpktI2jXA+odjgqtYQSF7805fp1QpF3tC5y3EI9nUq
cGi1tIKgxUfbocghaPImvEGybVAl1O1hyhgCh7Mdrh8+t4HoUV/jxJPDoFhq
sfAi7jP4ljz3oawNQ1bE+51nOdrhRGpPi5HlKDSRgt/FcXfC0v3cS3XXRuE8
SfbIvFYnxF2+t3Hw3igE5qFLvi6dwFBWVlPIHYUIg7+uum2dEFISGMPOMQaF
NX6Uh/Fd0NCy26okbwz4qmMKhvZ/heMrtxjShAngX5RXpab0wTFDEfYf76dA
jvNG9/MnIxBuz8NcbZwC4xJWSdO8Efh6i2VofWAK/vRMusm0jIDzy4Uybi4G
dF3OPSjIMwrhi5/cJSwYkFik7ihCGYWvT+6NHv3JgBscQtwt3mPg3PW9Kkpz
BtTvbw/j85mACNvuQNXiOZDgC4rJqZ2G4LlDMNk8BwdjGucKZ6fB3yflb8Lo
HNw121PWKTIDrtHXbhME5+HO7ZtFN+1nwOgju8fgxXnQsE6XE2aZBUGyqtNj
kQVI8exibT8yB+HrIYaMa4vgTbCLdhlcgI9G2wVOizAh5NRj4Q3NbzAvLebf
/nwZ5rx1eMM5V+CWh6J9xOafsBr1YCvJfx26+4VMLzWsAI+Bg2+gGjuy8zk0
RTj1G2ptq3+zniCgGsV9oTWc6yBNmc9uI/EjOR4q47U+C5q0MXgdHSWEtlNd
jnGGsKLmDpmwiL2bEMsaW5b7KBta+5EyyWWwGf0yqbCp28WBsnerx9bbiKM+
Ddttu4I4kWvizeadixLI7ayQsEw/F9p/gVMp3kwKiceMW3Js50Yp0fs7kxVl
UK5VcsayNw9S24gartPbic5qB+g3VPCisJzHLE2WcqjA5prMgT986LSTlMol
H3m0wnuUvdRcANXcX1nRHSch0y8HNbfHCSInPqM+HqSMeA/yVVFfCKLiHA/3
JgNlVPW696R1qiDaOx/CHmGujFS9fewTcgXRx6O3N0m4KCPBHcWPxesEkbpx
4IzhM2XUeFV9TOybIJIbEr8lNK+MELdCpOApInoyRvkjlKiCVm6sbM01IaKf
ihe+CGeooLy+j2mGZ4koVHhXsmihCpLMu1T+2IGIjhfdUZRqUEF/zF9P8voQ
Ebel6arRdxVUnLpDm5BORJn/PLzBZ0hGrgKLH9PfEtFmDe0JRUsykvOqNNUr
IKLiuUFTo3/JKMbgwuX7VCJ6sHd2W7wPGbkzn0ezdxDRzV27HfXSyYhk5SyZ
+pWIrpD0Mz0LyGikVivryCARhTVbTGRSyeh03NfKu9NE5Mw4ZLipg4y42TJP
SC8SkYyDqPfJQTLCLl502nci4vHpSbw/TUaenXq2dmtEJK38uLzqOxn994eg
//2Q/wMMLnsl
      "]]}, 
    {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
4+swoQ==
      "]]}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->{517.5000000000006, Automatic},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-4, 4}, {-2, 16}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.6804509462533226`*^9, 3.68045102457915*^9, 3.68045108312936*^9, 
   3.6804512244298472`*^9, 3.680451493924821*^9, 3.6804515726345844`*^9, 
   3.6804516383805337`*^9, 3.6804517463633504`*^9, 3.680458469311327*^9, 
   3.680458615213007*^9, {3.6804587339186745`*^9, 3.6804587496617384`*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Learning \[OpenCurlyDoubleQuote]y=x^3-x\[CloseCurlyDoubleQuote]", \
"Subsubsection",
 CellChangeTimes->{{3.6804507867252703`*^9, 3.6804508078216476`*^9}, {
  3.680450965765478*^9, 3.6804509705495915`*^9}, {3.6804510395973988`*^9, 
  3.6804510410773745`*^9}, {3.680451762444683*^9, 3.6804517909650903`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetChain", "[", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"DotPlusLayer", "[", 
       RowBox[{"10", ",", 
        RowBox[{"\"\<Input\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"ElementwiseLayer", "[", "Tanh", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"DotPlusLayer", "[", "10", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"ElementwiseLayer", "[", "Tanh", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"DotPlusLayer", "[", 
       RowBox[{"1", ",", 
        RowBox[{"\"\<Output\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], "]"}]}], 
     "\[IndentingNewLine]", "}"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6803580407480574`*^9, 3.680358081136017*^9}, 
   3.680358318545034*^9, {3.680358450833645*^9, 3.680358454922589*^9}, {
   3.680358520949281*^9, 3.6803585273934994`*^9}, {3.680450694661951*^9, 
   3.680450695821642*^9}, 3.680450816894287*^9, {3.680451119407272*^9, 
   3.6804512049501567`*^9}, 3.68045125579736*^9, {3.680451324085854*^9, 
   3.680451472030263*^9}, {3.680451504061485*^9, 3.6804515104773593`*^9}, {
   3.6804516629410973`*^9, 3.680451677661211*^9}, {3.6804518693813314`*^9, 
   3.680451873732929*^9}, {3.6804588314755926`*^9, 3.6804588350913815`*^9}, {
   3.680458980836862*^9, 3.680458982476282*^9}, {3.680459102462309*^9, 
   3.6804591305899744`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetInitialize", "[", "net", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.680358433289722*^9, 3.6803584364737926`*^9}, 
   3.6804508183659563`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"x", "\[Rule]", 
      RowBox[{
       RowBox[{"x", "^", "3"}], "-", "x"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"RandomReal", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", "10000"}], "]"}]}], 
      "}"}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.680358323212538*^9, 3.6803584031626587`*^9}, {
   3.68035846091537*^9, 3.68035846465798*^9}, {3.680358535081916*^9, 
   3.6803585378656015`*^9}, 3.6804507086856833`*^9, {3.6804509096300173`*^9, 
   3.6804509097505503`*^9}, {3.680450994789851*^9, 3.680450996390175*^9}, {
   3.6804510501735764`*^9, 3.68045105076607*^9}, {3.680451687591172*^9, 
   3.680451688462194*^9}, {3.680451800068883*^9, 3.680451800605103*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomSample", "[", 
   RowBox[{"data", ",", "5"}], "]"}], "//", "Column"}]], "Input",
 CellChangeTimes->{{3.680458852496323*^9, 3.6804588601465983`*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{
      RowBox[{"-", "0.821900674432078`"}], "\[Rule]", "0.2666897401956735`"}]},
    {
     RowBox[{"0.5366031608597313`", "\[Rule]", 
      RowBox[{"-", "0.38209206253796696`"}]}]},
    {
     RowBox[{
      RowBox[{"-", "0.8512564957931894`"}], "\[Rule]", 
      "0.23440401328443916`"}]},
    {
     RowBox[{
      RowBox[{"-", "0.8782380809292558`"}], "\[Rule]", 
      "0.20085118127677437`"}]},
    {
     RowBox[{
      RowBox[{"-", "0.8301255694720528`"}], "\[Rule]", "0.2580790157806274`"}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{3.680458860700715*^9, 3.6804589875632367`*^9, 
  3.6804591349714513`*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"result", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", "data", ",", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "250"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6803583683570848`*^9, 3.6803583753528333`*^9}, 
   3.680358427497135*^9, 3.6804508205499535`*^9, 3.6804511683417273`*^9, {
   3.680451541565759*^9, 3.6804515462452507`*^9}, {3.680451576949438*^9, 
   3.680451577173006*^9}, {3.6804518818292227`*^9, 3.680451882277031*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"encoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Inputs", "Input"}, 
             "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "2"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["3", 
              GrayLevel[0.5]], {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "3"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["4", 
              GrayLevel[0.5]], {"Layers", "4"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "4"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "4"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["5", 
              GrayLevel[0.5]], {"Layers", "5"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "5"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "5"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {10, 1}], "Biases" -> 
               NeuralNetworks`TensorT[1, {10}]], "Parameters" -> 
             Association["Size" -> 10, "$InputSize" -> 1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {1}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {10}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "3" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {10, 10}], "Biases" -> 
               NeuralNetworks`TensorT[1, {10}]], "Parameters" -> 
             Association["Size" -> 10, "$InputSize" -> 10], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "4" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {10}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "5" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 10}], "Biases" -> 
               NeuralNetworks`TensorT[1, {1}]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 10], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Layers", "3", "Inputs", "Input"] -> 
           NetPort["Layers", "2", "Outputs", "Output"], 
           NetPort["Layers", "4", "Inputs", "Input"] -> 
           NetPort["Layers", "3", "Outputs", "Output"], 
           NetPort["Layers", "5", "Inputs", "Input"] -> 
           NetPort["Layers", "4", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "5", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`EncodedType[
             NetEncoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Output" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{332., {70., 78.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.68045116906149*^9, 3.680451213600884*^9, 
  3.6804514859343963`*^9, 3.6804515211315565`*^9, 3.6804515673887005`*^9, 
  3.6804516191834087`*^9, 3.680451739665532*^9, 3.6804518478376617`*^9, 
  3.6804519750166707`*^9, 3.6804589392693663`*^9, 3.6804590454193497`*^9, 
  3.6804592387353334`*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"x", "^", "3"}], "-", "x"}], ",", 
     RowBox[{"result", "[", "x", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6803583789252787`*^9, 3.6803584162012367`*^9}, {
   3.6803584735966024`*^9, 3.6803584917210913`*^9}, {3.680358552786993*^9, 
   3.6803585569379997`*^9}, {3.6804507381376443`*^9, 3.6804507479426928`*^9}, 
   3.680450929230296*^9, {3.680451013709833*^9, 3.6804510138222623`*^9}, 
   3.680451076397651*^9, {3.680451527751148*^9, 3.6804515330462055`*^9}, {
   3.6804517309652963`*^9, 3.680451733757086*^9}, {3.680451851701318*^9, 
   3.6804518594453087`*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1:eJwtmXk0Ve/3x2mUigZlSEgRkhQqKbsBSZFEyqxBUiFRokGmkCkklaJMFYVS
CtlISMbLvfcYwj33mkOKjH38nu9av7/ueq3n3GfYz3u/9z7rrDnpYnJmFh8f
XyU/H9//flVgZd/MzBDy8fnkF/V6aLtMrA2amCR8aCJw7QpTyHq3Wf7PKOEF
fm47l5yGLQqGJ7v6CU94+2XPc4dtS/2bq9j/48dXSv74wW7ucOXDzCGUeWUX
u6gmGkzuVKer2Q5h0Y+TWwX8kuBqrf/Fs4WDWBRzQ8Nn8C00Ni7sK7YfwDiL
hAj2pRJYXeQisk3yJy6x2fchPuMbVC3TcN8h+hNjQkKDa8u+gdeZyYZdy35i
ItPx33DHN2AJBkTrCPzEn6u9GXNXVEKk2aNlJiP9eIHp6HfueiXM7i9dcrGq
H00Z3nfX6n+H3hUSi5Ou92NytGjYlYYqeH++dK7wjz4UyKEltPJqYbuM8+ZU
dh+qZ7UxDBm1kNcoar2L0Ye/vP6tMeqrhaJd53POl5Nxg12VCxfXQaXwslMV
2X14fI+S+NmdddDxzrbodmAfFpkYVDg8rAPB6UmvkU19uN2BOvvgUD3YhW7+
1eTbi3qu7DC5OAZ45UQFVt/oxUX6PacOPGPA/dY/ksWevXjMoyX+zCsGVCp/
OPDCuRcDO1x33SlggFr1jqQrFr2ofy7ylEsHA+YJ6RxbvqUX75eeud8o3wAZ
EccKDnF6UD05YPW/1w1Qlptrsru1B88OVGipfmgATrtYrxq7B5UWbRqwLGyA
laotK1ZV96Bt83nhJzUNcKvO1qX3Yw/GKnZ4lw02gMnSc7KBkT14avlVvdyN
jTAe5R2E0INnVnqprkpthG7J4j69HT04a//iUzOvG4GVOs+wRr0Hr1NjK1re
N8K7vHtLfyj2oKitz5xrXxvBmU57NLm8B3VKVu04zGsE7ubGDI2ebixadfK9
gwwTauqU69MjuzFnxMbycBQTCizc1NTuduPMl2/G6x8yIZ2Xez8voBvjp0dn
jyUwIWh8r8U3r25s7oP0G6+ZsE/mBLfrdDeW+x5TU6hgwkeXgNE1mt34vMWd
/WeKCUlCbeJxnC7sFHzR5mbNgihLmK/Z2oW63k/WbjjFAt8XiSNNrC7MUe1+
3eLIgpN7T9WuqurC/8TyH8q5s0D2So9/wocu7HuuzW8dwoLnP34Ppd7tQoNP
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
      "]]}, 
    {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1:eJwt2XlYjNsfAPChbKGsXVFaxA2hjRQ6Y08q1U0oZcqWkFBkKSPJXoRulptR
WrSobK2cSSEpWmbmPW2aVpUlW1Si33G+v7/u/Tzf7Zzzvuednoe2xy6Hzf15
PF5mPx7vz39nItX2vr4OTP9Xa3RIHNrVPelkdw8zb5tiPEq7ZzjlayfEjwfF
IyM9G4+Wd8x8m8AEZDoyuKqYA9fvTUT8xs9FV1Kh/rvTHeRwoiTJeAOz0PH3
XbT/dfDOrY8/sn5lHtlIIhnanuf+4Y/lKf8VIA3xrjGm6u9Zv76SIvRge8EA
ldp2Vr9obCkSnDX8VBnUxuoj/i1HB++Hh5QEMAunisrR5Zqv6nn+zLzMhHJU
pP9wRYI3s/xJVjkyLjGP2efMzL9QXY4GKi9xGm3ELFKbWIGSw5xyretbWX1J
VAXqCj90EqNWqA+VoLfqee3LzJmFhyMkSBY30OaVCbNgRpQE3cu+MLJ2KrPo
cIoEeTfEX+0ZDX76UoIaDSXJs1vfsvmqg6ToVal+WdJ5ZmGEvxTlOu8xNj7D
zPM9IkVJTRmXs48za1mHSNHJrkXOLw5C/O1FKVqsta6xZRP0e3FHijJ3He/U
NgNbNUpRjPIbtcj6FjbfeLkMhbugQWY1zPLxNjIUlCD6VimD+C8HGfJYtPH1
hGJmrVQ3GdLZ1xp84yEzL99PhqJrv3TEnWEWp0fLkCh50LMHs6Ff8g8ZOt/t
ec/JAPoV9MqQcFmR6Mc0yJf245BAfvaQmRazsGUohzTHjDJ8pAT52Zocijqk
fr2grpnl6y3j0HUrwz0Vp5rh+YZySHeoVVFpMDNvajiHkl566Lw6wiyYFMGh
bOtL5YV+UD8wikOVtj+MHrsz80+ncEj1n0dfE8wgP/glh8JcVvgFtjWx/S5X
IEhV3aPkUBP40kCComoOTj5Qx8yrHULQHddk6V4pM3/dCIKKN6jM2ZYH8VEa
BA3eJP3+zxVmwYHZBAXtcPefugL6aXoQ9CbU7Xr2YmbRt00Emae7iFdaMIvx
VoK+dK4e7G0M9ZY7CXI/YhV5V4NZPtCfIH64cea8L41svt1Zgq7fN6gpfs8s
yA0lqEs2g+f2FuLaFwhKm6BnKaxhFlVeJkgzVp0UPIN4bxRBvzMGdNlcYxYP
SyPIuaq/et1lZvnIuwQ97O1DPuchPvI+Qd4Le06EH4d5vRkE1RZ9/IvbxcwL
xgTN/fBunqcX5K/OI+iSStuG7k0Q18knyNqxMX6CM8RjnxGUW8uZCpbA+jxK
CBrHk7p8tmAW9ntNkK9O+ZEgM/DVUoL0txY/vzUT1p9ZQff/SbymbRzU364k
6JBC4v49HxrYea9rouu94jZQ0Ao+0kyQx6zRl20amcVRLQRZuRy+q1cJ8ZJW
Ov+e7Yc3BeDW9wQNW6FwuBiD5R8I6nuToZSdzSyq+EhQi5K23uU0cOIngu57
fPVYeR3y//pGUEJX/Oe5/8K8RuproeuFU8KZhUmd9P3Ifvpfv5PMvGk/CNpn
d1C/IwjyG6i9Wmbm1AQwCy52EWQ/KpJk7AW/7SZoSYL11lhvZvnJHnr+Fv2+
h2+D+OSfBGl5eY323gDrseklaAxPM9rFmZlfST0oosJgxWqod/tF0Me8+ba6
KyHf5TdBDWs+14xcBi6nln6I3d7Hh/0u7KPPT03lVNUcmDeaV4nSUvP/KjSE
fnuoby31j3ugD/mvqM/srs8/rwPz/fpVosBBEQ6BGmBMvec/q/rt46BesX8l
2mLct2vdaKhfQu384t7vZcrgQGrbDZ7nTIbA+u5TL+xUV9dRhPNtpDY5U5ao
0lfPrKxQifS0Q8x+dTOLjKjVM8wL278x8xyoVWw6nEgHeCd1/8aY5qft4CDq
7/5rfe81M4vPU7crD1e4KWcWXKOuvZV3IbQa4jeoS833aR2WMWuJqAtKp6Vu
K4P8K9SZW+oWrCkGh1In9V4sXvIc1htIHRVu6WL0BPptpQ7X+9Wm+QjyV1KH
PE73H54J+dOpDzpuGfTzLuxPkdq7fXxEawrkV9LzcBe+1pUlQL8EaqfKGxa1
MbC/vdRWRj5rm6KY+WbU6Ax/z7srsP6f9PmYNI04++USxB9QT11QH9sdBv13
UE+MSMe8M9BPg3qwpcNX5aMQ96HP/5dIZ7jqYfAo6i/dX6Zo7Id+qfR9qk66
6Dx9J7O8kr5vpYqbfI08Ib6VusDVJNRsI+z3E31f76hI85avg/1+pu9zjGds
ta0j2Is6Ms+vc/Uq2G8dvQ9H96pO3bQU4hn0vjhya84LDWHeDHq/VhjoJZ7Q
h/UF0vtncaorP/RvmFf0nSC9eVd+XNcA29P7+zOqyi1rCJzPlC8EffqR6C9W
hH42nwlqsjsU/rxPzta/m34fXvVXfybtZBYl0O9H9BbXGV/qmeVV7QT9i2cs
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
      "]]}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->{550.833333333334, Automatic},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-1, 1}, {-1, 1}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.6804509250131807`*^9, 3.6804509297789345`*^9}, 
   3.6804510142546864`*^9, 3.6804510767099495`*^9, 3.6804512176141224`*^9, 
   3.6804514877764874`*^9, {3.6804515233176336`*^9, 3.6804515337227573`*^9}, 
   3.6804515693191414`*^9, 3.680451621840664*^9, 3.680451742628253*^9, {
   3.6804518567635612`*^9, 3.6804518600697737`*^9}, 3.6804519783103304`*^9, 
   3.680458943317133*^9, 3.680459113103657*^9, 3.6804592412002287`*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"x", "^", "3"}], "-", "x"}], ",", 
     RowBox[{"result", "[", "x", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "8"}], ",", "8"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6803583789252787`*^9, 3.6803584162012367`*^9}, {
  3.6803584735966024`*^9, 3.6803584917210913`*^9}, {3.680358552786993*^9, 
  3.6803585569379997`*^9}, {3.6804507381376443`*^9, 3.6804507479426928`*^9}, {
  3.680450929230296*^9, 3.6804509457342772`*^9}, {3.680451632502454*^9, 
  3.6804516366058693`*^9}, {3.680451982381126*^9, 3.680451982949171*^9}, {
  3.680459286335997*^9, 3.680459292655905*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
YfK2LQ==
      "]]}, 
    {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
T7BHKQ/9D9cctEU=
      "]]}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->{517.5000000000006, Automatic},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-8, 8}, {-43.44906634369286, 42.80887884606015}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.6804509462533226`*^9, 3.68045102457915*^9, 3.68045108312936*^9, 
   3.6804512244298472`*^9, 3.680451493924821*^9, 3.6804515726345844`*^9, 
   3.6804516383805337`*^9, 3.6804517463633504`*^9, 3.6804519860853086`*^9, 
   3.68045895955268*^9, {3.6804592693123207`*^9, 3.6804592933401585`*^9}}]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Multilayer NN (two inputs, single output)", "Subsection",
 CellChangeTimes->{{3.680452006764329*^9, 3.680452019068413*^9}}],

Cell[CellGroupData[{

Cell["Learning \[OpenCurlyDoubleQuote]z=x^2+y^2\[CloseCurlyDoubleQuote]", \
"Subsubsection",
 CellChangeTimes->{{3.6804507867252703`*^9, 3.6804508078216476`*^9}, {
  3.680450965765478*^9, 3.6804509705495915`*^9}, {3.6804510395973988`*^9, 
  3.6804510410773745`*^9}, {3.680451762444683*^9, 3.6804517909650903`*^9}, {
  3.680452041620799*^9, 3.680452051260621*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetChain", "[", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"DotPlusLayer", "[", 
       RowBox[{"10", ",", 
        RowBox[{"\"\<Input\>\"", "\[Rule]", "2"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"ElementwiseLayer", "[", "Tanh", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"DotPlusLayer", "[", "10", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"ElementwiseLayer", "[", "Tanh", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"DotPlusLayer", "[", 
       RowBox[{"1", ",", 
        RowBox[{"\"\<Output\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], "]"}]}], 
     "\[IndentingNewLine]", "}"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6803580407480574`*^9, 3.680358081136017*^9}, 
   3.680358318545034*^9, {3.680358450833645*^9, 3.680358454922589*^9}, {
   3.680358520949281*^9, 3.6803585273934994`*^9}, {3.680450694661951*^9, 
   3.680450695821642*^9}, 3.680450816894287*^9, {3.680451119407272*^9, 
   3.6804512049501567`*^9}, 3.68045125579736*^9, {3.680451324085854*^9, 
   3.680451472030263*^9}, {3.680451504061485*^9, 3.6804515104773593`*^9}, {
   3.6804516629410973`*^9, 3.680451677661211*^9}, {3.6804518693813314`*^9, 
   3.680451873732929*^9}, 3.6804520552372437`*^9, {3.6804594360768704`*^9, 
   3.680459493258933*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetInitialize", "[", "net", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.680358433289722*^9, 3.6803584364737926`*^9}, 
   3.6804508183659563`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"x", "\[Rule]", 
      RowBox[{"x", ".", "x"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"RandomReal", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"10000", ",", "2"}], "}"}]}], "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.680358323212538*^9, 3.6803584031626587`*^9}, {
   3.68035846091537*^9, 3.68035846465798*^9}, {3.680358535081916*^9, 
   3.6803585378656015`*^9}, 3.6804507086856833`*^9, {3.6804509096300173`*^9, 
   3.6804509097505503`*^9}, {3.680450994789851*^9, 3.680450996390175*^9}, {
   3.6804510501735764`*^9, 3.68045105076607*^9}, {3.680451687591172*^9, 
   3.680451688462194*^9}, {3.680451800068883*^9, 3.680451800605103*^9}, {
   3.6804520685672483`*^9, 3.6804520945170126`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"result", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", "data", ",", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "250"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6803583683570848`*^9, 3.6803583753528333`*^9}, 
   3.680358427497135*^9, 3.6804508205499535`*^9, 3.6804511683417273`*^9, {
   3.680451541565759*^9, 3.6804515462452507`*^9}, {3.680451576949438*^9, 
   3.680451577173006*^9}, {3.6804518818292227`*^9, 3.680451882277031*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Inputs", "Input"}, "Mouse"], 
            "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "2"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["3", 
              GrayLevel[0.5]], {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "3"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["4", 
              GrayLevel[0.5]], {"Layers", "4"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "4"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "4"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["5", 
              GrayLevel[0.5]], {"Layers", "5"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "5"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "5"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {10, 2}], "Biases" -> 
               NeuralNetworks`TensorT[1, {10}]], "Parameters" -> 
             Association["Size" -> 10, "$InputSize" -> 2], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {2}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {10}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "3" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {10, 10}], "Biases" -> 
               NeuralNetworks`TensorT[1, {10}]], "Parameters" -> 
             Association["Size" -> 10, "$InputSize" -> 10], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "4" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {10}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "5" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 10}], "Biases" -> 
               NeuralNetworks`TensorT[1, {1}]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 10], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Layers", "3", "Inputs", "Input"] -> 
           NetPort["Layers", "2", "Outputs", "Output"], 
           NetPort["Layers", "4", "Inputs", "Input"] -> 
           NetPort["Layers", "3", "Outputs", "Output"], 
           NetPort["Layers", "5", "Inputs", "Input"] -> 
           NetPort["Layers", "4", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "5", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`TensorT[1, {2}]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{332., {70., 78.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.68045116906149*^9, 3.680451213600884*^9, 
  3.6804514859343963`*^9, 3.6804515211315565`*^9, 3.6804515673887005`*^9, 
  3.6804516191834087`*^9, 3.680451739665532*^9, 3.6804518478376617`*^9, 
  3.6804519750166707`*^9, 3.680452224380748*^9, 3.680459622369248*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{
   RowBox[{"result", "[", 
    RowBox[{"{", 
     RowBox[{"x", ",", "y"}], "}"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"Mesh", "\[Rule]", "None"}], ",", 
   RowBox[{"PlotPoints", "\[Rule]", "50"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6803583789252787`*^9, 3.6803584162012367`*^9}, {
   3.6803584735966024`*^9, 3.6803584917210913`*^9}, {3.680358552786993*^9, 
   3.6803585569379997`*^9}, {3.6804507381376443`*^9, 3.6804507479426928`*^9}, 
   3.680450929230296*^9, {3.680451013709833*^9, 3.6804510138222623`*^9}, 
   3.680451076397651*^9, {3.680451527751148*^9, 3.6804515330462055`*^9}, {
   3.6804517309652963`*^9, 3.680451733757086*^9}, {3.680451851701318*^9, 
   3.6804518594453087`*^9}, {3.6804522299407773`*^9, 
   3.6804522526524506`*^9}, {3.680452378628501*^9, 3.6804524026444826`*^9}}],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1:eJxlnWd8VFUXryNKRyw0GxIUUEQBRRRUSESagAqoiNRIU0AQUEBBMTTpRYog
CIRepCO9DZ3Qe0hIyJCeTMpMekK75OXmv56595O/ed71rr32Pvs8zJycvXfV
Hj+0713Ex8cnvKSPz6MP/lvbr2LS/ftpBwv/+wAFvj3uvt/jLSY6l25JJXeM
/+OeX/Kn+dc+6plC7h/wy12/0x2+PxtbPpnct2jPO37rut08MuF4klf+4q1u
+03q03ZPzZ8TyYNWvp3v993Aw5tP10zwyl//1Ty/FsPeXj3gRhy5z/5Xc/1q
jFq16IlpseTO6w1y/Ir+8cycLY1jvOIvfJ3tFzNt8uTP3VFe+W9OyfI7MvdO
YNbSW151Tj6X6bds0cDh8z53kgfk+Gb6FWl96MaQUje9eK0xGX6OTitP7hhw
wyt/I0+636h+k7bnX7juNT5DBqT7fTBiwLLGb1/zqr9ltscvf1K7GWPmXfbi
I6d4/Hb9Xf/X4/kXvOrMed3j52pf71L5fWe8+NUwt1+fIbf//WfMCa962sx1
+93688j4ah8f9opf3cXtt6tHpYMdq+zxrv9Nt1+Xjz6LvdBxk9d86FnO7Tdz
TOR8Z+wcr3EY8Kjbb/7o/3E/Xt+lj7j9nE3+l4fc8V5Zt9+Ih+2S+/So6fY7
/LBOr/jan7v9WjzsF3nAyiluvzMPx4Hcd9clt9+ah+Pmlb/lqx6/pIfj7JXn
pakev9cfXhev+GL3PH4DH15Hr34t+y3db/PD604eOL9Uhl96q//NEy/+24oM
vwUP55VXv0JbZfrtfTgPyZ1v3M30C384b73ypO7J8rs7/n/z3Ct+0thsvxcf
3hde4/Bdhxw/v4f3kVe7iW/l+gU8vO+84vs/k+c3+uF96sWbFsv3W/bwvvbK
c+p2vt+Rhx7wim+Xe9sv5qE3vOJfvX3Hr+hDz3jFL3/0XuFnr3F+4qn7+lzo
p4LrUrbdPfkK3Hnhs7vyFbjD5XdHvgL3Xf7KbfkKPGDk4/nyFePn5OTKV+D+
z7py5CvWGefKlq+YZ8CdLPkKPPBa5Sz5ivW0bJspX7G/jWZnyFfMHxKbLl+x
zudapMtX5NV3eOQrjluTtzzyFXhQ7h63fMX6i7V1y1fMcyAqTb5iu36N0+Qr
jluRbanyFfMs/zBVvmL85aQU+Yrcf1OKfMV2/5yRIl+x/q+npshXjH98VYp8
xXqKRqTIV2z3xzdT5Svm77U8Vb5insNvpclXbPfLyDT5ivHdv3DLV5wPH51w
y1e8XiVbeuQrxne45pGv2O6xwenyFedh1LMZ8hXn21vnMuQrtlt7eqZ8xXZb
fZ0lXzG/p3a2fMXxnFA2R77iOPTLyZGvOM45CbnyFfnYqDz5iv3tEZ0vXzE+
Num2fEXeJfeOfMX6K5aWxw4WeqigzlKv3FUceceX7shX4D6nnrgtX5GvysqT
r8D9A8Jy5Svmzz2SI18xfsjObPkKPOi3XVnyFfP0Ds6Ur8B967sy5CvG362c
IV+R1/kmXb5inoRtHvkK3Fmngke+4jjUHOeWr8ADqvm45SvGd3kqTb5iPRXf
T5WvwAP7/JYiXzHP1OvJ8hXzPPJJsnxF3uuGS74i/26cS74iP9DSJV/xej1V
0yVfsZ6M6i75innC/VzyFftVY7hLviIvecYlXzHPX42T5Su2u/9csnxF/vGv
KfIV609onipfsd3qtdPkK8bvesYtX/H6PrHGLV+x3R1NPfIV55Vfqke+Yrv1
VqTLV4x/uk+GfMVxaF8vU77i/OxZOku+Yv2bUrLkK9Y/LzRbvmI9P5/Lka+Y
f/3pXPmK8RMv5MlXzN81PF++Ih+Relu+In+j2F35qtA3BeMQV+yOfAXuf/Ne
vv7/4EGHE/PkK8aHns2Vr8B9xm/Jka/IVy3Ilq9YT6XpWfIVuLPrjEz5ivFL
gzLkK9Zz7nC6fMV2Y7M88hXjWzf0yFfkz091y1fggYfC0uQrxo/dlSpfMb7m
5hT5ivVcdyTLV+QvJbnkK+a/X8slX/G6bP8jSb4CdxzKT5SvmOfkxET5inWO
eDNRviKfnpUgX5FvuJogX4EHDLiUIF+xnhbJCfIV+7vw5UT5iv1a9OD+KfQV
83znSpSv2C/3yCT5ivHFX3PJV2y3R5ZLvmK/ZkUky1eMLx+VIl+RNymSJl+R
b3vRLV+xXx2C3fIV210Q6JGvOP8fbZouXzG+bLkM+Yr9fSMlQ74iv3AxU75i
PV0cWfIVx7Permz5ink27cqRr3jdax7Kla8Y73ngsUJf8f79Oj5fvmJ/1z+q
710HC71SUM8nnnz5irxcXJ58Be6cdC5XecEDszbnyFfkq2Zny1fgAV1+zZKv
mD/4h0z5CtzRZnCGfMU8CWPS5SvW/8NKj3wF7nP+ulu+Yp7eL7jlK8bPuZkq
X5FXWJoiX5EvG5UsX7GerKEu+Yr9avjAM4W+Yp6ymxLlK/JB7gT5innWtkqQ
r9huowPx8hXzXGgdL18xvkJmnHzF/Ed2xslX4L5/zIuTr5g/Y3acfMX5MGFD
nHwFHrQkJk6+YvyIhvHyFfmb6+PlK9bj+CBBvmL8vaQE+Yr9WrUjUb7iOHRY
kiRfkU9b4ZKv2N/tx5LlK/LKRVLlK7br83WafMX6j/Zyy1esv2dNj3zFeGee
R75i/m1X0+Ur1t9uX4Z8xfn/8oZM+Yp8xuos+Yo8Y122fMXruHZHjnzFdoud
ypWvGP91TJ58RZ72mL53HSz0x/++Fz3wUqGvwH3nXs+Vr8CDDh3Ika/IlyzJ
Vnvgjv6js+Qrxh/tmylfgfu82zVDvgIPyOuWLl+BB6YM8shXbPfMbLd8xfyJ
09PkK/KfKqbKV+Tf7kuWr9iuc5RLvmJ8oy5J8hXH2f/zRPmKear0TJCvmCdw
Srx8xfjeZ+LkK8ZXqREnX3Gc3/w7Vr4i/6hGrHzF/CXPxchXjH/vzxj5iuMc
OChGvmI9Q7+Pka84DrPHx8hX5I32xchXrGfLk7HyFdt9cmysfEXeoVycfMX8
vQ/FyVeMz58aL19xvh0cmiBfeY3DyET5ivkj/0mSr1h/iTCXfOXV7psp8hV5
0vJU+Yp8ZCW3fEX+TKJbvgJ3tjruka/Yr0kb0+Ur9qvZ0gz5ivkTFmXKV+zX
1eVZ8hXH4but2fIV8+SezJGvGB8Slytfcf60K63vXQcLPVFQ/9MJufIVuG/a
tRz5CtyZsydbvgIP/HZBlnzFPH1GZqoO8KAhPTPkK8ZndkiXr5j/dkePfMV6
WvV3y1eML145Tb4C90kalyJfgTuul0mWr7za3ZokX5EPG5ooX4H7b2ifIF+x
zv4fx8tXHIe0jnHyFa9LbGCsfMX8Xx6Kka+YZ9ZzMfIV2315WrR8xf5uejZa
vmL+ZEeUfMVxmzE2Sr5iu017RMlXzLO8a5R8Rf7asCj5ivnfXx8lX7HOSj7R
8hXjYwZHy1fkSx+Jka/Ybv1NMfIV+XcjYuUr8tgecfIVuf938fIV50PmpAT5
ivV/eyJRvvKah1Vc8hXz7JmVLF+x3ceqpMpXjI8+kiZfsd26Drd8xfmwb61H
vuJ9V2ZxunzFOqf+kyFf8bqvWJEpXzHPju1Z8hXrfO58tnzF+GruHPmK9Vd9
Rt+7Dhb6oID/kJUjX4H7LLyVLV+BB64+kiVfgQcEL82Ur8D9y43JkK/IY/um
qz5w39FdPfIV67zS3S1fsc7isanyFePrvZ4iX7H+zXNc8hXrKVM5Sb5i/v5H
EuQr8qzx8fIV81ToGSdfMX7J17HyFfn172LkK/IhM6PlK9b/y4Uo+Yq8ac0o
+Yq808Jb8hXr7PnKLfkKPKjcOad8Be6sOtMpXzG+wUCnfMX63d855SvOk+OB
TvmK9VTZ4ZSvWH/jkrfkK17fViNuyVesp1XJKPmKvOaOKPmKebYFRstXrGfx
g+tS6Cv2a9yAWPmKPHF6nHzF+ex3Jl6+YrvOaonyFdutND9JvmL8C9WT5Suv
+XY6Rb5i/LOT0uQrjv8zm9zyFetcs8IjXzF+84p0+Yr9XbQxQ77iOF86lClf
MX5jRJZ8xXbHP2K+YrurX9f3roOF931Bnq+eMF+BB93PzZKvwAMbhGbKV4x/
Y0eGfAXuCJ+bLl+BO8f/5pGvwP1bDnarbrYbGZ8qXzG+RNkU+YrxeV+65CvG
P38wUb7iOHhaJMhXrH9hapx8xf423xIrX7HdntNj5CvwgLPjouUr1nN+dpR8
xTy+e2/JV+QX853yFetv+OB+KPQV8zsmRcpXzBMRdFO+Yn/rpETIV+C+1QZF
yFfsV+laEfIV232mSoR8xfzNP4mQr5g/YEeEfMU6UzvdlK8Y3+L9SPmK8Qdq
OeUrjs/uEKd8xfheD3xR6CvWP2pilHzF6756arR8xfyDN8TIV8zfPilWvuI4
bGkSL1/xvojdniBfMX+9j5LkK/JTiS75iu2eX5MiX7Hdr35Pk694Hd/c4Zav
WM+QnR75iu3eOpwuX3F8YkIy5Cvmj8zKlK94HWu+kC1fsf7yreSxg4X3dwGv
/E62fAUeMKSy+YrxPncy5Ctwn6SQdPkK3LfSg/4W+grcf91it3xF3ri6eZb5
m9ey/oM7mrd3yVfgzuILE+Ur5g9/LEG+Yp6GD/59LPQV45vUj5WvmL9qbrR8
xfj2V6PkK47DttO35CuO59wwp3zFPNsfccpXbLflmJvyFfP/8laEfMU8j1cI
l68Y/1mtG/IV868ZFiZfcfxH54bKV8z/2tZQ+Yrz5+KKUPmKfOjFUPmKPLJB
mHzFeoJuhMlX4EGP77khX7GeplfC5Sv2t9ZrN+Ur9mvo3kj5inmuHHHKV5wn
pU/ckq8YnxcXJV/x+r74cox8xXZTHvwOLfQV+3UsJU6+YnzuiAT5ivxw1ST5
iu1+ccslX7HO87tS5CvG+61Ok684/peuuuUrxg+L8shXvI55uenyFeMdz5iv
yF/5MEu+4jiPGSyPHSy8jwvyF++XJV+BO9/9LFO+Avf/6HXzFbjjw+LmK/Ki
cW75CtynxkL7vcr808ba90jGd5/skq+86tlq4wseeOt2vHwFHvRTnzj5ivH9
3DHyFeuPnhctXzFP2c5R8hXz9G1wS75i/WG1nfIV6/9+5E35itdlRHC4fMV2
i7W8IV+xziM5ofIV44+GXpeveH3bp4XIV2z3UsMQ+Yr51+y5Jl+RV/vxmnxF
PqTXNfmK+WfOuCZfcXw+zromX4H7vv5XiHzF/POHXJevmGfz5FD5inkCbobJ
V+TfDQiXr1jnl+/elK/IT1Z2yle8jms/uCVfMX/48Cj5innCzkXLV8zzxIex
8hX7e/VsnHzF/v7yU4J8xfi3306Sr5i/fplk+Yp87u0U+YrzeZOP+YrzqmlZ
8xX7da+6+Yp5mrXIkK/Y7ojBmfIV86cvl8cOFt6vBf1q/W+mfAXu+8f0DPkK
PKh+v3T5Cjzgu6Ye+QrcP/Ql8xW4T3R5e+4GHhhx1yVfkU8oat9HWX/n2vbv
BPNH/WzXiXk+jImRr1i/c2C0fAXuvFExSr4i//bB96JCXzFPqUGR8hXradw1
Qr5iPVVG3pCvyOsEh8pX7O/iFtflK8Y/l3NNvmKdO65fla94ffekXJGveL3G
v3tFvmL+ETsvy1fMHzfwsnzFccjodlm+4jgsmnhZvmI9G5Ivy1fku6dcka9Y
T9U+V+Urzs8yv16Trzhug8+GyFesv2KnUPmK9f9d9YZ8xfz9X46Qr8ivdIuU
r9jfMYlO+Yr1/O4XJV+xv6Gbo+Ur9jfzg1j5itfr1eg4+Yr59y5LkK/IY0ck
yVes83y/ZPmK+acNTpWv2N+nWrjlK/JD3T3yFdv9qOC9o//rK/I7GzLkK45/
syh57GDhfVlQT7n8DPkK3HfcjXT5Ctzn7naPfAUeEDjDLV8xvu8N+/sl2z29
zv6uAB7Yf44912P+/H/s9zbzBx+377vgDr+n7d8b5vl5VLTGBTzoXMko+Yp1
dt/qlK+Y35F8U77iuG1aEy5feY3DX2HyFfOv+u+6fAXuTCkSIl+RDx59Vb5i
u866V+Qr9qvl05flK9bvrnFJvmL+eoMuyleMH5x2Qb7ieKavvCBfsb8351yQ
r1hnnf0X5CvWuaXKRfmK45O/76J8Rd5v7iX5ivPnrbWX5Sv2q3XuFfmK8ZPG
XJOvWM+0B/8uFPqK7V5vHiZfMf7I7+HyFdud5LkpX3F8lp11ylfkuY2i5Cvy
BsHR8hXH//DAWPmK4+x6I16+Yj1ZRRPlK/arQnaSfMXx6Xs3Wb4if/T5NPmK
45C6yi1fMX7gKY98xX71y0mXr5jngzfMV4X3X8E8/KWD+Qrcp8075ivwoC1P
mK/AAz+8aO97Mf8X0+w9DMY/2tUlXzG+Ywv7+wTjr7aNl68Yv2Kk/W4nL38y
Wr5iv+rUt3+3wAM+PmTzif29d+WmfAXufLJbuHzFOiOfC5OvyFuXvC5fsZ5K
r16Trxh/atgV+Qrcd17WJfkK3L/WyovyFfnsPy7IV8xf+Z3z8hXryTxxVr5i
fKdjZ+QrxofXPSNfsd3DZc7IV+SPdj4jX5HXqXxWvmK7I744J1+RX/K5IF+x
nmlPX5SvyAd2vyRfMU+b+MvyFXnI2qvyFefJX6tC5Ctel8zwUPmK8+edNuHy
FefP5Iyb8hX5vQSnfMXxafJjlHzFdu9UipGv2O6ka7HyFfvVYGO8fMX4losT
5SveR3ErXfIV63njaIp8xXjf3DT5yuu+9jVfcTw7f2q+4vX6Zby+dx0svM8K
6pzlSJevwP1TF3vkK3Cfb4a75SvyNUvsvVVwx4TO9j4Z88+tZe9zgPv+W9H+
zso8z1W1v3MwT1obe/7IerousN//5N1L2PdvjsOM1yLlK/DAbqPCNY7gzmUl
wuQr1j/seIh8xfyO7VflK/br46uX5SvyedUuyVesJ2L5BfmK8bNWn5OvyI/0
OyNfcdzOzj4lX5F/Vj1YvmK7RV46KV8xf++pJ+Qrxu/qc0K+4vinbz0hX7Hd
RUNOylfM41kVLF8xz39tT8tX5F8POitf8XplFLkgX4EHzJh4Ub5i/I6Wl+Ur
xt9pclW+YvyFYSHyFeufER0qX7G/gyeGy1cczz97RcpX7Ndv79+Sr5inVWSU
fMV5+OyiGPmKeT76KU6+Yr+e6pUgXzH/3v5J8hV578nJ8hXzVz2YKl+xnh/H
ueUrjk+rbR75inlGuuSxg4X30//mWwPzFbhzUAXzFbh/5TBb5wPuU3+yvX9P
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
lrXr5SvymD+3yFfkp7Zvl6/Ikx175CvOq9lfO+Qr8phjR+QrjlvEihPyFfnx
rNPyFedPWOcL8pVXnZmX5Cte9+ePXZWvmL/KmevyFedhxZLh8hXjXxsZKV+R
75p5S74iH/BbtHzF+n3HxspXHJ/XlsbLV8wTfC1RvmJ/X33ZfEXedrz2c/fK
U2mU+apw/haMT4lXzFfggU3u2n6m4P63V7rkK/CAbz43X4H7jHnCfMU8U6Js
Xwy22+WSrUsnHxpl60XJJ79q67WYv/H5MPmK9czZESJfgTuL37giXzHP5QaX
5Cvy3Pnn5Svm713jtHzFcQ6vYM+LWb+n1xH5inzx0w75ivk/aWzfS8h7Vdqu
6808z/y3Wb5i/LE318lX5O/OXSFfkdf4J0i+Io9b8o98Rb5+8EL5ivy7fYvk
K/K7x5bKV+RXflolX5E/lrpevmJ/L/29Vb7y6tfynfIV45+YvV++Yvw3bx+W
r3jdlz11XL7i9f0r4JR8xfxdfc/LV+C+t18xX4EHPZdzRb5iPa47IfIV47c0
uCFf8X5csfamfMX6B71ivmKdW8qZr9huyWfNV8xz6R3zFeO/+N58xfj9u1zy
Fdt97nnzFe/HOh+brwrnaUEe1x3b5x08MG6d+Yrx8e3NV+C+d+/bfoWMr7zP
9gsDD+oyw3xFPv538xXrKTXTfAXuXDAuwp5fIY/f6+YrcJ9J5c1X5LkNzVfg
jsPzL9rzK3B3p3P2/Ap1TkkKtudX4E3Dj9nzK4zPujfs+TLrGbh3vz2/Am8Q
utOeX4En79hqz6/AG21eb8+vwFuPWWnPr8Cfu7HEnl+Bd8qZZ8+vwNv0n23P
r8B3tJhlz6/Ary+YY8+vwFcNWmDPr8BfS1xqz6/Aq/dcY8+vwGt/sdmeX2H8
z3XZbs+vwDu13mvPr3B9Fz5xyJ5fIf9W11F7foXr2KxhsD2/Ah+Rc9aeX6Hd
DbMu2vMr4wExAeYr5jnS23zFPPODwuz5FXjQk+Yr9iswzGnPr5C/x/Eoe34F
3u90jD2/wjjkJ8TZ8yvEd33RfEV+rJ/5ivU0PZtiz69wX3/3kvmqcD4WxN84
br4C9zn0o/mKvNLz5itw/9AT5ivy+LHmK/AA/6/MV4xf1MJ8Be7s1dF8BR4Y
X8F8xfhaB0LlK3Dfl1bbOjH2q+VZW6fBeiJeN1+x3bBxZ+UrxreraL4iL13K
fMU8U7sekq/IF1bZJ1+Rx3y4Q74ir1Jti3zFfv0+e618RV534DLND/JWR/6W
r8jXpP4pX5EfdU6Wr8gf2zpRviLvMmCafEVebe4c+Yp82N1F8hV5+ZEr5Svy
lYc2yFde45m4Tb5ifEjIbvmK98WQLx3yFeOT65qvGL/2t5PyFduNes98RX6m
nvmKvPsj5ivO21lFzVecV9v9zFfgQY9vipCvWGevteYr8vw55iu2e/hv8xXr
rLrTfEX+bXKCfEV+soH5ivV3Xmi+4jhPLWm+Kpx3BXmc/5qvwB2nvzJfMX70
Pdt3Htw3aZ35inku9DFfMf7l98xX4D7TXjNfsd3+75uvwP3rhYfLV8xzaJz5
ivFPDTRfMX71HPMV6z+caes6mCeqgvmKdV5ac1K+Ynz9xUflK8ZPy3DIV+TT
P9srX5HfGbpdviIf1mWzfMV+nSuzRr4iz04Lkq/Im4f8pXlDvq/adPmK/J9m
4+Ur8utvjpWvyNsWnShfkV9x/SlfkTfoulC+It9Ue4V8RV755/XyFXlUM/MV
x23T2+YrXq+sR81XjP888oh8RX6ylvmK7Y5POCNfgQe0LWW+Ip8Qclm+Yp7P
blyTr1inTwXzFbgzZqz5inn+mm2+Yv3Zo8xXzD9zrPmK8aeCzFfMn3PVfMX4
T18yXzE+cZz5ivEH79h5hIXzq6Ce+/AVuKMMfEX+2l3zFXndteYrcJ/rvcxX
bPeRBuYrxn/yqvkKPLB8Q/MVuG+PEPMV6wn/3XzFPK/3NV+R35xhvgIPqu82
XzF+wuPmK7Y7dKn5ivHPzzdfcRzSUs1XHId/PzZfMc++H81X5FW7ma+Y56ln
zFfkXz26VL4if6HsPPmKfP0W8xX5Yx7zFfmaPPMVeZkE8xV5v76z5CtyZ6z5
ijx6uPmKfMIx8xXHp9NA8xX5zG7mK17Hwc+ar5j/9SzzFfmlD81XvL6L75mv
wJ1tK5ivGP99lPkKPKBUnPmK8ROrmK94X7w13XzF+bxovvmK/Y0ca77i+HSe
aL5i/b+uNF8x/7ww8xXzR9cwX5H/Osl8xTwbfOz7VeE8KhjnZifMV+D+Mweb
r8ADq1Sy34Pgzt2HzVeMLznKfMV2Y9qar5gn1t98BR7Qu535ivlHFrffg4wf
tcl8xX79MN98BR4Uc8B8xfwvVbHfg6x/Sn/zFePd981XjO+RY75ifIvP7Pcg
4/PK2O9Bxj//nv0eJD/7iv0eZJ6VW+33IHmflfZ7kDzgmwXylVf83lnyFflj
V6ZqnpF3zJ+sz+TDisyUr8ibFv1LvvLi05fIV+Tp7VbJV171rNwoX3nNk4D/
5CvykPZ75CvOkwlzzFfgjtKD7fcg83Q6YL5ing0j7fcg40t9Yb4C921R1X4P
Mk9eNfs9yPvl927mK+Z/5az5ivzpXeYr5m+z3HzF+2L/avMV27181HzF+qPy
zFfMX625+YrX67815iu22+xJ81XhfCmIP3XXfAUeOHC1+Yr85zbmK/CARTnm
K+b/bav5ijxunPmKfNBP5ivyYePMV+DOf783XzH+fDl73g4edO+2+Qrc/2pV
e94O7lg52nxF/lRde97OPN2O2vMrjlvZffb8inlmlLfn7ay/y9/2vJ15jpy0
5+2Mr7PbnreTj7xhz9vJw67Y83byct8GyVfko975W74iX5Zh36vIv6hg/iIv
tfYvfSZP3/2PfEXe+9Xl8pXXvN29Vr4in1Fyi3xFPvq5HfIV+Yon9slX5O/9
ZM/beb1c7Y7JV+Stg+x5O+fDn93OyVech0nHzFeMHzfbfMX84+aZrzgfWl00
XzF/dX973s74FR7zFXlSuPmK93XPW+Yrr3l1z3zFPOPr2fN2xh/43XxF7h9l
viJ/5A3zVeG8KBiHy3ifgfx4rvmKvMMi8xV4kE9Le58B3LdTEXufATzwjSvm
K/CA8kfMV+QDL5mv2G7T4vY+A/NX2WC+Yj3V59jfB9mv27vMV4wv8oy9zwDu
E9TZ3mdgu2+mnZKvmH9u3HH5ivxVP3ufgXn6ph2Ur9huE197n4F81dP2PgP5
kmB7n4G8xCx7n4G882sr5Styn95L5SvyA3MWy1fkPx1dJF+Rv1cvSPOS3N1k
uT6T/1FhjXxF/tzGjfKV17yasE2+Ip+9cJd8Rf7EnAPyFa/LI7vsfQZw//fn
2fsMzFM23t5nIN+8yt5nYP3z+9n7DJxvxxrY+1fM06qRvX/FesYPt/cZeF8c
jTNfMc+Lzex9Brb7R117n4H5K9a39xlYf6P29j4D87SZYL5iu79dNl8xf1J9
e5+B/HgH81Xh9S+4Lr93M1+B+xzobe+LgvvHlrT3RRn/9H/mK/CASwPMV+CB
nsb2vii4b5k37H1R1jn5fXtflPGOEPMV4xNG2vui4M7O39j7oqz/8jh7X5T5
N0SZrzgO04bb+6LsV5vR9r4o6zk53N4XZbuR54/a+TiIbzfR3hdl/qJN7H1R
8mn17X1R5n8t1d4XZfyGH+x9UcZv+PVfOx+Hde5bbefjgH+7ZqWdjwMe0nyl
nY8D/t/iVXY+Dnjg9rV2Pg746Bkb7Xwc8IPzttr5OODrTu+w83HQ31vRe+18
HMQ/7rb3Rcljux+183FwXdL8T9r5OMg/YdYZOx8HPG2tvS9KfvdDe7+d8y3t
SXu/nfO2ZkV7v533V5l29r4o64x02PuijP9+q/mK8SUWm6/Y7uFl5ivGP+ow
X7FfL2aZrxjf+kN7X5TxQcvNV7y/Jk8zXxVe54Lrkr/MfEU+KtV8Rf7FLPMV
eYkPbD0OuOPlLPMV+ZBj5ivyhVvNV8xf3mG+Ag/cetPebwd3ngi09TiMb9nL
1uMw/+3xth6H8W2i7P12cP+4obYeh/HukbYeh/mjB9l6HMYnnTguXzF+/++2
HofjU2++rcdhfK1qth6HfGmErcdhu5MCbD0OeYktth6HeWJW2d/5yHfP2yBf
kee+v0G+Iv9qwUb5irxY+Gb5inxVm22ax6xzdNAOfSb/5voe+Yp5lmQelK84
nqPybT0O8/T9/rh8xfgpn52Srxj/1vJz8hXnYbNtth6HvF2bK/IVeb0XQuQr
5m//Uph8BR5Uoputx2Gdn35r63GYf0lDW48DHjC2uq3HYZ6hr9l6HM7/iBa2
Hoe89G+2Hof11ws2X5EPrGXrcVjPlxfNV4XXsyB/+yzzFXhgndm23hnc5+o7
tt4Z3PGC03wFHjB9vq0fZLu3v7X1zuQVvrD1zuTdA2y9M3hQv+m2fpB1jthn
650Zv2aRrXdm/vf323pn5tlQydY7gztXr7X1zhy3XoNsvTPzzLxs+56w3YxX
bb0z8/wTeUy+4jh/nmPr68hDB9l6Z7Zba6Gtd2b+DS/aemfG9xlk653Jh82x
9c7kRWfYemfyXT23yVds91KF/+Qrxmev3i5fMb76C7vkK8af+3Gv5jd58KaD
+sw81b47LF+Rj+93TL7iddlx09Y7e9Vz1NY7c16VnWbrncmj02y9M/M8OdnW
O7PdMp1tvTP79V4PW+/M/CmLbb0z77v6JWx/BrabGma+Yru1TpivOK96njFf
Mf/dRPMV62xWxdY7s93v+9t6Z8b/cdZ8xXj/l2y9c+F1e8B9//rS9pMhv1PT
9pMBD5yfY74inxpk+8mA+3TqaPvJgDtCa9h+Mow//5TtJwPuf/YF208G3PnL
x7afDOsPq2P7ybDOXmVtPxnmH1fL9pNhngNjbT8Z5jldzvaTAQ+6df2ifMX4
80vPy1dst0jWafmK45C19qR8xXEb6DgmXzFP1Ya2nwz5oAq2nwzzN9ho+8mQ
9/DZJ1+R/1Hd3pdivzZX3S1fecXn2n4yjH97w275irxzk73yFXne7v3yFcdh
52TbT4b9dawz3zFPnUbH9Jl1xn14Ur5i/rG7bD8Z8kFBtp8MeMAvd2w/Gc6H
OQG2nwzrLHHH9pPhfP7onO0nwzpXX7P9ZFiPXynb/4rzdvwR8xXr3PmX7SfD
PF3G2n4y5AkTbT8Z1r9/le0nwzpfDjdfMc/Hr9p+MqyzSjPbT4Z1Dg00XxVe
n4J2Tx8xX4E7fp5vvgL3OX7F9r9inkm/2X59zHPkbduvj7xTEduvj/zFZPMV
+f4s8xW529f262OdsQNsvz5w54CdEfIV81y6GCZfsV9zXrH9+sCD+m+/Kl8x
/9yfbb8+8vyBtl8f8w+sbfv1kde9dVq+Yp2erJPyFXhgwADbr4/8Ykvbr4/5
i062dS/kd9+y/frITzSz/fqYP3ii7dfH8W/9zUH5ivHPlnHIV+xX6eu2Xx/b
HV7BnmcxT6ljtl8f260ab/v1eY3DyJO6H7zmz5jT+sz4Sndsvz5ex44/2n59
zJMbZPv1kf9S7Jp8xfnTfrnt1wfumzbM9utjv9YE2n59rDM60nzF+MN/2359
jP91gO3Xx3b/6mT79XH8AwNsvz72669Rtl8f46v8Z/v1sd0mPra/KPljW8xX
5G8km68Kr0MBd/vZfsjgPuWxHzK4Y9g52w8Z3L/RcNsPmXmK1bb9kMGDHPnm
K/CAjtG2vyjzz3DZ/qKsp0EF2w+Z+f8OsP2QWc/Bv20/ZOZ/d0u4fMX8TR+z
/ZCZZ/MM2w8Z3Lmzre2HzPwfNrN9LRmf1N/2Q+Z1yZpwXr5innkLbP8Uxn/9
pO2HzPipSbZOmPWnvGb7IbO/P162/ZDJa8bZfsjM/3hv2w+ZPL6d7YfMOlts
tP2QmX/ISNsPmXn67LH9kBl/uL89zyKPm2H7IbO/ETXsexj50LrndZ9w/rzU
wfZDZj1X2th+yF7XcaTth8z4pCjbDxnct+lo2w+Z7XbvYPshM8+JurYfMvtb
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
l15i51yyzl2z7Zw55q+yzM55Ag/aPztSvmL8jgp2ngH79cOpcPmK12vMVtu3
l/z0uTD5ivwj3zD5ivW7V4fKV2z3XJ9Q+Qrc92jXUPmK8fOmhcpX5K7sUPmK
/K0FYfIVx2f7cHu/nPXPmxEuX3Hcgm9FyFfklQdGylfM47vA/p7H6+v8256P
kxfbYc+bWH+j1Gj5ivE1m9j3IY5z5y3mF/CAbu8n6DPzb45MlK/YryOLXPIV
42//lCJfka/rlSZfsZ6SO9zyFeupfcwjX7HdzyLNV5wPCY9mylfkfd6Sl7zG
v0a/bPmqsH8F4zb1hRz5CtwRdMd8Be7/akimfMX4Blsy5CvwgPUz0uUrcN8j
wzzyFfPf6OuWr8ADV1xLla8Y/3xesnzF+Hc/cMlX7G/IkkT5inWWfjlBvmK/
RhyNk6/Ag3aNsfO/2e6vXez8XcbvbxstXzH/8W52zhzrqf+HnfPE/rqO2zkr
bLdMVTvPgO2erRkpXzHP2Wa2by/brTQvQr4i3/hihHxFPjciXL7i9f3vSrh8
Be689FiEfMXrMntghHzF8en7tK3HY57Fblv3wnbXPGbvkbO/DTba+5rksT/Z
+09sd3RHe5+A43ypY7R8xfhJQ+05OOv5dKM9V2KePUXi5SvW03WIfe/h+Oy5
Yx5hnmZLXfrM+L7dU+Qrxo9+J02+Yp2uWW75iuPc9i+PfMXrXmRlunzF/OMP
ZMhXzNMuynxFfvEJecmrnu7Nc+Srwn4U5C9/33wF7vNKVLZ8Be6oezBLvgIP
arwwU74Cd9YZmSFfgft/1jNdvgL3LfuVR75insiObvmK9fx+JVW+Yv4llVLk
K/brhZEu+Yrxle8lyleM/2pJgnzF+D5d4+Ur1lPkXTv/m7xGLTt/Fzzg2YZ2
/iWvy/CAaPmKeV5eauc8sc7Gt+2cFfKKP9h5BhzPSndtP3G2e3Sl7dvL67u4
r+2PyfiaH9s+dByf0Ka23xN5+a62rwp5rVm2fwHb7Rhj64QZf+hzW3fH+TPY
aetbGN9jsr0vTj60XbR8xXEeUd/ec2J/33rH3htgntaf29/hmKfP1Hj5ivHP
3LLnR4yPb2u/u3gdP7vhkq9Yz4HfzQuMn9soTZ85nk9PdstXrKfjaI98xfGs
Ny5dvmK7tWdlyFeMP7suU75iv8aczZKvWOf2PPMV+b7aufJVYb0F83abK1e+
Ag947VKOfMX4Cluz5SvG/zozS74CD2o8JFO+8mq3c4Z8Be4IaJsuX4H7nm/v
ka/A/f/s5ZavyPeVSZOvmP+PQSnyFbjPoQyXfMV+1Z6bJF8xfsjnifIVeYs3
EuQrtruqarx8BR4YUsfO3yUf8pWdf0n+9Xw7f47516VHy1eM39EnWr5inQmZ
dp4Bx+3wIts3nPHB39j+vGz39w9tH0yOW9dGtt8c85/80vZ1Ii83xfZPYf6f
I2yfAs6rFz6Jlq+Yp3RYtHzFcWg4ztaxsF+TWtt74Wz3RB17z5LxG+rGy1ds
N/YTez+AecpMsL+3kW+6Yc+vmf/T1vY8iPGdr9rvK8Y3/sW+l/B+eWWhW/c/
8ySO9+gzx3Psr+nyFfNPHJUhXzH+tymZ8hXzRy3Lkq94v79yNFu+4nXZlKrv
UV55zlXNk68K6yqI73crT74C911zOle+Andc2ZgjX4H7pMzIlq/Ir/yYJV+B
O5O7ZcpXrOf8FxnyFet5sWO6fMV6xvTzyFdsN3iqW74C9/cdlSZfsd2iRVLl
K+apsCJZvmJ8bg+XfAUe9H2jJPmK/e37VqJ8xfrf/tDOBWe73/SNl6/IL6yz
8y/JFxe1c+aY/5kRds4T61xfws5T4fiEb7HzDNjf2sNs33C2W6OD7c/L/B+0
t30wwQNC+9l+c2z3syDb14l5wtJt/xTWs7iH7UdAvjLN1v2SR/9t6+jI3/0m
Xr7iuPVtZu9/s79vNrf3KRn/Vk97P4n5H/vHJV+Rv+62v6txHKp1t+fRjP8q
wZ7vcDz/POaWr3i/9F/uka9YZ8dp6fICuWdMhj6z3WNjM+UrjsNXM7LkK6/7
a2W2fMU804/myFe8Lx5J0fcor/rPVs6XrwrbL6jzxch8+Qo8YMzZPPkK3L/V
f7nyFXhgv/k58hW4z4lR2fIVuPNs/yz5Cjzo9Z6Z8hW476JvM+Qr1hk1Il2+
Yp6IRR75ivU7LrjlK+b5sJxbvuL4LA9Ola/Y39mTUuQr9vfJ3snyFdt9orNL
vmK7l/olyVccn8TZdi4489e9ZufyMs+hN+38S8YnrIqXr8iffideviJ3RNp5
KhyHX1bYuQXkR8fZ/uCs5/nRtg8vxy32b9vvknmGnbd95Rhf+qV4+YrjeeLP
ePmK8dtetH0HmP/wSVvfy3E+P8PWyzH/0h9t/QnzJ/zokq8Y33ymvTfJ+FYn
7T0k8p+et7/fM8/Cpm75inX+UsIjX5H7hHrkK/Ir29PlK16XmYsz5CveXydm
ZcoXzPPorCx95ngeX5gtX3H+/LEpR75iv9afyZWvyOel63uUV/75vrflq8J2
CnhQ9G35Ctx39LV8+Qrcv8GhPPmKeTatyZWvGH/6zxz5Cjyg2Ohs+Qrcp+qI
LPkKPDDt90z5ivk/nZMhXzH/O7vS5Svmd7k88hXrr1PHI18x/2+j3fIV47se
TZOvmL/l0lT5ivzf+SnyFfMcWpssX7HdZ6+45CuOw/hKLvmK+V/8yc7fZZ7X
k+z8S+Z5foSdM0f+fTU7z4n5VyfaeSqsv90pO7eAPPa47Q9Ofi7S9uFluwEV
bF9L1h/yre0fR/5liO3TxDwxPW3fE/Khj7vkK+aJvOySr8jjd9i6ONbfYIet
M2H+Hy7ae9vkpR9zy1fgQZfXu+UrcOfxHh75iu3+WT1dvuJ9GpGZLl8xvvmF
DPmK+b/dmSlfMf782iz5ivUXXZ0tj3B8/njwO6vwM/t17GCufMV2a4XlyVds
t/xdfY/yyn/plTvyVWG+gjxbUu7IV+SdYm/LV+C+ba7ky1fgQQEH8+QrcP/f
/s2Vr8hfXZQjXzH/u/Oz5Svmn7ckS74C9/lwe6Z8xTzNwjLkK3BHXtkM+Qo8
oO7n6fIV6+y7yiNfMb7Ig3/vCn3FdjsPd8tXbPdSfJp8xfpn5afKV+CBQ2uk
ylfM80n/FPmK8bWC7Vxw8s/97fxd5ql70SVfsR7/X13yFeNLNXHJV8xf4WWX
fMVxi6jikq/ITzdwyVfk7wx0yVfM39Hhkq9Y55d1bJ841ll/r+3HxPzx2N+E
3L+m7RfA/EVK2/pb8n4P/FPoK86HV/50y1e8j0bW8shXjPe97JGvWP+JCeny
Fed/5Y8z5CvmOVoxU74i/9qdKV+xv4OuZslXHOe5x7LlK8Z/6siRrzjPyx/L
lV84Pl9fztNn9mtsUr58xfFJKykvebWbWveufFX4/ytot9Sdu/IVuP/+3Dvy
FbhPjeTb8hV44NM38uUrcGfvU3nyFbhjy4Fc+Qo84NbeHPmKdd45mi1fsc6K
4VnyFfN0KpIlX7Hdtxpkylfko37LkK/Yr+MX0+Ur5u//drp8xTynV3jkK9bf
+SWPfMXx2fTg39lCXzF+wkdu+Yr1TDqbJl/xuoS/niZfkTdfaed/c9xqvWvn
7DJ/yWg755K8z1o7T475T062c5sYv26CnY/CdocH2TkE5OOv2n7fzFP2Fds/
l/zdubZPJesp7mv7vvG69D1h+yvxOi5o5pavOP6ztrvlK7b7Qz2PfMV27xzw
yFe8vjlfpctXzP/cvXT5ivWU25IhX7HdyYMy5Su2W/WDLPmKfFC5bPmKvGR2
tnxFPiw6R75inQ1v5MpXjD8dnidfkf8Tny/vcByeun1bn9mviRXlJa/50L7h
Pfmq8H8v8PY3j9+Xr8AD2z1xT74Cd/Qofle+Avf/Iv+2fEVePCVfvgL3eSYm
T75iPX9E58pX4L7DU3PkK8Y/WzxHvmKd22pny1fkx3pnyVfsb6P1mfIV8//7
SKZ8xTw/9s6Qr8CdGdfS5SvyhV+my1ds947TI1+xv+d/9shXHE/PCx75inX2
POuWr9juR5Pd8hW543O3fMV2K73mlq8YP/Fxt3zF+jffsXPjeH0n5Nn5TKz/
Xgm3fMX6337ZLV+Rj2vtlq84/vce/E4v9BV4wKrjbvmK/RryrEe+Yp2tR3jk
K+Ypm+iRrzgO03qny1es58+0dPmK+a//kSFfMU+FWpnyFccn70amfEX+yt9Z
8hXzNO6RLV+xvyHv5MhX5L9XzJWvWOdBnzz5yus+zcqTr8h9MvLlK45DQt5t
+Yrz5N2Sd+Uj8pa+8pJXnT80vu/34v/mYdrBwv8W5C/9vXkM3HdS4j2/5x5+
9iPvXtTyg/sUm35Pnwv/fwX1TLF4cv9+4yw/4z+vZZzzZ9xGy1+Yr6CeNcXv
/7/xBTzo2KT/L/5/4xwxw+pHuwGD993zq3Fo67ffrU87WPjfgnq25d7zq/bw
sx94QN8pFl/4vxfMn2qTLR7cv+p2GwfkCVrwzn3FoX7/FmctP+sved7qZ/6/
7/5/8QV5nFOa31c8659seVh/4NWT9/7fev7Hm2Xf8/s/twKaFg==
   "], {{
     {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[Polygon3DBox[CompressedData["
1:eJxVnXXYldXzd0+H3S12t4JISAlIiKiIghgoNiIiWJggiKAYKCgiiIWCiAEq
ioLYit3d3d3x3us7a1/n9/5xX8Ps2TM7Zt3nPBjPZ4PDBu9zfCGXy324Ui5X
zOyj9VwOv2n2dMyeFbMnC+WaZ08pe8rZ0yJ7KtlTzZ6W2lr27GKc2M65qEfO
mdnTLXu6Z0+zXNQn1jp7suVyS2VP++xZLnuWz54O2hWyZzct+2iTPUtnzzLZ
s6t5+K1cn1qd3O/K2bN79qySPatmzz7Zs172rJ89nY2v4r5Wz541smeP7Fkz
e9bKnh7atd33Gsa6Zs9q5nSxNv6ezl0ne3pq182eXq65Qfbsq90we9plz7Ke
ubdjG2XP3tnTxL3uZQ38/YxvnD1tvQPy93dsk+zpo900ew7Kni2zZ6vsOVi7
dfYcot0mew7Nnm2zZ7vsGWj/6O2B2bOF+f2yZ3P9/uaRc5h522fPkdmzUy6Y
OUpLn4+zHowc7RhcDDBvh+w5NhdssfYxxvHP8t7pySBr0OfT7B+9PSEXHMDF
id4L9zpUC1NDjBPr691slj0HaDnb4FywSK3jXQd/mDXgcbhr0vPTtbBwai6Y
Y09nOAZTJ+eCXd6hk6yBf4pj5Jzt+WDtHC0c3WmMsUvsJT08NxdMwMjoXDAN
X+dp4WuUcWIjc8EiOSOsjT/GuXB3vha+LvSOuJvxWvp/o/fLvV7kGIyMywV/
cDfWGvgXG2ffFxin7qWeAwavyQUf9HaCY/2zZ1Iu+Dg8eybngi2YukoLR1dm
zxHGJuaCRXIuzwXT+FOcC1NXa2FtumvS52u19P8y1yf/Osfga1ou3g32OtUa
+Ncbh68Xsw+eJ7Ln8ey5wTHu62nPwN7vsTf0bVYuOICd2blgGr5u1cLXLcaJ
zcwFT+TcnAue8Oc4F+5u0/JZOzcX7NDzeVpYuCkXTJN/l2MwdUcu3jeYu90a
+HcbZ98zctF/8ud7Drh71P5xf/c6Bl8P5IIP+r8oF2zB1INaOFponNj9uWCI
nAW54BJ/sXNh6iEt78RjrknPH9fCwn2uT/4TjsHUI7ngj70+bA38p7Lnilww
dWQ++xzLnqbZs8Qx+ndE5u9o7F17Q99eyAUfsPxSLtiCqZe1cPSicWLP54Ih
clbPan2c2U+y57lcMErs1VywBUdv2W/6/7YWdt7Rso/Xc/F+0p/XzMN/xfWp
9Z77ha8PcsENvHxtz7iz940TY18wwefQp7ngCY4+097lvu809lEuuCHnQ2vj
f+5cOPpCy3vwjWvS52+19P/NXDDKmb9zDI6+ygVz7PVLa+B/bxyO3vAOyP/B
Mbj7Uftg9vwmBzD7uxaO/tDC0d/Z82QuuCjno3/09tdccEP+L7lgEf9P82Dt
H/NgJ5flPpOZZ/ljPix9ruSjHowU8jEGF/+ax2dGKR9ssXYxH3H8NfJx7/Sk
mo8a9HnlfPSP3i6VDw7gYpl83Av3umw+LEwtnY84sZ+8G96zn7WcrZ4PFqlV
y8c6+MvlowY8rpKPNen5qvmwsLBSPphjT6vlYwymVsgHu7xDy+ejBv6Kvlfk
rJmP88HaWvmwcLRHPmKMbZmPXtLDdfPBBIyslw+m4Wv9fFj4apKPOLF18sEi
OWvnozb+BvmYC3cb5sPC16b5uCPuZrN8WPrfNh/3y71uno8xGNk4H/zB3Ub5
qIG/RT7i7HuTfMSpu1U+zgGDLfLBB73dOh9j8LVDPvj4LxefQbCV93MKW/Dz
6T+52z4fLJKzXT6Yxm/mXJjaWQtrLV2TPrfS0v9ts+cv34nWjsHXLvl4N9hr
c2vg72p8adnne4/v4TaOLeN7wBifd3vnozf0rWM+OICdzvlgGr5218JXJ+PE
dssHT+R0yAdP+F2cC3ddtXzW9pAder6nFhba54Np8ns6BlPd8/G+wVw3a+Dv
ZZx9t7P/5O/jOeCuf/Zs4/31cgy+9s8HH/S/bz7YgqkDtHDUxzix/fLBEDm9
88Elfj/nwtSBWt6JQ12Tnh+mhYV9XZ/8AY7B1MH54A/WDrIG/uHGE1N8JtHP
o/LBHBw1zf4Sl8+eQvYcKwdwcap9oocDHYPrQfngDL6O18LUMflgkfzjnMu8
wcZhakg+GOKdG2bP6PlJWlg4WQtHp2jZx4nm0asTrEetC+0Bd3+a+4W10/PB
EOycae9hYbhxYmc5xmfSOflgC6ZGaOHoDGuQP9Ix2DlXC/ujtLBzXj5YoVdj
tPR8qHvnzOc7Bhfj8sETvIy2BvljjRO7wDjnHO9ZYefO7DnbvV/jvdOfCdlz
SD74vTwfPMHRRC3sXGac2CX54AaOLs4Hi/iTnAtHV2j5GWpK9hxtz6/Wws5F
7ov8qY7BzuR8/EwGd1daA3+a8eM8xx72YLrngK9b7Rn9vNYxmLoxH0xwrzfl
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
2+zr
         "]]],
       Lighting->{{"Ambient", 
          RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
         "Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, 
    {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl0zd0D1AUB+ArUfJXEiVREiV/JVEiURcWFhaWZGHRjrIo57CwsLCwqClK
oiRKoiRKoiRK4jhEi0GixMLCwsKinOMLw3feHd5w3+/el1yzpXhzr4h4zdtE
xL/a+YjZ6nWU8YRfTHdhJQdo4wf5KRHL2UcL30imRpSwhya+kNM7Yim7aOAT
WX0iFrODOj6Q0TdiIduooYtEv4j5bKKKV6SmRcxlAxU85Q9Fel9NO+85RBcv
OcwRSimjnAqOcozjnKCSKk5yitOcoZoaznKO81ygljouconLXKGeBq5yjevc
oJEmbnKL29yhmRbuco/7PKCVNp7RzUPe0MFBVlHIb+9vp5z1zCGFDnlVspF5
pNEp12q2soB0uuVfy3YWkclHc6pnJ0vI5rN5NrKbYnL5au7N7GUZeXy3H63s
ZwUF/LRHjyllbU+t73fMUnc6XzBTPYMiCnv2jgKmMZUpTCafPCYxkQmMJ0ku
4xjLGEaTQzajGMkIhpNFJsMYyhAGk0E6gxjIAPqjxRBriDHEFmIKsYQYwrPj
eeL/f/oLj+Zq7g==
      "]]}},
   VertexNormals->CompressedData["
1:eJztXQ2MVcUV3mrrLsHqim3ValFrLVCVSiupgngTtEIaYykBLTEWf1J/staC
Sq2tUQkNKSKIGiQouP7UH3CrAqKirMPW4NpuuqjlR3Ct4sKyC8s+REFUNG19
M/f1neeXMzP3zHv3qsRkcr+9nnfmzMyZ8zdzj77ot6N/vU9VVVVbr6qqfavi
fzcVtzuiSuEb3rn3z40rcvHf88+q0nQUpdPvmZrdvXcU8Pzz4+WSTwk/ru97
0gk2LkieGo8ojui7jourHELTqRR9KbxS6wLhUvM2NH7DwQO6N+8p8DnmosNH
zh31oBgdz3WRGj3M0E/Nugg9/7/UV7J4ueRp9jE6H8x6NeuUWy+2dIr//1xk
2y/b9w89dN1NR97coXSrn58Sp4P6S+kfXP2PF5bd0a3bNt02sP2l9DUdRelw
4yslZ6M/bPUGovPZ8mlTxf3j5UNxQoeVM5Kb7/xB88GWf0SH65fpR9Jxd12n
FNf/fyxPSuf5mtdU1d5clG/rbee593xwtc+/xGVxKfuqUuN4xOOvjrysd2E+
559XQX5qj/lGz5L2wvtPXfH1964dvjS69Bc1q5o/LLy/s9ecmgFn3g/pI35C
xw1c6SA8bX5WVvAy+SPB6Hvykxo7HK1rJLesx9+ygn/R1kVo/IiTJ+6c8HFh
njzxwYqZM+bMTR2fWYnzuOLaToj/buwEKfpI/yB7Q+MRxaX4r5T8XfVhxtZF
6vW81D7oG9+guG88B/nFFC+ma08fycE1zkDfP6J54n//61b5tk0/L49qjrx+
R1P1KpVvc/q5HvIzbve8ARc0boymTqw7rXbeVv18nzM/UvOWjKPyje+ZZ6PP
jB5zjZeicUf2JHq/ZUv73Wv39qh826rbx4hezkWWfmLi9eI6vgYH68I5niaF
o3GncbPBS2+8/ZaxPar19wsvrDlldZRv/+IsB2G9lxq7pVJ8cnHFUP1yxV3j
OQgf9c1e1zbvKtC55toh46+4bQGkj9Z76HFxnedSdRSh8YzZV4nllhV99Xmd
J3q9x383612YT+txWb9drTy2vjv+e/65rWL7iBQ/FY7LpX4fD42nTa8W59Fh
XtXangR5W2f6DF6S50V2qa2f8uoDD/7khJEdpH0R0vn+kqsnjzg3Fz2z6293
1ff5u255fYX4NOubW9fan9VtmzL+rHnP6FGqP+nvSumBh77Te8Ou41dH1zXU
Nk84vUfln5+Ev3vhzz/5Ub9FSrc53WI/Qr+v0Pu2fCL6CD/19j7n77mrg7QP
seOIfpe+z8UTbOlw73vWM3ivL8SPVD1DVvCs5/1dcZ3fj/WJye+77nevr6k7
6uJ3C+9P2zC+6rZL3OeJFB2kJ/vf94ePp80q4BPq9j6yX++VYnaaK/+h7Yq0
2S0Il4qTZKW/UnxK6RnXeqHQ/Row8KWhv1z3f/X20/e7+ODrlonJH613jSuK
a34K81Pzg/KPiA7CpfqFcBSXS1u9U1bWrxSu60rj/tL6UkSHiedb19My9mFc
L63zOiTP8xhLh/JP/MoSe9LoIRp/Rjj93Rs7z7i59dvtUX59dkVUb+j9OaL7
squdTPNZazb1/dXOZS3RhKa3F5w4KKefH2XX+/Ej2iYP3JaLXp54/7HRsMXQ
zxr76b/NSrf6eU30rbX7PjN0yPJo/aiv/nBKU04/N0TnTtsy6e5XWnXbo/Lt
87BfRi7m70Y+iH+kN5qGz2s864DO6PJnO4+dsv9m/fxI9Kf3hr15y/uF9xvH
nPHThuhhOE8u2vfcnYf3Xx/NH1i7Y9K47VF3w6bdl658gujrUr/b7Btm3Ln8
Hf1d84zWi+089J3Ppg6X1qVI1ecj/WArB3SOw5efUOcyONxWnsg/cu0vpwfM
3ykuNe4Un3Pn//51KNP2/fRfQZ9rPyky/hHRP8roH0Sfq3NIyj+HJ53n0vyg
fcfoRaMPddxKFbcP0XlSovdc+4tw13oJ9D6tS+F+N1QdghQeOp7jWsf4RcPT
5i+jOCHyE6XypK52VNbxrMRRhecVnOe28X/pvC21Vzn6tvV+JK9XYidQ/wjR
QfYV8psY+cN+mfgu5z8ie8nSDizZ3ykunKco2WdrL3nujRH9nlbnNGx8eZ+1
Of38cHT0yN9Mmrx5S9RwzIWXvTRss24fpHyW2LGIH1v79oXRXWu/sqdTDR4+
ps/dH7RH+fYBNv9L10vo+BuXL7NdF1JyQ3LwnT+h7LSs6HkpOy10vVBo3HX+
oPgSer9ScXIpHI2ja51t6DxIaPpSuG+cnOLC+ioxHYRL+QvoXL8rHbTeXfV2
2vxcNP/R+kX2udQ6ctWTUvJE8w3lDV3pS+FS8zk0LnXvHKdnbOOW3Pk+xI9t
HI+jj+xeasc+t+L0DQMWbomqdy16o27K5qj+/JmbcoP5+jrqHyH74c3537vn
d12d6sZFU27Ys71dt0vE5wP1g06Z99E5s3pe1+023bZI2xsl/XWtc0D0fc8H
0fHl7FtUB0vpnz1w2dLJs7erq6Z/+IPWhet0+3T8Ps1fIDrF5xV7IprXRv1C
9Ol6bOo/8+ivTVym3ln8zuVn/jOnnxew6wL9LsKZ+uGS/JqrH2ebX5DSe9Lx
KzoPpe0QlM81+ycdF6ofivP3y+M8vus67Tv4qPVnd21X6/q99t2Prlyr8s9/
DS5/pP997Qdj73N2PoqzdTX2urpqfocy7ZhPhtz640Pc87ZS9agIN/FNg3Nx
TvOM4oSu+XRK55q+Ww8aunKbOmTpmJY1y9/UbT37u1L506T5elecqzt1rStI
yo8vfaR/6Pu+eo/qq+L6ns64zseVjq98KI7sCl9/wXVfpvLnzk9ROej4tSpu
C3Fsam9wdpSrHqA4c17beV+2nZ/SuO35LPPsWrdQ7n5Z5gcT173Y2uEIl4rn
k3pOReMqtuP7eY0nS+UL0L5A9FKcXyPnKBV3jlLqfgmE67qI+O+mLsI1P8id
H0zKJ4eH2h85nOoNzi6ytcd86xkonTLVX8H5ifQhHa/iOEKrdTyB4sX1CgW/
xnV+SuUpfPVP0rgE4oeTg+u+n3TdkfPOip53pvSl9KG0vkJyYOpSyq6vKM7Z
2+g8NaUjtV584+229lu5zknZ6nl9zoScO3neWR9y/kXSOmfX/BrCuXniqn8o
bunfseOC6sk94/8l9mHa6lU4vRo6buOKJ+WHjK+3/peOt9N+kftPInr/iSOf
UO/Z7lNID1TPvuTU+bvWq4cvfbd91EnbVf45fL7bdR1xfo0Un7bzs/icYWt8
3jBtdX2X7Rg9/bS5Hcq0m86bMmjpv/D4cnoS2bG252i4etpyywfxX666Kdfz
R6HkENoOccXJOV9l8oOh6/y59231KqKD4t6+dgVTh8/W/6cN5+RAxwudP0Lv
+/KJzimHkoN5RuuO4sL+NTyPKaUHPM81l/xu0noSEncqWS9M3jled4cM63PV
6lu3qmf773/WyUs36nYRy4+5n8nkuXz1m9S5cvo+8oNQHQKp+1Km7os7x4fG
MVS8hcs/2sqT0/80DkO+L1lyXsZ1fbnet4Dqc5LKk6NP+UlbXbrl+T7vfUTK
LyB1U7Fd5ErHPNNz+tLnI2zlxulh19+lekPXHcXzxLbuiOKu9aUI5/ZZz/7G
+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
t79Ubv8BTWADwQ==
    "]],
  Axes->True,
  AxesLabel->{None, None, None},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGridsStyle->Automatic,
  ImageSize->{527.0630389024125, 451.53846153846155`},
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], "RotationControl" -> "Globe"},
  PlotRange->{{-1, 1}, {-1, 1}, {0., 1.9697766304016113`}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{-1.9774039546986106`, -2.0901183412476696`, 1.780808501642561},
  ViewVertical->{0., 0., 1.}]], "Output",
 CellChangeTimes->{{3.6804509250131807`*^9, 3.6804509297789345`*^9}, 
   3.6804510142546864`*^9, 3.6804510767099495`*^9, 3.6804512176141224`*^9, 
   3.6804514877764874`*^9, {3.6804515233176336`*^9, 3.6804515337227573`*^9}, 
   3.6804515693191414`*^9, 3.680451621840664*^9, 3.680451742628253*^9, {
   3.6804518567635612`*^9, 3.6804518600697737`*^9}, 3.6804519783103304`*^9, 
   3.6804522561498814`*^9, {3.6804523825747976`*^9, 3.6804524066313763`*^9}, 
   3.680459638762597*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"x", "^", "2"}], "+", 
      RowBox[{"y", "^", "2"}]}], ",", 
     RowBox[{"result", "[", 
      RowBox[{"{", 
       RowBox[{"x", ",", "y"}], "}"}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"Mesh", "\[Rule]", "None"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6803583789252787`*^9, 3.6803584162012367`*^9}, {
   3.6803584735966024`*^9, 3.6803584917210913`*^9}, {3.680358552786993*^9, 
   3.6803585569379997`*^9}, {3.6804507381376443`*^9, 3.6804507479426928`*^9}, 
   3.680450929230296*^9, {3.680451013709833*^9, 3.6804510138222623`*^9}, 
   3.680451076397651*^9, {3.680451527751148*^9, 3.6804515330462055`*^9}, {
   3.6804517309652963`*^9, 3.680451733757086*^9}, {3.680451851701318*^9, 
   3.6804518594453087`*^9}, {3.6804522299407773`*^9, 3.6804522880354185`*^9}}],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1:eJx1mX10VOURxlMsVaFQIgpSVGIrKioiGFQadBY4VVCDLRw5gIhRKtFqggqi
gLVp5JRWTxEDVYSie2KLgBI9VAJEMEvkSyiFxBCUaF0XCWliyAfEUGJIk3sz
M8+dzcsf7LnPzs477+/OnTvv5PKHZk14uEtCQsJ1bf+d0/Z5+Zep/2xtrS3k
zzMFK2e2trbSzDnvv56fUS363SNbP0vd3kzruvfOyiivEL1/8fzUfYNO04nc
p2deMS4mevq8njueGdFID3t+ykUfOrxg5MS6hg77EtGf/eHzm+4fX9+hF4k+
8viU5Ncm1lFCx79gnLVsT9a+wz9Z/x3xUOfxxMjG37Ffsvvt4EOWT8c1WZ58
zVzZnq/5841tD931t+wm4cx6xoT/FParPimcWd9y5smbdp2pE86sd81ImT5m
Ro1wZn1p948nTh5QJZxZ9/dVKZyD8RwXztaeOVv/zLnzeGJk42fOdr/M2fJh
zpYnc2Z+5n6Jzv75mj+D+RMTvdeA8nsX7ZJ9if7Wq8PuuC25Qjiz7udVTDiz
7u83KpyD60aFs7VnztY/c+48nhjZ+Jmz3S9ztnyYs+XJnJkTPy/MmXVzf0Xn
ePiaP9fM6jImeuwb4cx6SoBPieg5Xr4dEc6s53ocyoRz0H+pcLb2zNn6Z86d
xxMjGz9ztvtlzpYPc7Y8mTPz4HrFnFnn54s5s27yQXSOn6/5c5X3fB0Wzqxv
9uI8KJxZ9/nsFc5BP7uFs7VnztY/c+48Hsl3iZ852/0yZ8uHOVuewXwukfdF
MJ9LpL4F87nEPO8x0U3+iB7kWSK6nz87TD6znwKTz2z/gclntQ/ms/oP5rON
J0Y2/mA+636D+ax8gvmsPIOci2z9EZ3fL0HORaYexkTn5zfIucjmm9ELDOei
Dj5/N5xZX2Y4q32Qs/oPcrbx6PuB4w9y1v0GOSufIGflyZx5H9wvMWfW+f3O
nFkPvo9ionP9ZM6sB5/3EmMv+Wn0ZcLZ/mPO1p45W//MufN4Ysa+VDjb/TJn
y4c5W54mn8mRz+TIZ3LkMznymRz5TI58Jkc+kyOfyZHP5MhncuQzOfKZHPlM
jnwmm88cl6M+k6M+k6M+k6M+k6M+k6M+k6M+k6M+k6M+k6M+k6M+k6M+k6M+
k6M+k63PvL6j3yBHv0GOfoMc/QY5+g1y9Bvk6DfI0W/Y54Wsf9NvkKPfIEe/
QY5+gxz9BnXeb8TI0T+To38mR/9Mjv6ZHP0zOfpncvTP5OifydE/2+eLOo9H
nkty9M/k6J/J0T+T7Z/Zn+M8SI7zIDnOg+Q4D5LjPEiO8yA5zoPkOA+S4zxI
jvOgfR7Jxm/Og/b9RZaPOQ+SPQ/y7xzzDXLMN8gx3yDHfIMc8w1yzDfIMd8g
x3yDHPMNcsw3yDHfsM8v2f2a+QY55htk5xv8vWNeR455HTnmdeSY15FjXkeO
eR055nXkmNeRY15HjnkdOeZ15JjX2eedLB8zrxOeO67+/ZXl+TWF/Jl587yL
s19T/qwnz3uxMLKvpSOeDaKnev65Tm0gq3dck8M/Wf98zesY/6L79XOhrOvQ
2Z4c9qJznHZdEw+xHnxfsJ851g9ZP/y9gzM5OJODs/VP1j9fM2/Lmde367Je
89WSpccurJN1rW78i5/ge3+D2BtuhcyNr4PnF9HJ6sH3oPo365LRyeqGQxx/
1h0c4vzb+9iQXfF4RvmJQv5sbnrkQOp20cmhsz057EXn/fLv5k/psnJ19KzY
8fdGl32xztf8O4d9ocPe6oUOP2TX9e9qXSF8RpIXttIXbcVQz++enjS7rJk2
t8tyfvf0tG1Xn6ZlV4zL0fO7p4cGX9tIX3l+ygN+bq1voFc9+xLUE96fWk8r
PL0I9fDb0zhv39+K9h8l1NGLvj3uI+36tjq/2PePenjW5Ho67McT0Jd3O0lL
/PhRj6yd2kgf+PtFPVQ17DR95vMJ6CPmNfN1gGuvxFa5Bq5pH81vFs6gR4e/
1ySc8T5Unj0pnFHf0LVeOIMeKVheI5xBz1qQXiWcUZ+XXimc0c8LeceFM+ih
tEmVwhnj7/fbKuGMca77ukY4I4dBE+qFM+jhIbefEs7o59qNTcIZ44+8IPwL
IU/DsxqbxA70SGriKeGMeukDdcIZ9FBraZVwBj3rohkVwhn9zBh8VDijnxlX
fS2cUT+dHhXO+JzR+V8LZ9S39T0qnFH/7+IK4YxxZtxXLZyRz8Xv1Qln9NPv
5lPCGe3fvu60cIbnPtx8XqNwRn3xBfXye9CzHt9RJZxBj1x99BvhDHpS7pyo
cEY/ty44IpzRz9D0MuGM9geOlApn0NMWnV8mnHHdc3oeEc6gR+97Kiqcsf7d
ccsx4Qx6KDFULZxR/+rGeuGM+tJRjcIZ6mg4J9IgnEGPLF9QI5yx7va/XOMA
Pemiu6LCGf3P3XVYOIMevXF6sXAGPbR/6V7hjHrmY7uFM+hZJ1d/Ipwxnsc+
Oiiccd2Dcw8LZ9zXotlR4Yz6mDkVwhn5JObWCGdcd0F1g3CG91La+Un1whnf
V83XVAln0LNGfaZ5gPrd/Y/IeqCHy6cVC2f0P6jLLuGM+sXFHwpn1DP/sFE4
47oFpVuEM+iRTSt3CGeM5/tvDwpn9NNj9BHhDHr0F231hzmDHnp3dJVwRp6T
RkmeF8J7PnzeVVrH8f3ffUilcEZ9biwqnEGPpo8qE85o//CV+yQO1E/32yac
Ud85dJ1wRn3aipXCGfWyOauFc8D++QLhDHpkWdpe4Yzx3zK7TDij/RNt7wvm
jP7Xjq8UzqjfMC7Yf3T0TaGX1tSavs7Xe2YfN32dr397U9T0dX7/1bW+1PR1
vv3M5XtMX+fbbxmy2fR1vp63O0x4zZ/PNWabvs7Xe9260vR1np51rH++6es8
PVI1aI/p6/w4f/frQ6av8/Twrpyo6et8P+mbjpu+zl83v7lWOEO84U8hn0FP
yvuZ5jPoWZklyhn0UOIAzWfQI0Nr9wpn9LO7dqtwRn4/yNF8Rr1P4SrhjPof
L1ojnNH//Qs+FM6o9zyu+Yz7vf0DzWeM/7Jfaj7jup8+qvkMetquSZrPcP/T
8n+u9Rn0yGN9tD6DnvXjD7U+gx5dXfa5cAY9dOBSrc/oZ0v+TuEcyMd/aX1G
+4U98mU/qLceLJBr9DNwxE7hDHp4+G3Fwhk5JL+k9Rn9Pzdc6zP62TlN6zNy
y7tH6zM8T2nffaL9BuhZRTO13wA9lHP2mHAGPZJ+ifYboCe98JD2G+j/Nz21
38Dnu3qk9huoF07XfgP9/OiA9hugh3O/0H4D7aOLtd8APRqdq/0G2v8pU/sN
jOfcFdpvoJ5co/0G1KfIob7aP4Oetqq79s+gJ7Ws0f4Z9ND2jdo/Y/27IUX7
Z/Qzoof2z6BHn0zU/hn9/+8N7Z/Rf2v5IeGM8S/58nPZP9rX/Ur7Z9Qf7Kb9
M66b3E37Z+R2zSXaP6Necov2z1DvIxe26nkQ9NBT3fQ8iO+H6GTty1GPbNbz
IPrvcrP2SaCHc1v0fQ96tG9LVDhjPHPH6HkQ9LQp30SFM8ZzZ5XmK+hJd09U
jhhn8QV6HkQ/vV/U8yDGM+xSPQ+i/dbr9TwI78+kFWk63wA9dCZH5xv4vv24
QecbqBd9r/066Fn7s3S+gf533KPzDdSfvVfnG6BHXn9T5xtoP2W0zjdw3UfH
6nwD/azI0/kGxr9nmM43QI8OvkbnG7ju8nd1voH6wbd0vsHft/t5sEfcvM6z
f3R23LzO05850WTndV5+/vTcuHmdt96psrh5nbfupHFx8zpPj0yMm9d513lN
tXZe53FbeFfcvM7LnwFj4+Z1nv0rtQ12XufZ9xgRN6/z4nm+T9y8zvMz/em4
eZ2nz7qtlTLb3bT/vaTjs12fFlb+oIf+8UQL5XrxbEA969S31ZTt6wR6wv5Y
NT3uX6Menj1D48F1U+5Q/0e9fezz/BzKXi/+UR+Y/o78nn/XHs+irdXiB/SE
7/YuEz+oj+76ilzz9+36hLV/pU/99QL2BX3fFT9oP/3lHNkv2o/9vFriBPvQ
A5u1/0Y/j0T+Iuuifnv/9eIf9Mi6St0v/67dfn1qntihvvCC9RIP+2vPq4zp
et9RP3GD3hfQI29V6H1HffAXet9BD61qy0O45jwMjR3fEsgbnjPv2dYS4Mjz
6pf71QW48Dx8de8669/73e6RLcIZ82f7v9eKHawTOVRcK/a4fnj8SyYe/7lf
/eQSed7x+5sGvmni9O3DLX+W/YN9+Nme2v/j7yaXaD1Bffz8sPhBPaWP1iW8
76/2esdy9vRud8Zx9up/Zu84zl4+pGicgfs+bHYLbfLq0olC/mzXh77WQn55
O0GgRzemqD1/377u1JFqD3pC+X0twgf9fDf3bMCO7/tPBp7F9WRfG4fI34Pw
d6GhU+PsPf/D3lZ73Nf+a/XvSuAnknhZXDz+e2HMWfo/sr9EzA==
   "], {{
     {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[Polygon3DBox[CompressedData["
1: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
         "]]],
       Lighting->{{"Ambient", 
          RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
         "Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 0, 2}]}}]}, 
     {RGBColor[0.368417, 0.506779, 0.709798], EdgeForm[None], Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[Polygon3DBox[CompressedData["
1:eJxNmHm4VlMUh+851zyn23xvg0rlJkOShAhRmQoZQkhkKqTMQ7fQgCKJDF0i
Y5kjShqMiaIIJYSQKXMI633Oe57jj/Xss4e11rv3Pmfv3/c1OXVgzwFpSUnJ
50lJSWmUE6N8OOyhsO3DaofVCWseVsv6z2E1w7YLa2F/3bBfw+qFtQxrHVYe
VhHWJqxhWKOwfazvFNbUOGVhO4TVD2tAewBVhm0a9pvtrcL2Dds5bJewZvrB
tF2M+yPK38N2lxuudnJT31Vecra3H849LIm/l9w7mqOJPnvb1saywvnsKXdl
WEdL/DsYj7625oR3P+PCclTYAWEHhu3vuN3COtvf1v7dnMeksDFhY8MOcg6w
dzUfLIfKyhp3l4k5dXFd8OnmWPoONgb+hzgW/6Pl6mLZTv8j3APmcYwcxOjl
WOpHOh/Yj7UfxuMsyX9S2GFhh4f1dM749DB2Z/s6ma+384HxBEvmerzxurtO
zdzvPvrDe7IlsU+XFfa+srIPp1ky7zPsh72/JexnWpJzgHMgz9nywdXPGOQ4
y7H0nSfHKWHnhp2o/6nOH46BxmPcVdbxGyI3XNvGe75O3j/Nd2HYRfbDe7El
vJdYwnKl3MT9S47Lw86XC5ZLHcucLrCNdbrC8fhfLRd+ZcHzd5SDwsaHXRN2
bdh1Ml1sfYj12jF+vcwj7IexbrQnaZb/RllZg7HmGypjD9fr37DBYcPDrnce
MN5giX+aZu2j5RosxxhjE7c0xvwTZVXYBLnhahDtG4aNjOdb/zenW8xJvA3S
7HlcWHk8bxR2U5Kdn6PMW5+DNWyYczjfdb3becJyp3OA/S5L+u4wxvWy9/M9
2Dji3RzlPUl29vG+895PkZV5TJYL3vss2Z8H7L8tyc7325PivJ9ozmnycd48
Kh9c9xuDHI84lr7Hw6rlmepY/F+y74mwx4zHuNnW6ZsuN1xPyQ3v05bkfC7s
QXlnWML7vCUsL8pN3JlyTzU3XPeGveBY+p60jXyzHIv/M+aEaY7+jH0/7NWw
18LmyQrjy/pMt+85GefbT9+nYYvD3gl73X7YF8gE75uWs8zzrLHecm6s2duW
rOsbxsB/rowwLbJ/jvnmyrtMPvIvkQ/298JeMecH9hP7Q0sYP7KEcaUc5FkR
tlDGxeYk33LH0veu+cn3sWPx/8QY+H0mK2M5+/nGOa+/khuuTdKM9YuwL+Vm
T762H95vLOHdLM041oT9IDc5v5MbltXGIMfmadb+bdha9wyu7x2LP9qC+x8N
86PxGNcwKXQB2gitwTeJruHeRz+gU5pZRyu1cNyvPqOd0DnoEPRThfHQEugh
dAVaonFwbhG2Ksk0EW3ojF+STJOhV8r1q7SO3thZjl2tc5fndztc3J25Tmnr
OObQzr5V7s+SpNBM7c2PlujgGqA79jY/WqKj82tvzlwn7Sl3B2PtqN9ersvu
5oab+7+T3PtZxwddcZAxulpvb1sX/ZlfrqEo0Rh895yf4+Topn9b+3P91dl8
5EZLHCYf2qO7vIda72hbN/mO0KfS/Ss3HndXD1nRFbmGouwlIzrkyKTQTMca
93jrxEUnnGQs7sVcW3C/cDfzLfJtLUoKzdTbOeB3ory9jcs9f4H+rNnRcvS0
75Sk0EO5PqI8PSn0U9+k0En9jXuWdXjRHQOcW1/jnizvwKTQan3kQ2+cI+8A
6/CebVwY+5l7nfzE5Y7nvr7Gfu5O9AbaCc00SO4h9pV6R9+UFJoJXVIzzXTS
ZTKiF66SBX1xRVLorYvko+1y+S411kD9rnTcdfKdYR0ONNRQ54AOGvE/jhH6
DHZOaI56aaZvRpkPjTBaRjQTugKthU5Ce5Spu6rc46GOhQmtcYOMY6znWoq4
vVwv1vIf4+PfxT72AQ70A3qC+5Z783HniV4YL98djiPundZz3UMdHYW+qZYF
zYCWQItNcC1utA0fvmHucL5p9Nck+ag/KcfN1uHK9dBkc6MH0BDERoNMcQ5o
jAdlp+1+1368MciNZkBLVDvXXONQTnPPJhjjbtumOs9HzT3e2DBxz3M/LkwK
DcSdjg7g7n41KXRProNm2E+MZ/Qh7guOI89M6zCiDWa7NtzVnBNo1A3UlMx1
urGmyTTLOc22PtW2ma4R+Z91reeYA+555oADLfG6HAusz7DtNf2Z3yvmRpvM
1x9tsDgpdNIC5znfHJPNx5yGuz/jkkIzvSXTIuuzXGNi8b/B9mGNjcf9xj3H
XbpVmt3hMKIxlsmH9lgq7/vWc830QVJopg/Nsdw6+dEMK2VCV6xw/suMtdC2
5c4bDfKp3Cv14f5fa99i+3MtQvuPcqCNvpIPzfSFOVZbzzUT49BL38iJFloj
wyfG+8Hc6KHvXKNVMqywDe3U1P9s0Gsr9cOnSZqtZ65RKNEjtfz9xXmydZrp
IbRQ8zTzQdegH2hHdzC21LO6RpppMvQYJf//8J8S5zvnPGc+5+k62/BHY6E7
8juD+6KN/vj205f+bfzvCT3G2c5dwH10mc+cu5zJ/5prmM+8g2NlhbOOZ+8w
x62XZ5n7s9ox3EFVrgn3QZXj/nYe5OPMJz93C/cEd8QIn0ear8RvmXeJd51v
dpS+nMHz3L93HM+5CS8+nAN8O8Ta0HtokmOqHbOx61/t8z2+K7xDvD8V7j/v
2wTj8HuT95D2pb4zm6vRN/GdWeqa1XIdGqZZzDWuAe1DfRd4V9iXZlFuqSbe
wue17jP7h0bm++Y7r+F/J+iAQe5Dmc/sJ/c9+9sozdi+9V1gPO8D7zs5PpOn
TE7i1E6L/ef5QtehqWvBntRxzHr3u8p9q+veDXf9h1nW95m1L3f94WrkmrQw
foXx66fF/pS7R6x9A9eftWzod867UM93qWWarSO/LVr53W0b7a1t/ynJ2prb
3th21qJSBv47ruE6/+47WOoc6W/hmB0cw3n7i3E5C9Dd6MKetrXyvGAsPn+4
1y3l4bm1+/0fhcvCSw==
         "]]],
       Lighting->{{"Ambient", 
          RGBColor[
          0.19699838300000003`, 0.252204821, 0.33320940200000004`]}, {
         "Directional", 
          RGBColor[
          0.15473514000000002`, 0.21284718000000002`, 0.29811516000000005`], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[
          0.15473514000000002`, 0.21284718000000002`, 0.29811516000000005`], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[
          0.15473514000000002`, 0.21284718000000002`, 0.29811516000000005`], 
          ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}, {}}, {
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwt0LtRAlEUBuBlcRUVWWwAxwKwAq0AEwklM4MAU6kAKtAKtAKpQCrwhW9w
DMgNVDTQ78wYfPc/c8+9O2fv5sFhs1tIkmSPiiLqFcubrLLBFjvs0uKHDnG4
JwaccMaQEe9xX/9KlmXKtfqGW8bccU9R70EuyEf5xDMvTJjywbr+q1yTGZfq
C8455Zh+jKV3JH9ps0+DberUmJE7l8tV+R3/H9+OeWMv3oFl5pT4YolFspg3
Zifl8//9/gDvOCTj
       "]]}, 
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl0DtOgkEUgNGRzsIXIIL4ixSCiAmuQFcgidbS2Gqw1xXoCnQFsgJcAaxA
V6D44CUSCkvOH4uT705uMplM8eL6rLkQQjilkggh6bCrMy1yyDF1GlyRsr/V
nN7rIy2e6fLKol2Vd3NZI3rmDz754ps+23YDLehQR4z5YcIvS3YHTM17usOb
+YUObZ54IG93p1m90UvOOeGIGn/sx/doSdcoxG8hYiu+h01W7XK6olndIMM6
6fg/WE78/98cS+4jYw==
       "]]}}},
   VertexNormals->CompressedData["
1:eJztWHtQldcRZ9QKvo1E46tqVApWa6ZprGKC66NWoumoRHyWgmKVCI0vrOgw
Ro1hFI3RtHYMmBin4hMfpJURHfihFdTgIwZFeQvcB09REUMqsY25Zz+G42xv
LmBi0/IHO9/v27vfnt/Zs2d3n5+z0Of3zZycnAZ9/a/51zK3as9EX18zscwP
OLfW1/ca+b8QYh0SVkRjhj58tyTeQgefXXimJD6DfC+Y94UML6COvfb13t6r
mPzaLp+xvdcNKhy3xhLSJ5csveJe9Q8voYDZqRH+4ZnU/40Yj9eLM8hpUpeZ
8QmldM29f1R8QhaFHTnZ3z3uMkV69h/Z7GQZ3U+MWtvsZDZtPLrg2iDPZLr3
95XL2s8tpzcDIxLaz80hJ9vf6twDzsfddpbT+i8/rnXbmcP60PWVfej2lT/Q
/VH+Q/dfrRf6ehU/0PlRPELnk/WYV9afsubqqepSkyFTLo8fFzr/Bh3LHzLy
Slwh7aGsbg/etFCzn3q+6DYoi9pvWGRtczuf0ub9ucLlnpW6FoYfan03m0a+
8FFQz4BMGvWNLCGP/dO6XIjKpYl5XUcPO3aFlv/GLfDqe6U01/NOYt+v8ije
fLo7eZ2m96f335c3q4xqJvqeHFyWb/AcVRC2zXV3GXUYleEV3/sm60PXV/ah
21f+QPdH+Q/df7Ve6OtVvEDnR/EJnU/eJ45T3i+2y7yy/cO/TWkdNs5kSI4f
d8zKWRpZQHcPL0nvWGGm6oIX20z4JI+6BMT1CH05hxJXJp26GWGlFZnjC5uH
3aT1E6csqqlIp+DANzb9saSY3pndeZPnogIaWPpw2dhPzlD87lXpGXkl9Izv
nru1PQoNnr/wiTnrNrSU0rf4Xrk4o5D1oesr+9DtK3+g+6P8h+6/Wif09Sp+
oPOj+ITOJ58TPvd8XnhfOU55f9kP5pX9WbnX9UStV5EhByYNnOCVcZPunx+0
IWBZPn2Z/eOWZTUmuqr4ifmRT0jvyAwlLbRke9vD2ceL6NcVw1wvHTirpJW8
2oauDT1mMng++m7Qzh6di2nz3lq/sE5m1oeur+xDt6/8ge6P8hu6/2q90Ner
+IHOj+ITOp+cpziPcr7ic8Xnns8XxwHHKccD+828sv97LVNa+oUWGHLywJw5
z/mZ6J8P5o91XZFJD2rbhV7qXkQfxv6k051XLXT701a/uNg3jV6aPs7SbaaJ
0p7ZmrI0yWrwfDNowWTvdBMNXzX0g6sTilkfur6yD92+8gO6P8p/6P6r9UJf
r+IHOj+KT+h88j3B9xLfF5zXOI9yfuNzyOeezyPHDccpxw+vk3nl9b7e7qWq
1MU5hnwvMnTS5qJiatVv6ajoK5eUzKPwpZZuQV+UGjz/svfoiYnJ+XS8wx1r
zLky1oeur+xCt6/8ge6P8h+6/2q90Ner+IHOj+ITOp98T/M9z/mH7xW+l/h+
4TzIeZTzIZ9bPvd8fjnOOE453pgX5pX58Xkrv+/we58Z8vrMfi3mHawweL7k
6pTqvO0KWdNHmC6eucV60PWVfej2lT/Q/VH+Q/dfrRf6ehU/0PlRfELnk+sk
XgfXS3yvM873O99DjPN9xHmTcc6ffM4Z5/POcck4xyfzyDjzyc/15W3Wh66v
7EO3r/wxcPZH+W/g7L9ar4HzehU/Bs78KD4NnPnU4hlCPEOIZwjxDCGeIcQz
hHiGEM8Q4hlCPEOIZwjxDCGeIcQzhHg2+NTyM4T8DCE/Q8jPEPIzhPwMIT9D
yM8Q8jOE/AwhP0PIzxDyM4T8DCE/G3xq9QaEegNCvQGh3oBQb0CoNyDUGxDq
DQj1BoR6A0K9AaHegFBvQKg3INQbBp9a/QyhfoZQP0OonyHUzxDqZwj1M4T6
GUL9DKF+hlA/Q6ifIdTPEOpnCPWzwafWD0LoByH0gxD6QQj9IIR+EEI/CKEf
hNAPQugHIfSDEPpBCP0ghH4QQj9o8KnNNyDMNyDMNyDMNyDMNyDMNyDMNyDM
NyDMNyDMNyDMNyDMNyDMNyDMNyDMN6DNl4w5kzCvgzCvgzCvgzCvgzCvgzCv
gzCvgzCvgzCvgzCvgzCvgzCvgzCv0/mEzueIvaaKVW5mQ0bu8PhdWUoGVS0Y
uzG6hYUKnc1uDxebKPxW6+ToFhnUJfwzj7dfi6OY8z59fXuWU3LAg8vmsXmM
Q8eVXQj2odvn3/N32M6qTS4lC8tPGXLJmNq+Z/wq+RkCbrwX9A1cfRf6dzV/
wDjve1nqSveu3U8jaX/zrQcOPWYHGg8GHwLPEHiGwLNuH7p9tst8s33mnb/P
eM3SqT8P8TlKVeOnTfXaUk4n8i5EeW3JYRw6rtk37LAe22N9jTdi3viZ32s4
dFzZh25f+y40HDqu8QCBBwg81NmvH8+GnY8mV9/YNsJsyOjzgZbmLgYOATfe
C/oG7vphl/nrYs00+J0x3WdZTDTmXy7R62Kv8TP4vYbz78A4P/PvBH0S9HWc
BDvQvyv1xRLuftzlfpvblcZ72/MRyrrz8frE5Drc9gzGoeOSfUf1/4//Z1za
F2kfHbXztK3XHs7x1Vj/mY+G2jnh0fa1YccK6DmvTksezRVsz3HaflSSvX35
vvxvKL7KdUC5uaaSpszp4f3BpBiacX/HgIDEAopYHDyi445S9bxLzANTNrYM
dF1RgreKfxX5qL+2PScY9jMrkPKoDrTJuvsu+1pwn8CqStqQ5e+0dV4sPe/9
h2VrzFaK7Tc76JyXWckYu/73PPK5d1CbStjkZbv6ah/R2H1sbNxK571r1+ur
H82p6st4yv3LoqKN/qUoSagud95WQDZ5qsF+NlU8d+z37K2/FVUiPqTdveWj
jzV4X+z4b/dcHHJNs5oPVSCpwysRk5OuK7mXnKvjcoPfNtPJ5DFZAw5Yaaff
ZlPlkF0UOmfdavcdFrBcN63PwZbddpOKVy1+c8TvvvJ+J7+aKAvqyz0NjkNp
vxSf1Fg+G4tLcev7zZ+ZJWxSrmc4Puqvr+nX1VRx/qTz/7fFOZ8yzvFZn/c6
/jnO6q/jyFO3Lnu4o/fjt83zfK4Y5zj03PFg6pZbZUpmwybTHM4Pjup/V7ij
fDa2PpHyxoDB516efr0O5/rBY9fKrzZsqcMXBdfua9kmReTzh1IPPyncUX4c
zc+TOrdafra6zn7o8uH+IVv3O9zX/LfgEj8Sz1Kekew3MM88di88aR6eNC7x
KcWbHTuP9S+O+vNDjWcJtzNHegy3V2/o9v/X+Py+cO7zGed+/2nzs6lw6bxL
8dlU/Lg6f/qPhD+VwyZzlIwV9XkOwjjPQ+x9l+8HzvNS/v/8rzFDf+Zt0WSq
3XOq13tSf8H6Un+qz5ek7za0H3S0j9bxJs5jj+k7at/R72o82O3j1FwJ9WV8
k527NGtRdEbtJdjkLfV8WOT/u5p7J7ncgFNtJWxyp139xvpZX8/+vjhan9jz
p7F9/b8BrvwCHQ==
    "]],
  Axes->True,
  AxesLabel->{None, None, None},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGridsStyle->Automatic,
  ImageSize->{348.0335396040316, 200.3661802854235},
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], "RotationControl" -> "Globe"},
  PlotRange->{{-1, 1}, {-1, 1}, {0., 1.9999994285714693`}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{-2.9593209018419566`, -1.4048971922094498`, 0.8477521331399352},
  ViewVertical->{0., 0., 1.}]], "Output",
 CellChangeTimes->{{3.680452273644133*^9, 3.6804522889700933`*^9}, 
   3.6804596835430517`*^9}]
}, Open  ]],

Cell["Difference between learned curve and expected curve:", "Text",
 CellChangeTimes->{{3.680452311828353*^9, 3.6804523257004595`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"x", "^", "2"}], "+", 
      RowBox[{"y", "^", "2"}]}], ")"}], "-", 
    RowBox[{"result", "[", 
     RowBox[{"{", 
      RowBox[{"x", ",", "y"}], "}"}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"Mesh", "\[Rule]", "None"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Full", ",", "Full", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", ".01"}], ",", ".01"}], "}"}]}], "}"}]}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.6803583789252787`*^9, 3.6803584162012367`*^9}, {
   3.6803584735966024`*^9, 3.6803584917210913`*^9}, {3.680358552786993*^9, 
   3.6803585569379997`*^9}, {3.6804507381376443`*^9, 3.6804507479426928`*^9}, 
   3.680450929230296*^9, {3.680451013709833*^9, 3.6804510138222623`*^9}, 
   3.680451076397651*^9, {3.680451527751148*^9, 3.6804515330462055`*^9}, {
   3.6804517309652963`*^9, 3.680451733757086*^9}, {3.680451851701318*^9, 
   3.6804518594453087`*^9}, {3.6804522299407773`*^9, 
   3.6804523528055754`*^9}, {3.6804597577416954`*^9, 3.680459787774376*^9}}],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1: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
63ewOQzWN/0XI2dfRA==
   "], {{
     {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1: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
jmkeTEbefb8c/n862rSj
          "]], Polygon3DBox[CompressedData["
1:eJwtk81LVGEUh98z+JU2aZqZ2deYUEZjUAhDDhbZh9M4OjMqIUXRRBFII24F
oa0LnYWl6caV7itoazBUuyA37hKcVdjfkD0/ziwe7nPvzD3v+bqxwky+GAkh
3IQa2LAQ/nDdgQTeBdP4HIzh9VAHL+EVnDP/bQHy+Cl4hmfhF74CP/BduI53
wyI+D+fx01DAZ2EUP2vubyGHv4fvwWMolmIqdg468GOQwC9DIx6gUw7b+Auo
4K3wD+5xn+I6rGf4GzjA9+G5+Tt6twkO4T73D4O/04YfhTiehCH8Kezhv+GG
+Rk6Kwa3uD8CF/BrcAc/CU+C93QETyomHoUIfhwG8YxyxKeUE/4VrprnrNxV
c7NqhXzwHqqXy/AteM/emeek3H5C3LxH6pV6dBtf07ygH9Y1G9jity+whPfC
Z7wMV/AzUAw+4wweNa9NOd81n6lmq/9kdZZ57h+hYp6DclFNqm3AvNfqgeEt
5r1NwwO8z3wXtZOv8bT57FWzaleOylU1l/BxPQu+Y9q1CSgFf3YRj5nv6geY
NJ+RZqUZNZjXWK7u/2O83XwWmllKszTfTcWcqH4D+hZqoFbfCvwNvnPaPZ2h
s1ahB38En4L3VL1VT9QbPbtkXrNq186dwDfNd1MxFfs/mz1bGg==
          "]], 
         Polygon3DBox[{{354, 226, 421, 252, 253}, {410, 309, 360, 233, 411}, {
          371, 45, 321, 262, 263}, {408, 223, 308, 351, 409}, {261, 260, 317, 
          13, 259}, {253, 252, 264, 32, 318}}]}],
       Lighting->{{"Ambient", 
          RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
         "Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 0, 2}]}}]}, 
     {GrayLevel[1], EdgeForm[None], 
      StyleBox[GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1:eJxNkjlSglEQhN/oCUxdAkP4vQCSGBMaGKsHEE6AV2Gx3PcV11JEQUVBS8Vd
9CR217RVBF1f82b+eTPzGJxMj051hRBGoG5o2ELoBefAe/AMKkNf5vwGn6AG
/DM4Zp7zYB5jThu8hjLwN2AdmoC/Bd9V9wOcBtPB87bwewjcBvegAfgSuAEl
4TfBItQDP6M7WacJvZrzjefmNctgChqHPzW/mz3cgedQFr4C1tTHlfk8nKul
GjzP6j7eOws+Koc7+FUf3EFbs/+Yz8bePnV/RnPuai7OtyPPs4Tq58CCPGfN
yefNe2UvF+aivwSr6r+m/fUHrxvnW0IJeb5pn+LMi6AFfBMDF81jkXKb6pv7
4/cxnTOeVN28eivonZnP/a6ax9fAZX2/Yr53xhvgks4ZX9f78p1P9N/jf7Cl
Pb+AB+Z9H6p2Zy9Rxzz/85W0233Vi2uGI815bP6W7J+7n9ceuI8/V/hl8Q==

          "]], Polygon3DBox[CompressedData["
1:eJwtj0kOQVEQRV+JLZhoBoYSG8AurAALwApYDiGaaAba8CVEk2gHmpCwEqdS
f3DyTl6lqm7FC6VsMeCcC0EQ7uLckfcED7wFKTwNbXwEMTwKY7wjVstAF5+I
1SIwxT0o4RVY4RdY+vOvugvyeE7/xP60phlu+Fqstwob/OnXz/DCG5BwlrGJ
DyDpLOMQ34r1lmGHv8V6PfjgNQg7m1HHF2JZNPMS74ndpjP7+FesV2/44TOx
W3XGHN+L7dKbDvgfszQztw==
          "]]}],
       Lighting->{{"Ambient", 
          GrayLevel[0.8]}}]}, 
     {GrayLevel[1], EdgeForm[None], 
      StyleBox[GraphicsGroup3DBox[{Polygon3DBox[CompressedData["
1:eJwtkssuw1EQh8+wlOAJKhYsGza16htYWUmQiB0Rl8St7ncND2DnLbyBN3BZ
k2g1kv6pS4tufJP5Lb7/N6fnnDkzk/bPLI4tdKSU8tAJm5bSHN7C5/BOfIHH
4Zp4AK9BmXgdX8ID8TD+SnH+GTZYl3AJ13EFuuEXGtAj+7qqvJ5/ELfxJzxB
Bh/wovPfuruqGryWaXgkHsF/On8Lu6xH8Z5qaKgOr9Fr5ee0zWcC7+CW3n2D
pvJketPv1tWn9zuFlyx6WsY/yus59/kU8QEegnviSXxlkXsen0Evcdkid1W1
+fve/yscs9eHT/CseixYnGlpPhXdzale77+muKk5rFjsd1nM0fdv4FQ1eC0F
5fdZZpr3HRxa/DeOLHLWtPcPbYtbZA==
          "]], Polygon3DBox[CompressedData["
1:eJwlz7sOAVEQgOEzohaNlqgleAFvoFJJ0GjERlaIhHW/Z/E83sAjoFYQiYZE
o/RPpvjiz+Y4Myddb5f8iHMugSg24lyK3zi2dBcPOokevUCBzmJJr8Ra/7Om
czjTTzToPkI6wIDuIObsTr07FJt1x44+4EP/0KZbeNNf+GJn9Kye2YvN0Fkn
ZGgPL/qGJl3Dlb4gTwdiu3gY0jMUnb1pTk9QcfZtSo/Ezuq3MV0Vu0vfqG/V
mTr7iLLYjrqr7qC7/AErfS0x
          "]]}],
       Lighting->{{"Ambient", 
          GrayLevel[0.8]}}]}, {}, {}}, 
    {GrayLevel[0], 
     Line3DBox[{248, 1, 244, 228, 16, 31, 46, 61, 76, 91, 106, 121, 136, 373, 
      374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 
      388, 389, 390, 391, 392, 393, 394, 395, 367, 248}], 
     Line3DBox[CompressedData["
1:eJwt0L1KwlEYB+B/mZmlQ0MtQSC4tjQ1hEM4GAqB4OKmSOBgDi3dQUv5lR+V
RVNdgXfgHbRomXoBXUPQEzQ8nMOP33vgPYlyPX+xEgRBgRCrfHMjrFGiQpkf
ecoZ5YQ4abbJsMMpu+TY44x98iQokGTgrTdu3Rs0adGmwx1devQ5ZKI/5YNP
ZnwxZ8GSe70HHhnyxDMvHPGuM2bEK32uuaJKkSzHHHBpJsI5YUJ/e8tjbLFJ
lA0irBNm7f8/fwEUZyQt
      "]], 
     Line3DBox[{237, 14, 368, 369, 370, 372, 267, 30, 230, 249, 15, 245, 
      237}], Line3DBox[{294, 181, 196, 232, 250, 211, 246, 238, 212, 213, 214,
       407, 305, 349, 304, 348, 303, 359, 299, 344, 293, 294}], 
     Line3DBox[{311, 224, 234, 251, 225, 247, 239, 414, 364, 366, 362, 361, 
      310, 352, 311}], Line3DBox[{421, 252, 264, 319, 254, 355, 363, 421}], 
     Line3DBox[{420, 419, 418, 417, 416, 313, 422, 420}], 
     Line3DBox[{447, 256, 320, 266, 270, 271, 274, 325, 275, 326, 276, 327, 
      272, 323, 268, 321, 262, 357, 260, 317, 258, 316, 257, 315, 255, 447}], 
     Line3DBox[{437, 436, 435, 434, 433, 432, 431, 430, 429, 428, 427, 426, 
      425, 424, 423, 314, 446, 445, 444, 443, 442, 441, 440, 439, 438, 437}], 
     Line3DBox[{465, 280, 333, 284, 336, 287, 290, 339, 291, 340, 288, 337, 
      285, 334, 282, 281, 331, 279, 465}], 
     Line3DBox[{460, 459, 458, 457, 456, 455, 454, 453, 452, 451, 450, 449, 
      448, 330, 464, 463, 462, 461, 460}], 
     Line3DBox[{483, 296, 346, 300, 345, 301, 307, 350, 308, 351, 309, 360, 
      302, 347, 298, 297, 343, 295, 483}], 
     Line3DBox[{478, 477, 476, 475, 474, 473, 472, 471, 470, 469, 468, 467, 
      466, 342, 482, 481, 480, 479, 478}]}},
   VertexNormals->CompressedData["
1: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
tLSLq5/Rre3jIrh+zqialYXr5hRF13yuRcGxdWtw/Tw08oDSa4uhdhvffnPB
EjQcUZJmFFoIxFwn5jwx33/M6jidFoehrE1WsXcK89GuefKP3IVyoHriOMXK
B0NR5fsd+EcLUYR/QLuVD4KF+5+o4jxl8DhEEp+3p9Kiz+B8ddfxhbnXEAYJ
32bJun+JR5YOhuccZZ8AgSOBK4GneYp8Lh43YRWM6q3x+FWjFjVx80VmXRsp
eL4kqUEBPN/RDwn4foGGx3XZOD5Ve2ck4vg0RK61xvXzQKEsG8fz5dC74H+l
n3XIi6TxfbBnofFq7j6IvI/sWIrvgzdDl03D90CLy+vFuBblu9z5Y56maKxt
xfeW8s+bm/G44skjQng8QvLCEvg+KF+yvBSvi7kWDCpeD4ROInQToZdyZua5
4Dpm6fWr73FefFw28Qcf1mYH9nhtYaPZT1rtqJ+aUNfeBIbXlhogeJPgUYI/
0SWrkOaQAdgXU6BLKWlBQTzhFR6P64GoS6JOifokcCRwJfD83TkyLeeVAr4P
lhpWJnL3QUR2Gd36r/bB62yb/M/9dFic7VPGtWhsk5jVMQ8ybKs0McH3cO2X
WnO494AknHN1cfwX5ad343sjFVuN4fccXi/3Er/fuRqRu/E9x50WdBDvs2kR
M6Tw/iJ0J6FDCf2psiJMmDtXQGsw7zk+ZxbVar3B5wsx1/8657vg0t09n68M
YuiA4tK9fkpJqG5XtdiyhPtA8CbBowR/En1O9D3R77+L52T+A/aZEX2ZTPSg
r6Z32Qka2tnVUNCX2fy37/vJCtfMu8I46KLv2AVeuQbUZ3w7mVeuEAgdT+h6
Qs8TupPQoYT+JHTSX3VTO7S8Pk7hvo/kvZz+eH+mRM0b/P3KbEeFoQ8Y2Ew1
tDMqzECrBmnnjQqfAsGbBI8S/En0OdH3RL8TdUnU6X9Xn5P5o6rWs0+rMH7Z
dZ1Be1mlzXBOfN1KfQUaLOw0uypxm7uvusWc/LH598//d/mDNk/jcONDhNXj
U9uFxznZ+95pFydWVRXAi68CutFPMHSqNnKIKZkKdfwzNpIW08Gonqm5nsIA
heIIy47LLf/nvuP9f/Vf4qMFio7ToT2nv4vVQYfgqfWl+xzJYOmpLjPG1UFd
EbxaVu9pEJhfMhi4oAUCS/ZeK7tHh+2hLmfkFjBgdXWv/3ACGYYEE49IXS5E
QkkSQRbWGNrZrKB753gJPBllijm+f4fiDoukFh3oh0hsgy+toQOa08fi1M9x
N0sOtT5iTR+Mkwaf0htaoYZjLapVQUX8Z9xebj/fAw1KVdLTGWSYnhpQ5p3Q
jeiL0lUrVvZA8/xm54qVLRCW9DhZs4aOXO3eHb3P3a/aaxsd0leT4VVKV6tU
Ew1hLyuV3dcyYVjA7rWsUguwyQNudtIMtJRyhG9vFR3Uy0NuHzEjQ6FKqN+r
/UxkXbjjeXgODa6vvjBlA38LCLFv/dhVxgD17XskhzNoUGPuOHDIoxXyXzo9
Y7J74H2gpEOxBxUq55pnSewmQ9vdc4cb+j8gg+8Bg1kVPfAsdv8FufiuSfGf
+epG+fCaHnRzSgjrzVcqZLRwIvdrtIJAJjrltK0PhOdpU1d6UODswEIBx5xW
8HscKxf9qh2ldukOzNHrAYk+n45FuV0gIswzGvEeg7g4k7nLb6ZB9ukWd58F
KTA+1H7CK6gXnVv9lLruawcoVAgfUJZrA4p95X3nW29hUMuus286dy9QT/z6
XCQPnva5XdU3pyG75m2Owfo0SD0V1I21doHUxmj/XuEetERlWEg+pAMGvrie
WqHYBR5aBvaJlF7kmPOINeVTG/C6RK2N5aWAqPHY1sgHLOCJz81vmFoPGa7K
jtrC7WAn7c+YFV4Hyhf5zx8s5KAj50sXT2Mg6GY/U/Z7SIHLcusbNKa0gKJ3
VYIVuw+yvi/89qKbClIS4uvSFtaA5dfLy+PO90H5+oFHtggDnaX6pUVKjyFP
uEZ/+jMSbOEtTRnnrwOXQn7fdrEGCFS5qsX7gQ0pjY1KiVcHIPSq1ur3TStI
P207qHrqumfZc+s7WX0aOciG9NP2wW59mKnrkwKm92I/fBnYQPppMdCbKSxy
8CKGVrvtOzb94zO02VdZ9O2nEnCYXSft/qALhldUl0eK1CKH7YEyc9f0Q/ie
8YqSYQxNVDjZ3DkagQRddlqplj6HlSv8498ks8BN9kAUu6UOOc7OlRhsb4Nw
svswx70Ddg9kx7KPv0Npdkv2SNztB7Mly3r2P62Hl6kqxSfuNqEdoW1pJxXZ
EOE/4LdvNwuudLhLHc55h/YEbcvdt3vy712T+Y9sc2Qs3cFAu73PagtGdSPM
oD5TikmBkeCvZkYzupHOJieTlU8YqNgB091u2wFle9Z6Cltw9XfDmPgKCyqS
CZ+XT1Vpg6yGAwaCdUwUnTxG03DpRm5Lps8UIk2uh+t0svzdranIJ0/MhG3N
RJQcpZg00w7wW8MXzff4A5q+d9VOaaU+5EBflORtT4HW1X5bzT/S0fW8mwNB
DDoKi2qpkNnz75uDrqo7bsiKY/BduLSRevYtip/2TKL7bC4EjDsMRKp1ItL3
IO0zHr2oXq15XZx5G0zUh2zNsOlGM1IafY+ymcj9uO1Z17utsGZ+9LVnPXTk
UgXiLhgdWSnNErvj8vtxWqcYWypEM9Hy2/rFlxNpiPxZ8KRC9O/rsUR++d0W
Eq3oyRn9m0dU+qE7SOKy76w2MNt4qmqxWQf69uHy0L55faCjvyVXJq4V3m41
OWP3CgNnq5BjiocRvFgh4tCckAKjh1Y1LnvGhHDJmKEVNjSI2X/Qs/ZqC8yI
OrmSr53+yxo/cNwxXk2GZsUqaV3XZvTZzSZ94Y4+UDX1arwz3gnNB1Q2SkRx
QFNpbLOceT2U38g8vepBMdj6lpGq5XrhC7+QgrYEFURvbRp59pAMerSUESf5
XrSLRC7JvdkFVv0X36YzWkHm8PHxVP8+mEZznV+U0w77az1mHBhqhXQDsYmJ
XTSk56dR2TSXBhNnzjhpcvc78U9RZxycehFneCSdeaUdzl1Qzc4W74CEG/PL
DpT0ojA3NYeAmxToWb2etTOljZt/oedBCoYkU+bMdm14CQ+KvgU5qqfCmN6n
fTSdepB+v8RyfjIHXZnRea/3aMGk+IPIHeHNi9igwbo8aq5WCMfEM23PU8mg
1LGxmBWGoXANe2ds4ikk8xmJdAyVQKiAcZh0SDk07t856O/NQRsODO9/XlYH
oDbd+KJkxS/LeH1/WwGZAxeDvVatujIAfFHUD2s0zyHTTo2MYXI7hJ1jqwTQ
qNAnIHS3RqoIxXfzv5Hh3v+tBKPNqSMc9Mby26rkWc+Q3936dXVVdeCQ3G+x
Y+0ApAj5tymfLURPThzU/XKjHfqcvXw2PG+DoZWGLTVCjag/fWhLgwkLFhme
tsCsqyH/9DrVO2mNKH9O04hYHBtKj+fLdiewYHTRZ0th3Xp0+mm8Qnrd5LxU
aHOOVKLNRHVXI886yHejocX6PXxRk3/nfCb0Q95vZQkKMDeCmOUYGGBpGZJh
xWAay6sQrJ6C3D0i+nS7MJR6qO6+/7KX8LQ38Ap9az269u0NZccNDoy7nwi8
nVH0232kqu+dZWjehb4YNXs78PQieXdOnatsG/BnrKu+3czlzdt88k6BTBSl
ynTwjJqc97TPFYna32EiwoKZy5JTKc9heaFO26AyE4zs5m2dIU+HGyO3HHgK
muFH9oGxy950YBt6aE64MEA/c42JuDsZnLoXJp25xQArE0lxn7d04OWtE8dc
m0FYamfZ6CAdxb9dnc+1oGpoJyRrSgYrw7qAjGcYjITOaDhxogBuL3Fu7etO
mTTOlgtvl79n0RFh2++Wzz3+P+Bb9YhmioM/HT64PeTnC2SAxlmDXiPG5Do/
TikrusCuEO55u5pYPMDQaa+XqX3jk8f5d/uvyU49QFXvQQPx8kV9b7tBf8uC
e1T1f/aUf/z/O3+57+VO8p0utFnr/POnBixQ5WF+6S/LAN/GKYcL2zCI3D12
f8GRNCT2sehi1MYXILlpI+uSVC98SmTq95tTUaqZ1wZ/DTLQ4z4XXxPshQZ3
luWjrVSEHeFrqVQiw7vb0Z8CX2NozpXi4ZJcEqKKr3G+yE4BLY7xufQKDPS7
VCUVRXKQh7a6s13oCwgO3xqXL0AHjpD9fRcxJgrVIlXq7mqBhZ3j+kqOHDQ3
WtOmdOo7pEp6EXg8qQj2zU2+MBBHhUvLZglEpfagKcIS3+jPyfBi1c5lGr4c
VKzsYWt6sgFlXnpobEErBJVN1b0GMRS4ELteMs6kD/muGZz5rmdynhx3EdFB
ahhSqrypU6JYhZLG471LFHPgVobA44+2NFQalXPBP4GJVu785kY62wJH7nv6
FNBoKD1bZVGiARPtCH73xlmvBYz3vVJ2V3mHdmLq20atOWBVdPEqVBcD9tlP
x1+Ggcz0ygxDljNQgN7jp42ZzdCfenpwxUIGImy23qvRoJTJdVfAirSNcasY
KJQnZWSaGANRCiPt41/8/d/NJvO3xKyde3qI/stqJe43PmH0n/te9I///7d/
1endW4Q3vEclX0jUtsB+eG/RvU6bPrl++8f/n/XrNFgwZ6aygRT3eFpMYAGU
+t2Kd3D+z/HVP/5/7SdttLpU+4mGCBtkz9efp90B/wWYi8Vm
    "]],
  Axes->True,
  AxesLabel->{None, None, None},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGridsStyle->Automatic,
  ImageSize->{505.675871348679, 171.33333333333334`},
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], "RotationControl" -> "Globe"},
  PlotRange->{{-1, 1}, {-1, 1}, {-0.01, 0.01}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], Automatic},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{3.2436190933004645`, -0.9080430568094379, -0.3230990321199417},
  ViewVertical->{0., 0., 1.}]], "Output",
 CellChangeTimes->{{3.6804523350816603`*^9, 3.6804523544214296`*^9}, 
   3.6804597029758472`*^9, {3.6804597636456027`*^9, 3.680459788878394*^9}}]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Learning \[OpenCurlyDoubleQuote]z=Sin[3 x y]\[CloseCurlyDoubleQuote]", \
"Subsubsection",
 CellChangeTimes->{{3.6804507867252703`*^9, 3.6804508078216476`*^9}, {
  3.680450965765478*^9, 3.6804509705495915`*^9}, {3.6804510395973988`*^9, 
  3.6804510410773745`*^9}, {3.680451762444683*^9, 3.6804517909650903`*^9}, {
  3.680452041620799*^9, 3.680452051260621*^9}, {3.6804524641635017`*^9, 
  3.6804524798673635`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"DotPlusLayer", "[", 
      RowBox[{"10", ",", 
       RowBox[{"\"\<Input\>\"", "\[Rule]", "2"}]}], "]"}], ",", 
     "\[IndentingNewLine]", "Tanh", ",", "\[IndentingNewLine]", "10", ",", 
     "\[IndentingNewLine]", "Tanh", ",", "\[IndentingNewLine]", 
     RowBox[{"DotPlusLayer", "[", 
      RowBox[{"1", ",", 
       RowBox[{"\"\<Output\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], "]"}]}], 
    "\[IndentingNewLine]", "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6803580407480574`*^9, 3.680358081136017*^9}, 
   3.680358318545034*^9, {3.680358450833645*^9, 3.680358454922589*^9}, {
   3.680358520949281*^9, 3.6803585273934994`*^9}, {3.680450694661951*^9, 
   3.680450695821642*^9}, 3.680450816894287*^9, {3.680451119407272*^9, 
   3.6804512049501567`*^9}, 3.68045125579736*^9, {3.680451324085854*^9, 
   3.680451472030263*^9}, {3.680451504061485*^9, 3.6804515104773593`*^9}, {
   3.6804516629410973`*^9, 3.680451677661211*^9}, {3.6804518693813314`*^9, 
   3.680451873732929*^9}, 3.6804520552372437`*^9}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Inputs", "Input"}, "Mouse"], 
            "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "2"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["3", 
              GrayLevel[0.5]], {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "3"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["4", 
              GrayLevel[0.5]], {"Layers", "4"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "4"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "4"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["5", 
              GrayLevel[0.5]], {"Layers", "5"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "5"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "5"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {10, 2}], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[1, {10}]]], "Parameters" -> 
             Association["Size" -> 10, "$InputSize" -> 2], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {2}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {10}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "3" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {10, 10}], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[1, {10}]]], "Parameters" -> 
             Association["Size" -> 10, "$InputSize" -> 10], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "4" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {10}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "5" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 10}], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[1, {1}]]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 10], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Layers", "3", "Inputs", "Input"] -> 
           NetPort["Layers", "2", "Outputs", "Output"], 
           NetPort["Layers", "4", "Inputs", "Input"] -> 
           NetPort["Layers", "3", "Outputs", "Output"], 
           NetPort["Layers", "5", "Inputs", "Input"] -> 
           NetPort["Layers", "4", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "5", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`TensorT[1, {2}]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{332., {70., 78.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{
  3.6804511575584764`*^9, 3.6804512059581394`*^9, 3.6804512566843214`*^9, {
   3.680451348593864*^9, 3.6804514727469683`*^9}, {3.6804515069597836`*^9, 
   3.68045151167461*^9}, 3.6804516805277348`*^9, 3.680451795143478*^9, 
   3.680451876751011*^9, 3.6804520577048893`*^9, 3.6804528720832815`*^9, {
   3.6804598340205183`*^9, 3.680459847199238*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetInitialize", "[", "net", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.680358433289722*^9, 3.6803584364737926`*^9}, 
   3.6804508183659563`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"x", "\[Rule]", 
      RowBox[{"Sin", "[", 
       RowBox[{"3", " ", 
        RowBox[{"First", "[", "x", "]"}], " ", 
        RowBox[{"Last", "[", "x", "]"}]}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"RandomReal", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"10000", ",", "2"}], "}"}]}], "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.680358323212538*^9, 3.6803584031626587`*^9}, {
   3.68035846091537*^9, 3.68035846465798*^9}, {3.680358535081916*^9, 
   3.6803585378656015`*^9}, 3.6804507086856833`*^9, {3.6804509096300173`*^9, 
   3.6804509097505503`*^9}, {3.680450994789851*^9, 3.680450996390175*^9}, {
   3.6804510501735764`*^9, 3.68045105076607*^9}, {3.680451687591172*^9, 
   3.680451688462194*^9}, {3.680451800068883*^9, 3.680451800605103*^9}, {
   3.6804520685672483`*^9, 3.6804520945170126`*^9}, {3.6804528804025493`*^9, 
   3.680452893386714*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomSample", "[", 
   RowBox[{"data", ",", "5"}], "]"}], "//", "Column"}]], "Input",
 CellChangeTimes->{{3.6804598931267877`*^9, 3.680459900449745*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "0.4812247739182043`"}], ",", 
        RowBox[{"-", "0.7112688987947631`"}]}], "}"}], "\[Rule]", 
      "0.8556682178580666`"}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0.8643053129804783`", ",", 
        RowBox[{"-", "0.37686399195087317`"}]}], "}"}], "\[Rule]", 
      RowBox[{"-", "0.8289213937649437`"}]}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "0.619433041102917`"}], ",", "0.8347501371069699`"}], 
       "}"}], "\[Rule]", 
      RowBox[{"-", "0.9998083007172605`"}]}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0.011986849107326947`", ",", 
        RowBox[{"-", "0.029479767622418773`"}]}], "}"}], "\[Rule]", 
      RowBox[{"-", "0.0010601083800633277`"}]}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "0.3123226921977107`"}], ",", "0.53642335118391`"}], 
       "}"}], "\[Rule]", 
      RowBox[{"-", "0.48171575675810463`"}]}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{3.6804599009287233`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"result", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", "data", ",", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "250"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6803583683570848`*^9, 3.6803583753528333`*^9}, 
   3.680358427497135*^9, 3.6804508205499535`*^9, 3.6804511683417273`*^9, {
   3.680451541565759*^9, 3.6804515462452507`*^9}, {3.680451576949438*^9, 
   3.680451577173006*^9}, {3.6804518818292227`*^9, 3.680451882277031*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Inputs", "Input"}, "Mouse"], 
            "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "2"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["3", 
              GrayLevel[0.5]], {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "3"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["4", 
              GrayLevel[0.5]], {"Layers", "4"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "4"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "4"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["5", 
              GrayLevel[0.5]], {"Layers", "5"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "5"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "5"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {10, 2}], "Biases" -> 
               NeuralNetworks`TensorT[1, {10}]], "Parameters" -> 
             Association["Size" -> 10, "$InputSize" -> 2], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {2}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {10}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "3" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {10, 10}], "Biases" -> 
               NeuralNetworks`TensorT[1, {10}]], "Parameters" -> 
             Association["Size" -> 10, "$InputSize" -> 10], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "4" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {10}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "5" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 10}], "Biases" -> 
               NeuralNetworks`TensorT[1, {1}]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 10], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Layers", "3", "Inputs", "Input"] -> 
           NetPort["Layers", "2", "Outputs", "Output"], 
           NetPort["Layers", "4", "Inputs", "Input"] -> 
           NetPort["Layers", "3", "Outputs", "Output"], 
           NetPort["Layers", "5", "Inputs", "Input"] -> 
           NetPort["Layers", "4", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "5", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`TensorT[1, {2}]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{332., {70., 78.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.68045116906149*^9, 3.680451213600884*^9, 
  3.6804514859343963`*^9, 3.6804515211315565`*^9, 3.6804515673887005`*^9, 
  3.6804516191834087`*^9, 3.680451739665532*^9, 3.6804518478376617`*^9, 
  3.6804519750166707`*^9, 3.680452224380748*^9, 3.6804529904914856`*^9, 
  3.680459972959478*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{
   RowBox[{"result", "[", 
    RowBox[{"{", 
     RowBox[{"x", ",", "y"}], "}"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"Mesh", "\[Rule]", "None"}], ",", 
   RowBox[{"PlotPoints", "\[Rule]", "50"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6803583789252787`*^9, 3.6803584162012367`*^9}, {
   3.6803584735966024`*^9, 3.6803584917210913`*^9}, {3.680358552786993*^9, 
   3.6803585569379997`*^9}, {3.6804507381376443`*^9, 3.6804507479426928`*^9}, 
   3.680450929230296*^9, {3.680451013709833*^9, 3.6804510138222623`*^9}, 
   3.680451076397651*^9, {3.680451527751148*^9, 3.6804515330462055`*^9}, {
   3.6804517309652963`*^9, 3.680451733757086*^9}, {3.680451851701318*^9, 
   3.6804518594453087`*^9}, {3.6804522299407773`*^9, 
   3.6804522526524506`*^9}, {3.680452378628501*^9, 3.6804524026444826`*^9}}],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1: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
bs/FMPGK+VR8cpp4RZ9lSzeIV9Srt9krXjHP7x2HxCvmua7VcfGK+aw+fEa8
ov5E/Fnxiu3mxJ0Tr1jnCgcSxCv6tPopUbyiT5dml8Ur5vn1Fa94Rf1EvWTx
iv292jVFvOJ52HpUqnjFdl2z0sQr5hmzIF28or7s1wzxisfrwGjbn4F57u1i
7w+y3QtP2vs49Hn/oq1vZz1HD7f1osynSRmtWwjqb+a3tp4hcN0UtnszwtaL
QvcM6mfvY0N3rPrT3seBHvpgJ3vviPGJ82zdP3Tvl54M8YrxfY/Z+jbm2c5j
60uY564V9nyX/ufHpohX9Lm3q81jMn5aQ5tHYHzNu2wczzxXn7goXjG+1nA7
jxn/2NMJ4hV09yNnz4lX7Nfw/jHiFfWSJaLFK+b/Y9nT4hX0kN15R8Urxuet
jxCvmH/DhfvEK7abv2yzeMX8v7huvGJ/d20YJ14xPm70WvGK7Xp37xSveF7t
mHtAvKIe8kGkeMX+ZjlOiVf0zz4ZJV4xz2Y/xohX7O+A1+PEK8YPTEoQrxj/
W+9E8Yr9rZh0SbyiPmuBV7xi/k97ksQr+tePTRavGB9xMUW8on9+Qqp4RX3m
0TTxiv6uteniFfWqIzPEK9bT/5a978x8evxj7w/yfKseZu/j0P/0s1oXGqT/
tM7Wiwauj8L631xs7+NQr9zA3h+EHha53N53hu5d9Y+9Vwk9dGIje38JekjT
Lvb+AHRP7wG2fpf65W9TxCvqr35r61SguwcPtOfEzHNwH3tOw/gbUTZPSr3a
0UTxivVpu/+8eMV8ntxhv8eMf221XQ+ML/5zjHhF/bUB0eIVdNfwJmfEK/Zr
fukT4hXr7+lxRLxi/c+uPSBe0f+etbvFK+ZzLGqjeMV+rfpgoXhFfcGNkeIV
6zl5/0rxirpv3DbxirrjQ494Rf/znxwSr3h+vvLFMfGKesdup8Ur9rfsU9Hi
Fdt9f2aMeEX9xF/nxCvqxVsniFf0/3rmBfGK8YeOXRSv2K9KOZfFK/r8edMr
XlF3XksSr+hzf2qyeMV2Wx1JEa+oT1+QKl6xbp98afv1sd3ST9p+MtSnnLP9
GeifPShDvKJevozeu6HuuWOcvY8TuA4Kz9uoWva+M3Tvy6tsPx3onp2VbN8K
+kztZu+NQ3ckLUoRr6C7x0Tb+1H0n3bD3k+AHlasmq0DZnyLBrYOj+3eHWbr
YKhPTUgUr6C7bt1nz3vo3++DBPGK+tcz4sQr6vtOxIpXbPfILftdZ/z7T0Xr
ODE+u3D9+f/+hh760uIT4hXr02RhpHjF+F/dEeIV448384hXrEPYre3iFY9X
/0XrxSvmOb+ZzbdTXz3OeEWf3knLxCvqK1dsFq+Yz39t9ohXzL/ltwfEK/pc
OXhYvOL53LrscfGK9Tn87mnxisfl7UNR4hX9N3nPilfs7/brseIVfQ6VjBev
GH+1zHnxinrrfy+IV6zDS8kXxSv6T99yWbxiv7rt9IpXjE+ckiResT7vtk8W
r5hP8/tSxCvm0/GI7S/K+nh72/5X5EPNUmniFY/jhz/a/gyM31jW3ncOnO+F
/pGfpYhX0F0rLth+YdC9H7psXx7ojj4zbV8M6GFVkuy9dPrvecze/2Q+/Q/a
+1eMv/ryRfGK8b222jpj6kPqnxevmOf+zbaehnrdRnHiFXRPo72x4hX9xztj
xCv6DN0dLV7RZ98zUeIV9JDBT54Wr6jHxh3X8WM9r/eKFK+gh65MixCveLwu
vrNfvGI92zfcLV5Rf+fwZvGK/f1wwUrxiv299s1P4hX1bo+PEa/os2bREvGK
7a4quVG8Yt3uqLFDvKI+pW64eMW6PXz/QfGK7ebNOSxesT5TQo6JV8zn47Un
xSv2q8XCM+IV9ZE9o8Urtjv9hRjxinrHf2PFK/o02RcnXlFfOzBBvGId2j50
Qbxi/j9tTRSv6NP35UviFX3c6y6LV0HHcaxXvKJev1aSeMV29++3/ZCpz2hp
+/XRp/Jp7VceVJ+1TWw/mcB5XZhnk262vyh015E1l8Ur6O6aI2w/MuiOTNdF
8Yo+Z/6yfTeof73+vHjFfNZ0TxCv6F/tIXuPi/HrE+09CuprF8eKV/SZ/VWM
eMX4DS/ZuhzqH5SOFq9Yh9kn7PkT9ND9954Wr6CHTBtk8yyMv2PfUfEKurd2
1mHxivFz/jqo40q9/+8e8Yr5j925W7xi/a99u1W8Yr+a9lsvXlEvVmaxeMV6
3mw2XryiPrPHBPGKPp9vXSReMX6YY514xfjlJbaIV9Sn9d0pXlE/ELVPvKL/
/OoHxCvWISchQrxifPXlR8Qr1jlr9DHxinW+NeCkeEX93xfPiFdst++uKPGK
7d545ax4RZ8Ou2PEK/qMeu6ceEX90tw48Yr1WfBnvHjF+E1NzotX1DcOvSBe
MZ+wRYniFeP3br4oXlF/Z+Ml8Yr59J19Wbyi/5IX7DsKgfO3sD5ftD0vXlGP
b5IgXkF3Tatt+y1Cd4+rGCde0efb67HiFeP7pcSIV4x/N8Hen2f8xwnR4hXj
W6VEiVfQPc9cs/cx6LOznK17hh4W9uYp8Qp6aMXetr4HeshHo46JV/RZNjJS
vGJ8288Oi1f0H/d0hHhF/Y3Y/eIV+7X3xD7xisel5rGdOt6MX7dpi3jFOhx7
9jfxivrLDy4Tr1jn45NnilfUV8b1Fq+oz7g+WbyiPnrVQvGKepf/VohXzKfL
yd/EK8Yv/22zeMX6z+i9XbxiPb95brd4Rf3tu8PFK/rsmbJfvOJxvLH2oHjF
OidkHBKvmH/rVyLFK/rUWnZMvKLP8QdOileM//Tn0+IV/b8uGSVe8Xwo1yha
vKI+9ZOz4hV9QkfEiFes88bJseIV9Xd+OCde0f+9b+PEK/arcrt48Yo+OSEJ
4hX1uxISbP7qf+dpoZ76g+2/T905Ndrmr0z3/PRLlM1fme6qtdz2c4QeUmH8
aZu/Mj3s1uWTNn8F/VgH2x+EPiv9x2z+ynTv3IVHbf4K8UmhkTZ/Bf1sLXuv
gz63/Ids/sr00I9WRdj8FfJ0vnfQ5q/g37OAM5q/gv+Q1zw2f4W6Da201+av
oH/Ra6fNX6H+H87eavNX0Iev3mjzV6a7h326xuavoP88aYnNX+G4T7w8y+av
oL90eZTNX0GvU7FfuOavoGd9ZOsZqK+cPNfmr6A/mLDY5q+Q55nhK2z+Cvqi
+DU2f4U6RJbdYPNXOC7Xnttk81dod/iQLTZ/hePV/so2m7/C+XBq1U6bv4LP
Hyv22PwV8umcHW7zVzi+nbfst/krxC+bdNDmr5DPlL6HbP4K+ZTveMTmrxD/
6+tHbf4KdUh8+LjNX0F/KPeEzV/Bv96yUzZ/hf6GPXbG5q/Qr/qZZ2z+Cv36
ZWGUzV9Bf6hZtM1fwb90qvTwwPlYmGfpEkfFK+ofOG1/f+rH5h8Sr6g/+3iE
eEU9I8H2i4QeVmnvfvGK8e+e8IhXjF9TzCNeQXd9sHKfeEW9XP+94hX1bW/s
Ea+oby67W7yi7l+7U7yi7nhgh3hFffVb28Qr6J5RdbeIV4wPjdkoXkF3fzd6
vXhFfWO5VeIV9ZE9lohX0B0Jk+eKV9RbLZ+m84P60qhvxSvqE258Fh7gFfUn
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
LsvFK+ptPt4sXgWdP+t2i1c87tcrGNfo80nrw/qb+f8x95h4RZ9u/lPiFX3i
l0aJV6xPQsxZ8Yr1H1/6nHhFnxMvxotX1Nt/dl68ov79pETxiu1+sOiSeMV2
B77vFa+opzRNEq/o82rNZPEq6LzyJ4tXzGfdohTxKug8b5wqXvF4xW9LFa8Y
37ZamnjF6/qdrmniFY/LgCnStQ6l0N89J0O8gu4uPjRDvIIe9sELGeIVdM+V
I+niFf031rfvytP/90H2nWb6b5ll3z2FHvrV7BTxCnpI5Ej7Xhf9n29v37+h
3inEvidB/e0jF8Ur9qvVe7bfMfWtF2z/UOiu+UNsPz7o3qZPxohXjH8hM0q8
Ynznr0+LV6zDz88eF69Ytwa3DotX7FdUrL2Hw+Nyf/u94hXjH726RbxinV9O
NV7R5/fxU8Ur6hVP/iRe0b/x5jXiFeNbXN4mXrHdpQ6PeMX+rlsQIV4FnSfN
juq8Z/yrxU7pbx7Hz7pHiVfUG588K15RX/TqOfGK+T+wOV68or609gXxinVY
sPCieMX+xpXyilfUxz2fJF7R/5sPksUr9vfOT1PEK+Yf1zlVvKK/79U08Yrn
5zPF0sUr5j9sWbp4xfj0WhniFfOZPzVDvOJ5nhWTIV7xOP79n3St5y30vxiZ
JV5BD127Pku8gu7Z1ydLvKLPotJZ4hXja3yTKV5Bd8/ZlSFesd1SCfZdZ+ol
Yuw7qdC9MzfYdwehh50emCJeQXc0edK+l8P8x52y70ww/85Jtm87fXY8nihe
sV9J/RPEK+pZx2yfPvo8/3yMeEX9+Ooo8Yp6WtdT4hX0kGHfHxWv2K/+6yLE
K9bn2KFw8Yrxx57fJl6x3REvrhKvqN/cPV68ov7+1TniFf2/HbVBvKK+r5PN
v7NfzR63+Szm/3Qtuz9kvPdlG2+x/iU3GL+Y5/UW9jePu+tqrHjFPBsujhev
6DPlowviFeNLVb4kXtF/5Wde8Yr6nN1J4hXP/79Kp4hXbHdwk1TxivXZ2iNN
vGL8loHp4hXrU69bhnhFPf+ZTPGKdf4nNlO8ov/aj7LEK/Zr2c4s8SroOvoz
S7xif5dXyRavAsehsJ7xP+eIV9TfHJ8jXkEPeebDHPEKurvc39niFXTPsEHZ
4hV0x6zDWeIV/R/Ite/TM35sVoZ4xXavHLDvqlI/Pty+U8h8OofYd7/o32qj
fUeH+VR90b5LwfpU6HtZvKKe0CdRvGI+4QMTxCu2GzrW9u9jfJklth8W48uf
sv1loHvDy9p+DdDDGk49LF7Rx1Fjv3jF/nYdvV28on+vZcYr+qR0HCleMf+K
V8LEK9Z/78ObxSvqu07uFa/oM/etCPEKeui9m4+KV8zznudOi1c8LhO7RYtX
bLd641hdJ2x3RfV4/c340+UuiFeMv6vEJfGK7bpGeMUrxvv+TBKvWP++X6aI
V4zPPpEqXrG/r1RPF694XPq+nyFesW6Pf5EpXgWdbwWcCfCK8aVrZotX7NeE
wu97/Y9XrE9fV454RZ9SP+WIV2w30pMjXrEOdU9K1/tPhe0+fSNXvKL++H+5
4hV0x4ykXPEKemjk/FzxCrqnar1c8Yp67Z9yxCu22+ZotnhF//XR9j17+jyz
yb4PTf2D3hniFfNPLW3fNWR8lwn2PTDGj/zTvq/DeE9H+14FdPfeAo4FeMX4
Bk8milfUH0ixfUjZbruVseIV43d/Gy1esd30DafEK+jecxMixSvq7m/t/Wf6
hDp2ildst8Pnq8Ur5vnpa0PEK/qUrrNUvOLxHbt0q3hFfclsj3gFPWTnF4fF
K+hhY5raPDvbzbg/Sryifs8jMeIV8z9XP068Yj7/fXBe1w/j/xl1UX8zzxOd
vOIVffpfSxKvqD8/MUW8Yp7JldLEK57/4WPTxaugPL0Z4hWPV5PqWeIV83+k
frZ4Rf2rh3PEK7b786Uc8YrxC/vnilfUG8bnilc8XoMq54lXzHN7rTzxiu02
ri5d72UW+oz05YlX0B217/KJV9T/qOATr+hTOTNPvGK8e1aeeAXd/Um1PPEK
undAj1zxivHvFIz3Aryi3r1g/BbgFfTQRxvb96QZ/3VMhnhF/duW9r1D5lN8
vX0nDLrrzpv23R3oIc81tu9YQPfEJdv+79S7tbL9lOl/OjxOvKK+s3GMeMX8
T3tsnyzqT60/Jl7R55ObB8WroDyP2fvPPI6rNq0Rr6hHDu0vXlFfUnaFeEX9
rvI7xCseL/dbtu6K59XdUyLFKx6XHcmnxCv2d8eKaPGK/e2fGytesb9TXQni
FfNcsThRvGI+L5cx7vC4t96XpL+ZT5/+KeIV83npgTTxivrYjeniFfOMrpcp
XrEOaVOyxCv6tDyULV4xPu5MjnjF/DPW5opX1Je3zxOv2K+yUXniFfU9D/jE
K+qXX/SJV6xzRB2feMX4Kf8ZrwL1K9R//MYnXkF3pW82XkF3hMcarxjfKMYn
XtH/2kqfeAU9ZFZLn3jF+Of354lX1NcUjPcCvILuSS+dK14xPv5CtnjFPENH
2nemmc/1fzLEK/a38Yf2HUS222e6fT+M8f/usO/xUP892r5jQb318YviFfVb
uQniFfOfdq/tTwo9tMeb0eIV9aUVTopX9P9gyyHxinpbx17xivV07l0nXjE+
v1Vf8YrxpQauEq9Yt/DWtq6dedbwHxSvoHvL7jkmXrHdwv0SA7xiu+3ejhGv
qE88Eyde0efOHjYPRX1J2cviFfPP7GDjIR4Xb60UXW/MP+5Kqv6GHtZpVbp4
xfjP38kUr1iffw9niVc8bw8+lCNeUZ/0Vq54RX3HK3niFfs79d888Yr9ajbB
J14x/q5LPvGKdd5bzC9eMX7tn8Yr6q8dMl5Rn9xPut4LL8znjSnGK+juf/OM
V9DDXmroF6+gO2p08YtX1KsV6AFeUX+jnl+8ol7phE+8gu6Z96xPvGJ85U55
4hX0kKgWueIV47uUyhGv6O+abN+fZn3mp2eIV4zf+6B9H5H1mfi8fVeM8Y6G
9p0e5rOvtn3fgnq95xLFK+rbyto+y8zz7Rzbn5T51N98Wrzi8T282fbJov+d
O8LFK+qT220Qr6jPW/S1eEX/8R+tEa+Yp3PAHvEKunf1zEPiFfXhN209KOvZ
5sVo8Yr+//4TK15Rb3E6Qbxi/o3WXhSveP5UP2LzTezXPdvsPo3+++bZuIf6
5K+NF9Sr1c/U3/Q/ejpLvKI+5I0c8Qp6aPmJueIV+3VjVp54xbrN/sonXjG+
1x1+8Yp5Fv/SL17R59p0v3hFn5/GG6+oj2jlF6/Yr2b5xivGl+hvvArUozCf
so2MV9A9o/car6CHVa5nvIIeUmGM8Qp66LbNxivq57Yar6A7XhvtF6+ot6ji
F6+gez/q5ROvqN85Mk+8Yr86dMgVr9ivmX9ki1fs14Od7LvU9Lk0I0O8Yvzf
S+z7iMy/yqwU8Yrtnh1o3+mh/8pJ9n0LHq95j5wXr+j//ZZY8Qq6e2ibKPGK
+vRbR8Ur5t/9+/3iFdvNa75JvGK7DQ4MF6/oH7FzrXjFfnkG7hOv2O5zr9v7
NjxP9r93Wrxiu0232LpP+h8/FideMZ8pWbb+gD4lSttzO/bXV9nmu+kz9kGb
P2J843vsvov+vfIzxCv6lF1nXKBPU2eO/uZ5UmthrnjF/r53OE+8YrvPbPCJ
V0HnQ0e/eEWflw4Zrxi/6qrxinmWzjBesd36K41X9HntVeMV43PXGa+ov1jc
eBXod2GexYba/BX00G5PGK+gu1IO2P0gdHedt41XjP95lfGK+hKv8Qq6Y12K
8YrxoWuMV9Sb1/eLV9RfKrjPDfCKeX7/dZ54xfgrdXPFK+ghZ9Zki1eM75Vv
36VmPVeXzBCvgtq9Yt9HpM/rHvveGNut9p19p4f+qS0TxSv61FoYJ14x/uf8
aPGK8ddn2v6kPO5zvzwoXgXVeecW8YrHa4R3nHjF/n68eJ14Rf/3nvWIV+xv
id8jxSv6LE6092rYrwffiBWvmGfkbwniFX3KV7d1UdDDNrpsPQH79VzPFPGK
/veNtnlt+i8flSFeMc/vu9r9FfXXK+WIV6xP88l2/dP/gxN5+pt6qeM+8Yr5
Nx/rF6+Y/9ibxiv6NKuSL15RP1ExX7yiviHBeBV0XXQzXjG++QG7H6TewLgU
VJ/M2jZ/Feif4/Z6Y3s+CD10ab088Yrxk//ME6+gux5ba/NX0N03mhiv6DN2
o/GK+qE84xX9Y3zGK8YPX2e8gh6yv6ZfvILuqNnGJ14x/uILeeIV409G54hX
1N+omy1esb8zW9n3qhk/02nff6WeXca+mwjd+8Um+94Y45On2Xd62G7E0gTx
CnpYx/Ux4hX7+2q/0+IV9Yzph8Qr1rnB9O3iFfN5crXt18d8EuquF6/Yr2Eh
+8Urtjv6t2PiFY/7zIejxSv6702192eY5/0rbN05fbrXs/WajB/ktnVOzHNM
uK0boE9cij1vo342xeavmef6rTbvw/inWtt9FPVX19i4hD4HPXadU7802a+/
g87zMvniFeMbPJYvXrHdsOrGK/rcm2fjK+q/f2m8on+dnTbfzvgFqfZ8kJyp
cT1XvOJxKfanrWcI9KPQf2tutngF3eNOsfVX0B3dztl6BsY32G3PB+n/+zib
b6fPi3WNV9RPLjNeBbWbYryCHvrQJeMV9JBGPxqvoId9dtV4RZ9HSvvEK+je
LcdzxSv613o7R7xif5NHZIlXbPfJoRniFfs19k37/it01wOZ9t1EtpvW2743
xnab7rLv9NB/6kj7vgXjP3wlSrxinp9m2H7KPL7Vtto+pPRP2zVTvKJ/5bHG
K9Z5eSXbL4Z1PjPY9lmg//c97f1k1mfdNHuvj+1uXnFRvKLPqDa2jpz9qrc3
Rbxi/AvlbN0S/c/Vt3UA1P+sZc/PqJ9NzxGvqO8Otfkd6vum2f1SUD4DbPzB
+OnF8nWdM75hDeMV9czqxivqq7PsfpD+Yz82XlEfPM/m2+nTa0ueeMXj+/lv
ueIVz7fsWbb+ij5fDrb1ooF8C9t9oIGtb4fuCGmVLV5B91zoZetFqd/63tZf
0b+629Yz0L9KqD0fhB66517jFXTXgB+NV2z3cqTxCnrYhO3GK8Z/9KFfvKJ/
iYXGK+rVf84Tr9ivp17MFa/Y7rtTssUr9tc3P1O8on/lAfYda+oR99r3X+nv
mmLfTaT/gTMXxSv290Yn+04P9T+PRYtX0EN+aXNMvGI+Of/sFa/YblLN+eIV
69PmtPEKuveTUgfFKx735c1OiVf0H7Q7RryiXtF5XrxivzxLL4tXQcexr73f
wjz/y7X14oyv0yRDvGL+r39q65OY/x3NcsQr5vl8hj0/Y573vGjzzoyv/7zN
41A/FW+8os99lY1X1NveY7yiz5wYux9kfI7LeEW9/0B7Pkifp4baegbWs90n
tv6K+on6tl6U59trN219O+sf58kUrwJ5Fbb77Bv2/iB07+8jM8Ur6K78w/Y+
DnRP1B054hXjk1+29aLUh7W19VfMZ24Tez4IPWTcP/Z8kPHjvjFeQQ+bvMR4
Bd0dNcJ4xXwaF/eLV/Rf8LRPvGI+8X8br+g/Z1COeAU99P7FWeIV9fHjMsQr
5tP3GfuONfMpt8i+/8p274q7LF7xuKTUOS9eMX7wBzHiFet2Zbt9x4Lnw/r5
HvGKPhU3LhKvqJd4wfYVpX+EI0K8Yp6hFW2/Kva3fFnb54X+jVJtfwTW7ZMj
9l4x/WOHpohX9O9Yyt5X4XF56SNb/83jfrK3rZtkfeo0tHVIbDdvrT3XZ/4R
x4xXzKfKZONVUL/yjVf0H3bT7qPoP2GDjVfov/RB4wL1Zm/79Df9v3PZ+ivq
pyrbelHWZ0RUtnjF/OeOsvdxWOdp9cWlIJ8jWeniVaD9wvMn5xnbnwG61zM5
XbyCHlLhhr3vDN3942f2/iB0z1dH7X0c+syvkiteQXf1dtr6K8bXa2i8gh56
Lc+eD0J3vNnJeEX/7QONV6zD0OeNV4xf+5PxKqhfBeOuAK/oc7lg3BXgFfM/
NypbvKLee1imeMX6f/1MunhF/czCFPGK+smL9p1X5l8mxb6PyOO1PzJWvKLP
oL9PiVfUDzxq36ugT/2hS8Ur6h1jjFf02VHskHjF4/XTdeMV9avvxolX7Nc/
Ay6KVzwua1bbfgfUP+5r7wnz/On4j/GKx3HAW/ZeCn2qNc0Rr5jP/VnGK+b/
xnO23oj1KVvVnt8z3jHbeMX4xjuNV4zvPtx4xfhffHbfxfx3V7PxDc/DQ3ca
X9ivKWdsfTv9jw6193FYt3vut/cHWef6W+x956B82olLQf7Xytj+DIF2CuPf
L54iXkH39nLbfjLUYyqmi1fQQ/otzxCvqH/cKEu8ok/THdniFfRQf1Vb3w7d
lfpOnngF3fHYq8Yr6hkZ9nyQ/q1fM14xn6svGq/o8+pp4xXzWVrMJ14xfu1p
4xXrvPGVHPGKPrNaZolXQfWpkCFe0afyqFTxiv16fbt9rxq6e16fi+IVfWrd
HydeUb8+0r4fFlS3wQfFK/pnhy8Xr9ivMl03iFfQw/4pcVi8Yt2eiIkSr+hf
+zvbL496s0u2zxT1ZQNtHxbmM/1127+A+eQczRCvqHcqbu/L0T/Sa7xi3Ryd
bT03+9W1v/GKescHjVf0L/6x8Yr+TRsZr+hzbofNXzP+VJbNH9H/VILdv7E+
F36193F4/dZ50ThF/e+D9v/zvF38ru3PQP2eRNtPhufV4u9SxSvm/3jdFPEq
4FeYf9cor3gF3RvT2/brg+668pDtfwU95Oj5NPEKumfUrAzxCnrogrfsfWfG
D06w9wehh2W7bH07dEeFPrZelP36q43xiu0OSbH5dvqsvs94xf72SDZeMf7n
N41XrMPDr+WJV/TxnzResV+L/jJeMf6hSOMV232wSZp4xfgl/ZPFK8ZXO2jf
pWadH3jJvufKeF+XKPGKdXtmWoR4xTq3DF0pXjGfV28ar+iT5bB92Onz9aJo
8Yr5tJyQIF5R71nB9r+jT+NHUsQr6oNyjVfMc0MP26eA9dk0wXhF/aGm9r4c
8yk53XhFfVwf4xX1Ly7Y/SDz6XfB5tsZP32QPR9k/Lwd9hyOeU7aYPPgjG/X
197HYX0Wlbb7Pfq0G2/jMJ63MxwZ4gvP/4sjLA/yJLFcqnjFfn263vbrY567
eyaJV4H/rzDPym0uilfQvee7esUr6J4qzyaLV9BDK1ay/fqgO/77PU28YrvN
T9l+MvQpNi1LvKLPwFr2/iB019VJ9j4O9JBZy2y9KH1K9jZesb/Fztp8O/1L
RRuvmOfA7sYr1uf4GOMV9WkNc8Ur5vnIsGzxivUJ7ZQpXjGf7onGK8b77kgR
rxjvjL8sXgUdl8cSxCvm6b4rWrxins0/PSResd09rVeJV/TZvm2jeEWfg/nG
q6Dj28H2Vad+vu958YrtOqcZr4LyX268ok9kb9sHij4DzhmveD6sjzdeUS/T
y3gFPazMBOMV2z31jPGK7c7sYrxifKVHjVc8ji63rWdi/M1Jtp6A8ZFtcsQr
xo/Otvl0xkd8avNZ1CdE2/0kj2O9JjaeY79u7UsRd+hT8X3rD/UZ/3rFK+b5
61TbDznw3wv936uVIF5Bdww8miheQQ/p8b5XvILuevX9ZPGK/tM7pIpXjD/0
Ubp4Bd2z4k3bTwZ62IPls8Ur6ifm5YhX9P83w97HYb9aXLb1osyz/SDjFeM/
WGK8Yp4fdTVeMf6n5cYr6k2GGK+gexedM14xfuVh4xX00EOt0sUr5j92qPGK
/q4PveIV85951njFdjtNNV6xztuuGK/YboeZxiv6f/bDJvGKPq+fiBSveLzm
/2G8ol6uju2TTn3cNeMV+1v6Ttt/k/FVDhivGF+5su33xHjPH8Yr9nfHx8Yr
Xhc13zFesQ7vbLf5durFfrP1DKy/r5Gtv2LdqnW3dZnMp4LT3h9kvwZ7bV0C
fQZ0sueCzCf1gM3Ls19vPGnzYszz4C8p4hXPzweq2biQ8du3GK9Z54GXrF7U
K85IdN57+zy87Hz49r/+8EL92lp/+Kbbx9cb/s/tevsKdffGzX7FQw8Nn+AP
X10UT91R7md/eMzt8y05PPH2eZR72//ffL8z4A/d8WW83xnwge65c44//ESR
D3X3fSP84X/cPt9SwnfdPl9ybscfLZ/vDLRLvend+fKH7o4baP7QHeNX+cNz
i/yD9L8H+MOr3L5OU8Pn3L7Osm/7Jz2Y7wzkA90xs47lQ71MQZ6BdqG7ffOs
XfoX3+kPv6uo3SC9RUH+DW9fX+nhQ25fT5m369ziqXxnIE/oIWNftzyhe5YW
5BloF7qj53Zrl/EvHC74nStql3roI9/7wzvc5kmG/i3UG9fPdwbyhO7ObG15
QnfMfSPfGWgXumvYfmuX/r+e9Ie3LvqbumPBVL/6GWi/8DpNfTFfcdA9wz+y
PKE76rfNdwbapc+Du6xd6K5JJ/zh/YrapR5afoFf50Gg34Xt/vVCvuoIPaxb
B8sTuuPvD/OdgXapf7nY2oXu3l1QtxlF7VIPa1pwngfO78B5UehTteD8CeQJ
3TO3meUJ3RVaoAf8oYctWlPAkyJ/6q5RBXpM0fVM3ZPntnoGjn9h/jMfzncG
+gXd469qxyXwb6HeuabVB3po/YftvAr890L/49XNB3pITjW7LgLtF/br9zLm
A93x6J12XQfqUejvOOqXD/W/E/2KD9SpMP8xU/3iMvjsOdpWPKfu3rA0UXWk
XuVBn/hD/cEcnzgM3fFXO+NzoJ3CeH9lv/OxIv4H+cx53+ID49zCPKtOtnj4
uMY/43cm3T7uiUHt7o3yKR6/I65P+lg8fBw7j/mcC2/X8XyQz4XoPMXz9+t6
we/ij0Xx/L3z9FntC48qig/SF33lDw/83qFdz60t9nuHeO+d/f3hDxT9Td2R
5Tuv8Rzr9kLBfUHgePF3s9nvdryYf+h4vzMwrqbecI1f8YH7iUKf5AN+Z2C8
Tf9NC+14Mb7pSb8zMA6n/wuP2HHk7/h/rfyqP+JDfh+eJ77w932r36fzk3rx
ML9T78ni971GrF/xgfuhQn1JitWB+XS/anVAvHfcHfmqA/0/XWx14Hjg6wN2
vjHPeu3s/GT8mes+8R26a3vB9RWoA/Xh6wvuG/93P0Wf7X6/4gP3eYXtdr1p
9UG8t9d99juO+BB3SL7qw3FLyi2rD+I9w+6x+jDPCj2tPhyfVOzv1+8R9fg8
qwP12rv9Tu1LY3pojeL2Oxu4fy2MTyudr/og3tWgto0TEO+KKhhXaB8bjIsW
1LD6IN6x81mrD/P8IMrqw/HPh6ft/Kd/y898+h1EvPv5Gz7Vh/rEAv4H7rvp
P66c/b4H7tcLf1/yKuarbhzXDXnJ6oZ495OvW90YX/JVqxvjp79tdWOeDStZ
3TCO8txbkGfgfOA48P004xXHdTff9mv8wPHb5TtM5/iqR6pf9WS7xwruCwJ5
0z/rXhuHBOpa6FO7YDwQ+Jvxu9+yOiPe9UdzqzPHja1bW50ZX7G91Zl5/viM
1Rn9cs+rYXVmPu13Gd84/qxV8LsfuA5ZnwEPmM7xXkpB3QLnN+K9b91v47dA
/wrjIwr0QD3pP+Q9qyfj49+zejJ+TCerJ+JDWna2eiI+5C2X1ZP5t6hj9eT4
ucsfxkOOY2O3+HWfCd3V8AWfdI5j33jIr/tG+qyqaTrHpVvOFNyH/o+PHCdX
LhgHBuofyLfQf0HBeRioP+N/amH1R7yn+ltWf47/b3Sy+jO+RHurP+JDa+J8
Rv4huTWt/uxvlzus/oh3t9tm4xKOw2+95pMeuL4L+1vmL6sz9Q/n+52B313W
P7yAG4E6I97drmCcHKgz87n0itUZ8a5FT1md6Z/2ntWZ/g1rWZ3pf+RlqzPj
191hdWY9t5e0OrO/K3+wugW4ePt8dmmehfGexFk+Z2C8RZ9PLtn5TJ+Vq6ye
jF9c3eqJeNexJDtv2a6/jtWT/hOSjRus83MPWT0Z33SFcZj5hMQZtxk/uGCc
HxgPs85/feLXfQLjN39n9Qz83hbqzctbPRnf8W+rJ+vQ4oTVEz6un16xeiLe
3TPLOIB4T+jLVk/GzzthHGaeH5e03zXo7ps/+1QH+Hh/HWF1YHzz2laHwDi0
MJ/8jrYfBdttk2J1oM+QJlYH+mwsGMcG+gvdvaOG5Umfiw/bfWZgvF/It7uf
tffN6d/l3YJxflG7zsB9VaHPvzvzpAfuqwr1N+ZYu4h3xK3Lk454R42exiXq
czv6NM9A/6pjfLqvDty3Feqfty44L/83/8D4dUt90hHvaPuWX/nT55W7bV6V
PnvetH4xfvB2yx+6Z91On+ZtGL/olE/zC4F5gkK91zy/5hEYf6WW6Yh3rD7i
Vx2o79pjdaDedaT1F7rny+rWX9Ynb4T1l3m6frH+0mf3Gp/meRi/o6GtV6d+
b8F9RyA+MI9S2G77VFtHzvxDdvpVN8S7bt1p+zPQf0mk1Q3xnjMl8u27hPDf
uNTqyXxePWT1hO6u+YHVk/GD99h8PevT8G2rJ30WlfZpnor6kIG2/p/6/ILx
UiAe82auuiXtvUvW599iNm/G/UYuVbD3x5n/8LI2Lxe0D0wVqzPjD+RanZnP
0nSrJ/WWX1o9qUd4jDPUP7uep/Y4fzjimNUd84Fu72i/4hjfYYqtW4buOH7W
4uHjalLa3hdDvHfNfTavyP0QVt5v9ad/40es/oy/t6bVH/Ehj99p9Wc+cXiv
n/OlV9dZ/VmHTz6z+lPfstauf+iOZevsuT/je9ew8xjzqJ4R7W29JX1So+z8
Rryj2FWrP+MdD9i8K9//jaxi9Q/K83GrP9/XfrSm1Z/x39xl9ef8cPUk4wzn
mZtuMM4w/snWVmfqfSba7wf177609RXU47MtHvPM7p9L2rpWxjf+zerPeem7
tlv9g+pcyea3+b7htFL2XiSP47JHrP58f7NRNas/48vfafVnPt0ijPPMv2yY
cZ79bVnP1vfSp+qX9juEeXXHve2tPvSZ5rP68P2pg0etPow/WsHqw/eVnndY
fRDvif/D+IB8PNd+NT7Tv8oo4zOfC9xT2sYT9Nk+xtbnMP7Pv2xchecIjiS8
d8b4kvOsbnzuMLir1Y3x/S9Z3fh+R8WtVjfGDzlk1zX8XV0623XN+I0drG7M
/88YG0dCd9c8besB6J/4kcUHfjcK9efvtLox/q4aVmfEOwYdt7oxn/6jrW6M
3xBidaP/8JFWN8R73qpgdaN/t8esboxfMNueX0D3fpNg6yUYnzbC6gPdXXmI
1Sfw+3l7PFDC6sP4sSWsPoh3p06y+jA+7DGrD+PDFtnvBeNPXrLfb9Zzd1Se
+gsfR88y9l0K6GExP1l/GT/wQ+tvYDxVWJ8tB2zdCPMsvdSuI8Q7rley30HG
72tp4wrq4fPzNO5lu1/9bs+x6D/mxQu6z4Tu/spj94fU/Qvtvo76Q3f5wt+7
zc845h8yZVeO6gk9dM3fdv5Adw3pY/Vknutu5KmeXCdz1495Ou7M563cPOf/
e4522+eX/XmqJ+K9FbqaD/2z3HY/yDz7PmPHifGfb7io+vO54fbIRM3Hct3L
b1N9ei7A53cD69pzND6/e6S7PS9jfLdH7f4Zz0Pdbb7wO7WfGHxe7+bT8ybG
Dzlq1zufn668bs8r2a+ps+x+kvGZOP/4HLPEpwlav8fngz80s/z5fHDe55Y/
4/c+4dP8LdftFGtr8x18fnchxurG+NpJ9nyN8ctq2/MjPs9q2d78+bzsqUX2
nIXrbRI62zwUnzdN+tuOL58HTfjTp/kuPk/p86XN2+N5iqsmnrvx+ciTn1u7
fP7S5yebL+Lzi1fcNu8N3fNRI3suA90dcd7mozhv/9skv+Z7qRd7055TQPe0
KLjPDRxXzD+7m2+1+SLorqfH23NA6KEvN7V5Zs6T/3dHvq7HwHlX6PPLKptP
hu6o3cvm5agvvWX9pc9r9WzeEnrIXS6b74XufbOezevSv8Z1m38LHM/bfHja
5tOguwdvsjyhe78uafOu0MP+u9fyhO4pU8rypP+gNcY1zqOuctm8XOD8LdT/
fsHypP7ZKMsTuqPBfKsn9UdH2vlJfW5tywfzmWH/DLF8Atd3YXydg3Z8qQ+J
t/OKeg7mQzh/W/Y58w9w6DY/Y2xekd+vKfeizZ/wOy9b7rd5VMzXeRwumz/k
9yyyr9l8IL+/UL24zedQr5Fi7VKPXGDtct7stR9t3o/7pV922v0j929/YYzd
pzM+cYbNk1A/38/y5D7tHWra7yj1hlssT86Plexn83XcV3nbLLv/pd49xfLn
vsrLfrf8qc86afnT58Bgy5/7RS/6y+rM+Ec62fwY93f9DvN73Dd1ZbF85cN9
WbcusXyC9lmtYvkE7e/6mY0DuS/iY8/afU3QPp/nrG6c52lWwdbRMT56o9WN
+yiuqGL3F9xHbmg5u4+g7omw+2vu43ejvM0jcV7lodVWN+6H9mxxG+dz36H4
cBsnU788ze5zOc8QX9zmW6jPmGH+3Ffk/hetntzPZPRl8+d9fWQfu3/h+/sL
Nti8CvWvP7W6cZ+BNsut3aD9HJz23ILvEff4w8a9fC94/Vlrl/GL3rHjyPeL
X2pn+fB93rYlrF2+T5dbwe5fqGdssnb53l9Ypp3HvC/7wGn3TXxfJjLL+sX3
X0Z9YHzh/deBMXbd8n7ziWK+/z8+v603unI+/P+tP7ztM3uO3Qdxvf3hH+0+
iOP/9Xfb95t5f/FOT+M478v6lbf8eb+TvdHW2fO+Zl3pS84n9m/6osdaf3jg
30Kf0C2JzppFfzuhO9JfS1Bc4L8X6gsqXNDf0D3vJFy0/WaxzrDdfPs+Ge87
ts633zPcR7gWLbB4jNu9w+bb7xDG+e4f59r3hDA+D6swx+IxPg/ZOMV+J7ju
Lny2+XDcXnu+ff+D6/NLzjUfrk9rvMbWw0N3pcAH43bvyu22Xz/1BxabD8f/
9x+w9e3QQ50rzAfj+bCHj9n+2lz3HrnWfDDO97Q9bevVeb9QZ5P5cH3UgCjb
D5frhXzbzIf3Ba3O2Hpp6CGLdpkP1+GkHrf9K7neJm+P+eC+IPTVCFtPDt09
Zq/5cJ1Jz5223xzXq9y7x9af474gpO4O2+8J6y68r260fVW43uPxuXYe8n65
+dgCnwej/6q7wussebRml7JdbuthAwvO24h7Q0tMuZbkPBB/R4uW+2+fb2GL
lxXch5Tzlc9pWsB573ev5w8ouu9rtNUfXrrksCrNZqQ63Zm5L86oWbTOsM3B
guv8nztDVnjTnKH5Xeo2OHf7uIQMPuEPf+ePWbVK1ctwvnbjTM1z44vu49af
9If3yH38+e7DC37fHU0fHNK46P6rxyGbjwAf3M0v2/wL7xeecBsveL9fbni8
/n/ys3o5W28Mnrjym110/r/42z7PXLX3rJjPcx/r/bogXu2pe/7/53Pb/81H
Lur3guu3v3f4NV/B9eETXi7wvf3/X3ZWOZTTrXGponweX2Ec4/rbd143Hbxy
3dnTuMF1yG3rGH+ge4595Q/fVHX2f51bFvxOnej80YVtRT4JU0yPiTndaniP
onaz5xs3uH647Q37XhH0kPlv+8NjKj55x555yfQJe/Q7O2/JpSrVTAff3CVb
ms+mxNffeuSBovO23zrjDNfrLky075FAD71S3x/+R5mtdz+Qk0Ifd/0BVjfy
7XJz07nOtsZw85mRuvmV/cdv695Ve4xLnG+pdd6+N8B1s1UL7uOqFF0PQT7v
DLI6g3shd3Q3HfwMjZ9lPv2KrrPb+e+KNI7xvafsXNtPnPM5K17zhzcsum7p
E7p/lNWZ6zm/DjWdvO04z3xaF/Hgdr/qnTJ+sl9N7zJ+Qvf6P/SHdyjiC31C
VsywOnOd4RNvmc51mLN/MJ+6Rdy63d/jx4zD/F34q6Fxm+tRi/X3hw8p4mCQ
z5eLrM5cN/hGNdM5/9O/h9WB6+u8Q01nfA+8N8R1kold7feCeoNJBeOcIo47
7yri9+16pq62/nKd29dvms55pIQx1i7X0ZUfZzrni/ovL7gu/jeuZR3q1bf3
m+gzYL7tv8P4VZ0tHv6hyfPt+9nk6qYP/OHFb/P0En/vvB1H23iP/DwyzH4f
U8/M/GBtxdvc81Seadc753vPdbDfTcS7940yDnP81vWkfR+X+r561i5+fz2O
L+26xrjRc+kl+11GvHvqQOM5OXPlC8sTv+MhlX626xRc9Z6oZ7/viHdlDrDx
JLnRcIrlw/HAq5vsugMnvW81tHEC4kOPDLXxJK73sKR5lg/HFXM8dh3xvYBv
mtl4g/E/T7LxJMd13860fDA+8Uzea9cdOBbasbuNWxAf9tUcG0/iugupMczy
4Tjn4Cq7vsil50f4wycVcZ/x7iorjD+4LkLLzLH4f4p+f277h26y6xHcCKtb
cNxXF/3OMd4dstauL45XP8vzSee66yoFXD1R9Psd1G7mt3a9c13olq9tnxqu
U3UU/G5WKhrfOHcVjS9u60cLeJJ8+3q7yPGPp8wg03Fde357x8ZLGLe4f5xi
Oq/TtV/beIY+rb+1cQXiHVtaWTzGCSF/f286rhfPD51sPIDrNPS9huaP33fP
1aWm47pwnBtrv+O8fnPrmT9+l11TdpuO899x91z7/aX/Qy+ZP35P3U32m47z
3FVpjv1uwt87sZX583dwyVbTeT73HGO/m/Sv39P88TvleWyOxUN3d95rOs/D
p5bY7x3a9X4+xvTcIm7drueVgvhdRceJujel4DpNLDoP6O8NbWM64j3R42zc
wt/x3a2tX/Dx3NfZfq/5+/twL8szsei8uB0/b4jd9/F5x+qZlj/i3a8vtN8v
zIeEvnDYJ533iRE3ffq9wHXh6v6K/R7x+eaNgv8e0PH76Hl0vU+/C7zuGpWw
3x3eFxyo4pPOeRLvcJ/4j+so5OEkn35f+J7g2D/ypPN+4fhXPnEe11HY9Hib
t+fvZp0bedLx+xU2eKhPPMd1FPJLuj2n4P1Cjeqmc3z+eZhPvyO4jkL/KGm/
Cxz3rmrvk875jXdjfOI/76+/r2P853g1Nsye4/B3Z+Jd9ruA68VzRzvjOecr
KnT0Scfvgve52ILzoYi/QdfjZzXMh+O9Iz/aeI/n/x9z7Pri+dx4vvlgHOju
2c+vdhk/eKo//P8AkQvmZw==
   "], {{
     {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[Polygon3DBox[CompressedData["
1:eJxMnXWYVtXXQN+uGbu7xU5KEZAQC1CwE7sFO7G7G+zu7u4uDOzu7m79zvrt
dZ77/XGeffc9ee9eM++AMmueLcaNHlsplUoDZi6VqimWO6USec/U+nWVSrWU
d6frXqW4z5jexlpqfYz11PoaG6ktZ2ymtryxxZrGdmorGNMWpdVSmym1mRmf
9q2mmymUVk1tRvv6pxvNdH/KdD0wXXfS9VTpeooUp05xMGum+/WUT5Guh6Y2
TWrTpraScbrUhhmnT21l4wyprWJkvyGlWJP5q3uuWVLbOLWFU1sktTVTmyO1
OVMbkdqsqc2W2kjj7KmtYWTcKMfOldo6qc2b2nypjfbe3KmtZZwntbWNjBvu
/uwxVXq++VNcN7WH0/M+ll7igjxfut8jxQ1S2ycVbaEUN0xto1Jcc+6H0vip
07gF0vUmPseiqW1qXCy1McbFU9vMuERqmxuXTO00+7i3hfeWSu3+tP70af3p
UpsptRlTG5Dub1sKpuBoOyMcbW+Eox2McLSjEY52MsLRzkY4GmuEo21SW9Y9
VkpnmCHt2z9d729d4Wg2mEptReqexkyZrgdRm06wswfvOF0/nt7nwHS9lxzA
0d5GONrHCEf7GuFoPyP7ben7WDq18e4P4/t3Rz1OSO1oOaCOB1ljODrYCEeH
GOHoUCPcHWaEqcONcHSEEY6ONMLRgaXgmD2O8h57H+C56Hs0vZMn0rOvn643
SOf8I+VPpvz3ruDoeM6a7i+W2k/p3omleBa+Jk4ywtTJRpg6xQhTpxrh5jf2
S+2x1E7/fxxN8N1tldrcqRZzpTYuXZ+Z2tbW+SwjTJ1thKlzjDB1rhGmzjPC
1PlGmLrACFPXWb//8ZKebc5O8HWtNaZv/nTv6fQ+duWdpTGzp3y3dL1girun
eFlq86brp9KYXdL1FTK1Z2pXGmHqKiNMXW2EqWuM7Hd5KdZk/vWeC47+7gp2
HkjtFlmBkRutJXW+yQhTNxsZd6tj4ehOWYGR27wHU7cbYeoOI+NucH/2uMt5
cHRPKTg+JrX1ExdLpPZrOuPjqT2T3sNx6f6G6d4/KX825Xc7jzkHdgdDD6b2
UCmu4ehhIxw9YjxFXoinyg2R70OPG+HoCeMZqT2d2kTZecYIO88aYWeRVK+F
U7swXS+W4qR0xovS9fMyBDuTHAtfw9NzLNQJdp7zHuNecCx8LZH6n0vrXJyu
37be1LlHun9piq+m9loprmHmdSM1f1cO4G4pvk+ndkm6fkuGWOsNx8LXO67N
nDe9x7gnfQd8Pb3nejD+QSl4op5fyQH1/NB7cPSREY4+NsLRJ0a4+9QIU58Z
4ehzIxx9YYSjL43s97V7wsL7noszLZt4WCa1e9P1U+k9P5/e4X3UMV2/kK7v
T9ffOA/uNkljq6m9mPoO6Q6Gfkrt51Jcw9EvRjiqdAdrP5bia5Hv+Xx//9V+
+Pq9FGzB1Jtp38/T2seWS6V/ZQh2eqeaTE73J6frP0vBHO/7b85dCu5K5eAG
RkamdZbpBCP/uQZ9U5ejftS8XI6xcDdNOe5Rt39cj737pjVeSvu+lK475WAI
dpZP919O919O12umvZZO+SvpumeKy6b2YrruLgc3MDJlOXiCza5yrEHfVOW4
x5mmKMdYxq3QCWZb6d605TgXdds4vc8+qf2X9pypHKzAyIzlYIh8unKMhbvp
yxFhbeZyjIWjWcvBEOzMVo4IO0eltXukfIPUZinHWMZNSvu9kp73+3Q9QznW
Y785ysEZXD+XxryaxvyQrucqB3OwM3c54repzV6OfZjT6g52FijHnj/Lzmbp
fju119Jac5ZjbdY6vDvGLJjutcvF1/RC5ZgHUwuXI/JZNyS9wzfSGrV0b7HU
/pCdJdL1X7KzZDkiNV+qHBHulpY/2FmmHBG+RqVn7N8JdgbycxY/u6frRcvB
MXsMSvdeT/tW071B5ag9dV4rze2X+hrpeuUUmykul9ry5bim1iul+2+mufV0
vYLPCXf9jbAzwAhfA42ws6KR/Qa7J7wPLQffcLRWOeoxT2qrlKOWsDOyHBxQ
n5UcC0fDjHC0WjmYg6Ph8gFHq7oGfYuU493zLlZ3LONWdg32G+E89lvDPeFo
TSM1H2WEo9FGzj0mMdAvtXpqk9P7fDu9q/nT/RfT9Vvper50PcTn5pm3TOOm
Su2d1Ddld7Czviw87vcRvmfzcxA/A20oizB1fmo7prZTapuXgxt4WTPV6L20
Xq90vYnPTP03NcLaluXgCY6Gp/Gr830hXW/hGvTtbs1gZNVOcLZVant4jxpu
ltri7j06jXk/7ds7Xe8sN/1SWzvdH5ZaH2qaYt8Ud6Cm6frdNL5nuh4nT3C0
qwzBzljXoG8373GmXRw7wHfAmrC6p+fiHR9unajPftYYpvaVG/K9HAuDexvh
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
XtbyHu94bSOsrWOEtXWNsLaeEY7WN8LOBkZY29AIR9tbV1jYyHtwt11qvez7
IJ1lMr/vJl1/xO9ASiwtnq4/geF0vUS6fo/vM53g+c0Ul0pxi9Te6gQ7W6a2
VSuuYWZrI4xtY4Tfz9L411NbMl3v4Llgan/rRH3GyQ287GRdYW1nI3yNNTJu
F8fC1B5yAy+7eg++djPC1+5Gxu3o/uyxp/Pga+9WMA1f+xjhZV8jfO1n5Nx7
OY85430OmDrACC8HGofLCHGEjBBHygoRpg41rpnaYcZRqR3RCp5g50gj7Bxl
hJ2v+H16naj5Nym+y++RSdfHtoIh2DnasfB1fCsYgp1jvMe44xxL33dpjff5
vTPpeqL1ps4/8X0lcTImXf+Srj9NbbN0/XmKm6d4Wmpnp7ZtK7j7ge9nafym
6XrC/2Pni04wdXpqZ7o27JzRivuMO9x3wPOf43owfl4reKKeV8gB9Tzfe3B0
gRGOLjTC0UVGuLvYCFOXGOHoUiMcXWaEo8uN7Hele8LCuZ6LM13dCp7g6Boj
HF1rhKOrnMe467zH18QNreAJjm40wtFNRji63rHjZYTvQ3ym8dnFz9z8rH1r
K9iCqZnSu/84xU9S+y2986/5vTDp+vZWcMY7vsMIa3caYe0uI6zdbYSje4yw
c68R1u4zwtGzqZ0lC/d7D+6ebgVP1Pwvfk9aOt9J6fqfdP1Puj45Xf+Xrn9O
7ZR0/UeK3/I7btL1Y6md2grGHjfCzxNG2HnSCGtPGdnv107MfTS1SZ4Lpt61
TtRnstzAy/PWFdZeMMLXi0bGveRYmHpNbuDlZe/B1ytG+HrVyLjn3J89Xnce
fL3ZCqbh6y0jvLxthK93jJz7Decx5z2fA6beN8LLB0b4+tAIXx8Z4etj482y
QuQz7VMjTH2e2m2tYOcLI+x8aYSdSlf6eaMral5L8ff03h9I19+0giHY+cqx
8PVdKxiCna+9x7hvHUtfI63zb2LjwXT9p/Wmzh3u87N1q/Q/scwjKf5CrVtx
Ta3/lgO4a6Ux/6V1HkrXf7SCIdb6zbHw9ZdrM+d37zHuM98Bz/9vas+0gnFk
N5OsZ6cdHFDPcjvuwVGlHRGOqu2IcFRrR4S7ejsiTDXaEeGo2Y4IR612RDhq
tyOyX1c79oSF/zwXZ5qiHTzB0ZTtiHA0VTsiHHW3Yx7jpm7HPb4mpm0HT3A0
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
eLJrcIJ1xS+IP/CBdK5Fugp/IJ7C0+UGH+GZ7cI7iIdwa+9NbBfOPxyA29p/
Vrvw/9GXfYesC1Pnu3f2DuIhxDl4frvwFV4gQ9lxeI7c4CO8tF04CC/3uS91
rewjpC87C5mD9xD/4dh24SPkfPj7cP7d1S68g9lDSLy+XTgLr5Gn68xh5Sbn
wAc+wpvl5VZzvoZPsR4H2c8c2MUviGdwf/dh3bt0Hd7WLryDjFtaX+Ed7XAX
4hy8sx2eQ/Y6VHbwC94nH3gNcRIe6z3WWkp/4u3y9IBzxlkHvJDw9ZDzYehh
8/k64eG6OH28TNMJt90COHzSeo/oumt1wu+GN3BWr/G7Ld4dY/CTrZeuf/P6
I/wIes7+ZA2v8Q0+4rub2X1xwPXEcdYV/qFVu8LtdQn+lu6Yi8vqr64YwzVn
YAy+uX9ZWzfVPJ1wOV3I2bzGA8Uz4oS6iDW9xgm1UTeSnti3jDNL71GvTjhc
cAP16YSTCDfQpmlMQ29N7xR7dYf3qMbXog6k5TrhEsIHtEZXuIHwBy3ufTxT
cPOINeA8L3vORd0Lj1Vfz8Nen3TF+jhympzX6+XT9XLd4cvppPiC7pzBnh+P
zNBOOGV6+yxc41f62Pf2gmd+02cc3RXXeGr4Xnmq9brMn8f42XsFz/C/71Gd
cN7gu1mjEx4TnClbpTHT6swYkGL/7nC9TJ3iy3pfRnXCsYLrZN2u8J7gLhns
fdbcNo2fWXcCz/K+z/V5Gv+6DoYV3Rdfz2ddsT5+jo064c7AfzEd78n7g9P1
oO7whayY4ktdcc5NOuHLwHmxQVf4L87yubiPn2Wo63zm+T/1eWfsjvOw5ix8
//Zs23bi9+HjWuA8uBVweWzfCecCnoVhafxK3eF+mD3Ft/VA7Oh4vA+bdIUD
AhfDKq6Pe2BQKXydg0tx/q993i26Yl9+V/8G7oUj5IuuWB83AGfg9/njfVgt
rblqd/y+/vlSfM/f3b9Dup5TzwHn+dEzD3cMvxd+y65Yh9/tvyO/l7071t+q
K8bze/tHWAucN2NxOfk75UemOKI7fo/8h/49FX//uWu6t2h3/E75x/37f/67
zKte83fyT/r38/w3pjO64pq/h3/Zvzvl794/9pq/+33VvwfmvyOMSmuv6fpn
d8V9/n71cv98+pNz+bs+/g72gq645u/fvvfvRvi7tR8988le8/ck/D3bxV1x
zd/z/NmJP//y9ypN/yzMn3//7sReD3qfP+PwZ+T70vVyXeGL7e6Em3XKUrg2
8bnijW13wsc6RSm8n4zF+fllV8yvOA7PLN+3+R6O+3VgfMv73322HJeSHr7/
hmO644/3/9uL/6zFvYZ7DeiKfVf0fsv1H/dzgvXpb3vmFbvi/HA6rCvcoLu5
Tpfjr/HZ+TNdx2eeqhT+2Sm8nsKvUzxPn3bF9zquWX9Kz4PrD88fjj8+t/g8
W7AU7wFfKe8PvydOWbycg7vC1Tp/KT6vcLnicN2yFK7TrVIc4n3W4byzef6h
XTEGF+qU3ucM6/AuXXes+/IZh+90Zq8HmHMu7nG9i3tO7768T1yqu3o9q2Oe
8rOT66e9v6tnm8X3yXozOYZ3Prtj+Nzjs5DPejyc+Dj5rBzrNV7O1R1/aSm+
p8xh7Tj3XD4TEX/nRZ5nbp9rN98Frk4+i+dyDOfE68ln+u6uibdzkp/ZjGHP
+T0n4+f9f887n2NYbx7PPKIr6p19jnhCLyvFzw8L+IxPuc7F7rugteN9ziS3
PG8Pz8ZaXOP347P6f5/ZpdgPv+QFfkZzPdl7i3jNsyzSKcYyjs9xPs8X/X9j
FnPN57zmuXBaLuT4Se7LeHIchS/I9hI+y3P+3MA6L+efIby/hNc9/Fq4xHe1
tPf5WYRrvHOsixMRHyJeRK75mYeff9iXnxM4f0/PxntZwXfO++ntOd/0Zwh+
5mFeL9d53Z+lWIefO/j5g58xOHNfzz/Z+4y5wPdwvuv3dc3J7sXcl9wrr4Oj
MT/T8j4jP3f1c+7aXmfXHufHE4h3DYcfPzOUvS55/p6eh2fg5xv6+RmDa34m
GdQV30PmK8X3cD4L+Ltxnnegz87/R8D/A8Fn03v+TMbPLZxlJc/G+EHef8Nr
9uV9DvEZ3/fnnt6OGeI1n6c45Lb2/lDX4d5w77/uvj39uW6Yc3F+4ZLD97We
97f3/azs++QMnJOfA9fpCnfdVv4sgW9sgu+Q+/jslnXvZRzPGHxkfV0TTx0/
ow33nbPn2u7L/TU8M+9qpGdmvRHuy88OIxzzieO38f2s6bO/589k3Mf5gmPo
H+8zZlufe22f6133yuvgz9vOd7KO1/xcupZzN/Qa/9Wn7sV9nhMfGy629bvC
rYVXi3Gsc47PO9r3zxjGnyGfq3geflZk7v9+HuuE+22Ce+Fv42dRfo7bwPu8
ExxvE30nG/p+PvZn3/9r6syjvaqqOP77PTOCc1Mr0UoJVB4YmOXccrZh2TLL
gXkQQREBGWRIBTGR9wTewCizQ5qVDZqi4cDwAEUEBARLDIfMzKEE5AGhIEP3
8/bntx5//Nbd79x99t5n33P2PWef730Hno+lSzyc6zZHmT1t+/vOfWert5u2
bbEc/t4pznz61LnxtZb3kuYcJ3zTW/9A9zrEb320Hz5oznriHDLOJ+Nssh4p
6Bel0cXZUviRc8vg7ZnirCl40DlIG/AZvltpezkvjTlzH/k/k6efvsWHnHO2
SnqA5dudr7+kD7va9z6Wf5b8/fRPvXVX6auB+vBj58qU75BeLQ82M4dnPj/Y
ctoyRB/eYPk+29vXdvWRZ64+H6ocMNlgs8HYdtL/9Ft8x9ldnNt1c4rzSzi7
BH+M0CesEW6R7pfibCbOZOJZcz7Tbn040ueOfzgDbI/0CG3DZs5mYp7fX37O
b+JsHco5V+dGZXLG0wD1cq4T/hllXfzJOWF79dut+rBevTwX1hSj5cFPt+sr
6FH6c6jl+Ocm+bGFdcpt2k97OTOIs6go41yrU7RzrH6gHXfa9sHyc64QfuIs
K85FGyI/ZwzRprv0J34YZ3uvTfEs8OdIefDPaPXSluHq+rZyKvTPwBRnFbXX
b5XWvVmas2+GqqunMifYXto+0XYNU04v21uhH8bIj/8H6h/44aMu59Vwfhdn
L3HuEjqnaAPtrtZX+IczdDiDaYQ0Z53gs1r9DP8kfTVOmvbiw8n6dqT0JOtW
Wz5OvbQR2TOV/4sUZ/RM1rZp+mS8dHv9M1W98DEWpuiTe+Tnb2jOYOmYz+E/
To3nA3GtLgu7ZmrPrSnOduFcjttS4NrBtGP/XG2DhzM8lmjzbP2DnDm2Efvn
SaPjXnUiFzmc9YEt+L9rWfwNf8N5McqhXYusu7gszoBAL+c/YCPn0HC2Ed9y
8M0G32tgMzT4/Du0Hxz1qBTffpzbJL4fgqbeCNuLHHgesu4vpQc1iX4+zHHB
u5U5E+/xZsYovj9iDkU5c4AxKb4rGKicP2jD7Smw4ODAx0mD/65IgQUHx1uZ
AiMORneM5QPkBxs8z3Y9ovxqy8Fw8pzQy7cMd6v3gZwemwLzDB6deMr3CMTX
wdIN3/7m19/bXuwDcw/e/q4UuGXw9xOVA4a5yvK18jymbdQB+97Pdj1hG6n3
rHWx7SnbiI1PameN/Ov1w3x9Mkn+DU0C5wweHswy7QEbDS4aTCL5EXIjQ+Sh
fX9WL/bXKvMV64EFX2O7npOekGKOC96a/Az0PssXyIPMhbYdPyyyXeRtkLPf
9j6tzx+Xf57P4k/aM8W6B+RZ7HOcnAK/S15oagpc7kH9UyfPNGnwk7RrqX6b
Lg0GE58t02/4cLlt5x502Zei/yyxLbQZvWCGaccq244PXtAn2IavwRbjb2jy
Ts/L87l1X9RX1F1p+W5zXvvkeUlfLZLGh+S6VlmOXau1DQzqRp/v7BSYUvCA
96TAlYJPxZ9rrDtLGjwhfOBTwQzyA3sKNhAfrtW3T+j/e/XhOn07VV08I/Cv
6AK/il7wjeBZ50qT39urrfDOSEFj8wrt5z75QPCQ5N/geVX7F9neA/bnv+pb
/PZXfUgMebhZ4zdL0HzfRC7wb/KDlQMzR94PH7yuT+5Lgau8Tpmb5N8jTe7x
3hSYTDBytHuz9sy0/FTzhGDwpih/s36mHe/aLp4jer/r83pTHvz0tn7DDsrB
3/E3+FGwo7O0k7oPpMDpTVb+O/pqjuU99D/29FT+Oz4LeN6yHP+867PAD/+x
jZT/W5vxw3v6BF3/Kj1Tc7jwfC4/eVf88b4+Idf6geX49jXLkfm+zwJcGXpn
qPe9Q+R8qD20B+xjd5/FR9ad7nNFxoPqmi4vWEZwjPenwL3VSv/X8jeUjz//
IX8P/f22/nnIukvl2arPaS8YzWnme8HRkdfF35/YB/DPJ/qK8u3WJX+w/RAe
MKZTlVmvPynfIQ/Peps277ccfvZowEfVm6/eZfnD0mCyPrDPT5feqW/x1W7t
b8BuNQvsFW391PZuk56kH9BVZ/ke2wu9V/7fpMCEbbeN++TBloPaQy58r+Xw
gDVcbrvASj5vLv2A5QeVs1wfbvW5IHO/7d2vHHz1iHV32aaDthGfkORGPveg
wQ3RHmxe4rVM+2kL2CTwarSb8jpt3uNz/IM8YJbgAfdW7xinnxPPwUKB+QCX
QdvhwVecscdZVg1npDUNbN9O7U/SlIOfW6bfmiifPQswUewp0FbwebukkYOv
2LsDRwWG6lH5wX2Rd/+KcqCbKId76AU78/sUWBpwWrQffBjYMMqhwWvhv2b6
Ex8cqR/wyVHyPKYcMDN/thwczuHyb1f2l+X/YwqsDnLg/Ybl4HXA7YA1Yu/g
aNv1uPydbBdYMfYUaGtz20vbj7Gc+tBgN9jnZH96mu1urs+xGRzI1cr5mv4B
j3Ks5fPlAR9C+76ur47QZtrbSn7wRdh4nO16MgW2ZLxtPE6fHKucq/XV8co5
TP/wHJDTIjX6o4V+gPck+SlvmRrb2tK281xb6ZMu0mBV0AfmhvZVSFd6PVH6
m9LwYjd4mAmWn6QfwJyAPQF3dHoKfMIz2laeGuuV29758iD/zBS4iGd9Rm1t
4wTpidp8su2aKA22YkEKvWBdwJqAQRlk3TPUCy4C7Ai4EXAZ4CfATjydgh+c
CvfArAzWD2AywGNUWoeyZ1PIeci+9y3b8hf5wXs8k0IOOJUF1kVXa/VWSp+m
f9pI32356fKfncL+52zvWfoc/jOtS7vb6fPn5Flou8/Wn+QHyAuwxn9SP6Nr
WX79fooxQO6NHBx5Nvb4zkvuCTaLfbuL3Rs8NzXuMUIn9/7OT7FXyF7eBSn2
AQ+3/CL3etiXGi7/Bcpk7+jSFHs1X1Dvhcq5KMU+FPtq7NuVuzdI+ZHyXKyc
JtqJri35tS7Ffh37Yj/WZvb02Ntra7uwZ5j7dfAM1Z6L1dtC2y5xz4U9BnL4
tOWyFHtQ7NGw//Sw+2k/SbEf1FJ6iHtQl9l29mh+al32PS5Psc9yjs8CjMjx
8iCTvQP0kp9njwxdv1YvezzsfbAPcmWKXD77OT9PsR9xhvQG96fQxX4L+x5X
pViPk/Nnn4Ac9fnKeU2ZP5O+UH72RNgDYS+E/dOG/HaKPDZ2dkiR+yfPTL54
Tin3bjn7BuwTXG/OGbqveXhy7jeaQ4bub/68i3Qn6QHm3cmnz1BvR23oYvlM
84HkTEs5avLRc82pQs8zD02fX2E+tps85F97OhZukF5Zyo2nyDeSe4ReY91e
0uT8yImQD2FMkVclB0gejDwjuS/yqORhP1MOudTPzQfC/6l6+0iTCyWPuccc
KflQ8ofkDK+z/FL9Tz8hn3e9PCOVgy7iQF91jVEveVTyN+RG25p/gya/N1yb
S3nR/qkxV0lesp05uv7Sw2w77a2Up725x4HSYBbAOeRkw3yGuQ3v1vHyEKPA
Q27M6U7FyJuRK+xhro78XS/tJP/YzTwbdHfzY+T+eprzI2d6jXYOVQ55L3Jh
5LIq5YGfvNcoy8eqt7u5wOEpcnXIJ383Sb0NeU9zbtC15iGHqZf83C0pcnTk
58gP1pnPQw65yQe0hxzVLHmWmDMcqcyHtI0cHbkxcl7kTMiBkQsbaH4LeoC5
N/6HS1PXwayNyV3R9jvkRyY5uJvMNUGT42KNw3qDOf8j8t9kHga992rD7eoi
Z0PuZo72VMhD3ov811zzQndpM3k1/vcHeTbkk8+6TxvIf91vzqHC8keVj5z5
8sMzV//wLJ6y7gPmt/jfEOS4yPeQA3pFOeSz1phjgX5Z26qkF0mvtb3V0kuk
12lbjXSd9HrzOROUP1+967WBvAk5E3JL5Js2mE8iZ7TXnAY0eYyn5MFmcgjk
bg5ow1Tpl6UPasM06bXS6Fqn3qJrf/Iy7V1Ts37uLU3+orT+JS/A2orczAz5
X5U+xfUyOYjvmZ8gf3GauY5ZylmgH1Zr52z5WROh61TX1+jqoW1z1ftP6WvM
D5A7uNZ16zxt/kj7+5gzIGdxnbbdZ/l629vOPABr/lrXtvfbt8mvD0qRY2ff
gzkSeyjb7P+s78DEPg9PIdZ3rIGXut5hfbhd21hLT3O9CT3dtRjr2Odda7L+
fMG1KuXLnc+z5mEOz3r24RJ/s1jnUL5FvXWuQ3+rXtYsrBV3udajvN414++M
q0XtZO3A2oT12wmuO1insR7JLG/luuyPlh8mzwmug5DJ+oj1Bba1dj4PJn6C
Mlm3dHBd8Jg0dR+V/xjpctcF8HdUDvPpTvLwjQfzffIh5DWm6qvH5W+r3k6u
udB1tXpZV1TKwzcGE9XF3Pdu58/Q410DPaE9W1Ng6FlPMH9nHv8r1xnI6ez8
fL5yWDewfgDvzrN+RP+wPmCd8KBrArDgC1ynIJ85O/PzhdoADX69NH9fpD+3
pZijL+b5pcD45a/EBpxfA51ft6eY655eiPkuNJiyNspn/l+v3nuaBiYbfHV1
zr9D+SuaBoZtOT4vBI4Omvn2YnmYnzJ/Ziy0kecF+V+SZoyACV+hfDDhKyx/
Wb01hfiWYaU02Ob19PNi4JLBJ9cVAgMNFnq7dcGBLy4Ebht6SSHwzKulwWav
sS4Yb8o/KcTaC/+zdivKg8y16qLuBnXBD557rTybpOsLgQNfx7goBjZ7nTzn
aj88YKNfsS2bpOEHx75SXWC1N8jzlnTrYox9+jkxhPHHOGTsg3vcKD9Ye/yL
b8E0g3nuUgxcMvjkKmWCmWTu9K5052JgpF+TBgu9ybpgtimfWAyc8Nv4uRjY
6U3KBN/7D/xTDAz335QD7vnv8oBnfoPnXgwM9N+lwXJvpk8Xw+bX1QW2+E11
gRsGn7zEum/KDw4Ze7YVAxv9lvzgwDer9zJtoy6+/EBfgXF9F7os8Mb/5HkV
A9/8jm3ZKU35VfLX53S3LLCh4EK5vmcf7sDaOL/XsRhj4V+Wb1Qvvh+irhPL
on/92+eOzz7Ub/Sp9+0/66TpLyvUtUr/fVR6pimeDW1/TTn4crXy6b+b5cd/
3/BZwP+2dfExMeO/xhDW1GBWwcQSM7YYQ4gTW40VjPttxgfqEoOYu8NP3AG3
Cj/xpZ1xgpjCOhbZO5XP/Jn97Ib3bCHKq/Lr6NzOPfqZuMK7thRX/qdv6fO7
5e8szrYUcz61vKvfoVQrc1T++yzF91JcawvxTQq6agpx3aufGZeMT2IM31WU
5b8dhfjGZH+KeELMIRmyrRCx53Of6R152Zj8t09e6qyV92AKfnj2a0OVfuhi
3zig/LOUsTSnWxWj7glggfxWhbhE3CJ+lWIVNP1nbH69U7v5JuWwLGLRYf5N
PBtrOfJftO34gX74Bfn5xoW+jV50nW3dRYXw/2Jj8hflATsOhpx+zncoTbOI
Y8TAzDFC/CO+Mx4r8uu4/PcleZv5DQu8Sf4K7+F/YhffkkxwXDdT/g1+Y0IM
uUB55azls5BF3ON7kyOziG+vpsCRl+IiNGNwfDH0Ih/eo/xWBdlfsXy8cpD/
XDHKFxZjLB+lfHjuzn9HGC+Jm4xNvqv4Zv6ry3mq8mvz/Ne1GN+MQBMbX5e/
Sp6J+e9o78NHfOU7mGPVu6UY9FZyDlk8C94vxIpjlMm3JMdlEQ9/rLyanO6f
hSziaq08lBNriReLLa/R7g/VvdD4c7wyW+bPu0VOtyoLGZQTm99QDvGHb0da
aOcl+qarMf9blo/Igia2d8hltaYPlEWcamX5oCxoYvWU/DqZvpfFtyNcidV8
t3JiFjF8ijQ+58q9Urw/SR7sbkn9svgepbU0356042/wOVnco2/Tx9tIYx90
p7J4d5Rb99Ys+HjXTM+v0/LfyflvllcwVHzX8m15qA/dWX707shtm5kFHzac
nl/PyCKGnJLFd3fEvO5ZxLVa4yj3iIHchyY28g3dqVnEQ678TXxjHPM3Yxm/
ttTPxITvyk/s/Y5ySjGUWMH1NGliJjSxDlnYSpzYKo3NZ2o/97nyd2nudqbl
fIfTXp8Q/4iDxMNrsqCJV+uNIbwf+aaM8Uwc4P7Z8n/ZcsZ17yziODHkvCy+
W3vTmMn3dcTSc7KgiWfIZw5HLIL3PMcUMignNjKuf+B4PFyejsaDHzpGytQL
PzGJ2ISdfGt2URZx6XrLy41dF8pDnDxfvfBSh/jXL4vxw9ghdl2sHMqwh/hz
hDylWIdM4tiPtI04yXP+qX2VmMBcjVgxIIu/a4xFP5KfetAfOq7hZ4zzDdql
WcQQ4sZPpNHfT/8cKw9j/HL1Mn6PVhd6iS/ER+IJY/NyeSi7zHLmdNCMX+Sh
i/hRGv+MZa4/l0YPchiXg5Vf53sKvnrjPf4ltjNHoy73l+V/X0F/K8a6h7UQ
86Obs/hejLHJ9SrlME+Epv/yLr86i7E8UbrKawfpjtJdxPV1lL5C+cjkPuXM
lRhr3R1fjOnOjseG+VoW4565ImsBYsIube7ieGc+VO3cCXq3cx/mtaU5LTTz
H+Ym6KotxHyyh+OUMdLT8UJfvd5+xXy1l2OHeW8fx1dBfuYuzDUYw0sdg9fa
t3m393Zs8u7qZTk+uEI/f1F+xtlZytno3Iy6pTlDH8cCz/M66Uya53ykNpc7
Z+7rmKJv32A/513fVxr7e9jer8rD+G5u32YMEjPOkYd2QjMXYu59o+NlQhbv
8a7OvQfab3kfDbZP8l7lfcxY4R06wDFIn2etxTuQ/jzIccF7EjnE6uFZvDuh
ieE3HcJDeQvHGTL/4zxksOOI98zN+pn+PyRrfI9B845rpV5iBvzD7OfIRTfv
zyuVQ3lLy7Gnvfy8vxgjQx1fvGNHZvH+ZL58e/6bVIh34C1ZxP820p2kR2oP
119Ic/9W+U/O69+WxV4e833o7oXwLc+CuNRW/jbqHGM/L1cmdvGOG2Vd3kFj
tI3xMtr7PQpRv7s64WccMXaY31OPOfgv89+yQsi4Q13wjpZ/ciF4kI9tQ20L
ZdRnvJRJI4fYztyyDXEp//suy5lHQ++0jL93+N4ZZznXCsubSnN/V/53pTzI
rlQ+Y5Z1Qpll3GPsVGcxJ6xxnsx8F7vaFqOvU5f+Dt2tGPXGW/dox0I3eaoc
F82lud9dHfCgB7rWd0SNNGOEuSll9JkZWcRb3gXMCYnbzLOYd+3M6Un8rMv9
SfIwBpkjniDvVPknW87YvFM/8CyWF4NnmfImyzPV+owjrtOl20ljy+ws5n/3
aCtXYv5s7W/tnHDmIW2aaXmN7a0pNs4jWysDmvkk78T+9vMZ6uP+/wGhL4ce

         "]]],
       Lighting->{{"Ambient", 
          RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
         "Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, 
    {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl00lQz1EAwPGnaFe2LNnKFklZYiwXYbhwyYWLbSyXMJMZg0NdcMDB2oKy
FSlLRQuKlIPlwoULFy4YhOFimfH5jcNnvu///7/5vTfv/f5Zm3YW7egXQuiL
JIcQjT9qTFIIc4y3UMETfjPDhPUco5eflJqbHRPCEV2rFXpYq7VL+8iKDWE1
B2jnA6P7h7CKMpp5R/qAEFawl0bekBYXQiG7qOMVifEh7LPPRVqm2/WgntMX
xCaEMJdtVPGMv+QnhrCRHHO/ccL4s7Zy0vgU5VRQSRWnOcNZqqmhLVpL2/W8
dugFvcglaqnjMleo5yoNNHKN69zgJk0008ItbtMarcNsz27XAu3QeXpH73KP
Trq4zwO6eUgPvcw3/zuPjL9oJ8eNN5DHH+fylEq2UkAMz51jtzus0RYt1npd
qAm8dA+1lLCYVF67rwb2sJxhvHWvTZSykgzeu/829lNEJl+8J53str9DWqJr
tFin6A/vWg9HWUcuv7yTjylnM8Ps76v5s40/6TJmGc8kn7zoHSaX6eQwjalk
szRaSwd7zmRd4vMkLdSJOoEsMhnPOMYyhtFkMIqRjGA46dG+GMqQ6NkMIo0U
66Rqog7UOE1Ry4Wk6HtcRYiPfsNxBscXHFdwJGFB8v//7T/MRHPm
      "]]}},
   VertexNormals->CompressedData["
1:eJztXQuYjdX6n9JhRHFGp6RS/04lkVInp0Tfv7tOnaJHRU65nZNKF9fUUeIo
hxDpaEoI0aCUiIixXFNkJIzbuIwZY257thJHN/1lr/XNs9+v3/9d69vrm713
zON51rPevbzfu9611rve21rrfzo9efc/TkxJSUmvnpJSKcX96x9d7nMQfFHq
ZpHyY1goeKT+FmwfL/jWrycMzlxcTmekLvzicX/3i6fevNSD1faV44nUP/CL
x+2XwoPwIz4wcO3+ovY1/3ha2ey8cvjcx075ts8Nc4z5YGscEbzlH6r2WXmg
HH+vPk3bP/bKNEi/KR9s0Zks8LM/+KrFw9XK+RCprzXGI/nvjgvHfwRH68VW
f4Oen/GC2+oXI5c868WWvJLz0G3PzcMtIbHiwrdK3d8j9ZzA57kpnaby1pQe
W/Cg150tuK153qVV6tqV35fj+aZqemr9WyYZ42k2Ku2BQ2MKRHT5DhnvsNCl
U42D4n+tKquWzX+1VETKHFm+55ufFL8pndw8QfgpHm7/Vb/r8o221xwXt/0Z
zdN6bBhR7HxycfU7rp6TK8sPnUU1mg1qtWiTM6PW6r17ZoREpJ7hXDP2h3tH
lm2TZYksVzun1Zl2TulJYVmudU5Z2G3RNzMmO9tf65Y3tH2xUzT/QGmV0bmy
XELkV6mj5FhEryly0rd0vfX3l+YJpec8817Nld1uLHPeOafa1gMNN4hI+RGR
a2Gh5FL6a7/8FahS1D369z4cL/Rd03l10eyeA269L+zMO7B0zFtpn8tyGjvf
lFyk8pD26+yV3Y/8yxGRslTWF1J6HDoPlZ5C8SN6pL7pUD6g+Um/K8dLjtMG
B4yXQ/cR+t22B8fW75CZKwZ173pdzbHFsj7xuP7DwG3Zcbbgtuw1pIcgPcdU
bzGFm+pjQcNN9b2g50nQ/LcFt2XH9atVv3TPoXI8rTud1eKNllMSTl7Zwp9o
fjbJf/d3v/z3ae94+Gkq99T+p+C6egiFI7l08cR//jRkZDn+bl1/nFq52gpr
8oThj4cPieaPShZ5ZctuRX7FePUrWeBovZuOi635j+ix5W+xtX4RnbbkTKLB
E02+xQtueR+BeguyZxFc6WtUT4jVX1S79qb+575UIKLLuRS/x06n3+XkCbLH
denk+InsdES/qf8K8Rl9l+JH62tCg/RPe6/OF9emtkv76IZCsTG/7oPfzH8X
z88of0qO61e55+jfHiFLWd8I26c/KSZO/eEz8eztl60a1TQs6/OcosyqPVPG
Fbhl68NNR1x5xiTYX269UH+OnGeknKvrLxLEb+Mgvw0aR+qnQv1CdJri4eYh
M3/YdUH8zw71PyP81I8n/VZC+rF8+6+ChieafyzR9k1kF5jSaboPovZIr2Ps
Ppd+ZffZ8heZ+pFs6aVB22uJNg+DptOWXZlkcVVbfNOe//Hql2k+g+k6Zfzw
Hrgp/5H/Kl72o+m4By2vksWOrih9QzcuT9oju8wD16VHxuNJ+Y41/LbwZD09
vWPqNRucq+Y8P2rYPWWyPhnit9WvaD271NW3VRw9Oq4+TdlfgtpffX63t0//
n9aLKwZvnf2/P4ZEpL6Miyd61stXb0/586UtCkj5KdT/SXuh2kfTV25/EbtM
ULsM2UEojk/5GU1HOT1yfIUcX0HH12OHAjuXm1e69pdmPox2HhH6LmqvC1d5
J9H2MW8XU/qfbL/0yfMfLRFPPXb9U7k9djn795ywf0CZeXwqaLjlPPDA8Jju
I5b97dryxBS/Lbip3WrLPjWl01Z8Iej80kTzkyC4LT0z6PiUrf7agtui05bc
s8X/oOVS0H4w07yFZPE/BD0uibYfIXiiyQcuTmHru8g+knlVDpdPxdlfuvE4
hMc035jEPbX5Runk9i/dfiE7KBqv117QtSN6vzj+jhMXlDgd7zp8Rb0Pd8qy
fBx1866Jnejag9FxRxp/9NqVpnzg7FDKZ4LHYxej8UX2LOUDydt3aN6+6Xih
vHo0Lip/kOYDqHMz6rwM8Vd4zqcgu9VW3NwUbuoHY/IoUL4Bm4fgN3+D0snp
V7p+PFtyHvVLM7/CXRcq7h59fuIjKA9RvK/H0O8vyZq+ybmz0fw5A0aHZP1j
2l83L0Wdz5HndYQ6p2Nql0XknyrDHnmI+Pnr51xc/54rlxD9CP/qvXlvZv9Y
JsssWfLyBMkHCrett5jmLSC5Ste79KMK6UcV9FwSoofKz2SJDyaa/p9oceSg
7Uq0LmydlzG1a+R3XXrUd235SZhzSdr4g54nSWYPBjY//dKJ9CjTfFHTOCOD
RwB9xrM/Iv1Wlw+a+XtIP0fxLI9+Tr/L2R2/Hrfy2kf546sU9HxpnVPj3uFf
/WVWmYjUP4RxLhlHdOOKKp6ovqvOT6hzE/J8tKDno4l+5Z6DlvQISg/HN+UP
o34w3bxZJJfIeXChzoNrjou2fc2cd6Z5sMbymckj1YYb5lFDeaU7z0l7Ns6b
7HBb5/WSBY7yMJl4nGf+Bx1fQHTaun/mi2uff2j8hAIXTuu6dNrKTzPlmymd
tvDbgts6Z5po9/kgeKLF9Sz3K7D5Zorf1r15SM4wdpxnXaP2iB5b9ik6V5to
9qAtORA0POi8neg679+Ovpeq1HM+CMXvbPn5beFBdFI71DQfEn03ml/ec1WI
TmRf12/02bVtNoVF66GVO9d6Zj6kB91zhfBweY/ITqd4ou3Aba49qNor+aTk
zKFJZ7S84Mxs0TucPWfYTyFxsN7f0+68fhprh5raNW+vnzK/uMMR+FOtOt5T
53Pn0k5reuXU2S3aZl6yZNw9xbKc7pzRpHj8Cw9+JerdP2j2v8eViXNbXF2/
cr+pxuPOtdfFg+Ijqh1aF4gPpvONiYuheG7MebOoPYKDuFvC6AkIjvK9VTtk
R3v8G8z61eUzJ/d0/QMojwL5hSAeQ/uFGxfKB9NxbBXqN2L6jHJ95uTOP7eq
XWcpzIdHeDg4vScQ6XWm9HP6nk/5Vh7HrCB/O+O/QvIQncv2+I1157ktePR9
f/rnpnXzFjg9XNdf5/d8BKXTlh2tKa9YvZHjD50/9w3Z2/vNdVkiUpbJcpGx
HENwpEehPAFyb4NQeVOLardfu2LjXtG66/BbvrhsjyzL+Uz1Im79Urmk4NQ/
T+5NFYr+kwf8perssWGnb37prH+duVDIEvPtKF1FYnTtn1IXr9/t0onGBeEh
7V25YZpn6/e7uvQgOLdedPU9W3kCfv1LuvEaeQ+vey+vuo+Xw0/xcPfS6OrP
fvVbIIfh+lJ+aG4eovuipVySZZnDySWkPyC+IT6o+Jm0O904GsnndOUS5w+n
cgbxDdF5QdqsvZ1zNzqDHg/96cWGIVmugeNC+CUUH5WcknLLI6+k/HSUXFL2
sPqd2um0PTd/KJzLX6Xx2Wh++T9faQrn4qS6dqVf/wnVZ/zed4r4Ru9t5vLS
dfnM6aW6+47fvAUmvx3Rw+Y5KD9UtF8Kx9nlvVIOvVcK7dfR55/XO8pfJO1N
QfM8kR6F7Dipf7j6iFq/Xb4/vP25BlkiUpbJ8ojcaL5/zNsjC4Qq59+5dcWQ
lNmwv1Iuih3bf/kLid8f/cN2sbRD3d+VHTop/cXJX7YLO8Nf3Nj4kay5IlJi
O5TsFx49VsplwcUrVR3tXwjO3Iem7b8ytdcofi6Ow+gtMZ/v1rVb/cJ18084
eig/M7rsz2v5p5CoMvqhZuMObJFl+b6zbWPX8zrvD4shW9unvPJQudx+4dvm
O4f9N+xktr7p5vecDNZfrWvvE/uUPd+B4JxdoKufIH8L2h/R+Rf1/6m9hviD
7FlOj9VddzJvS+VxuXlmqt1rjz9Wa1y7MqfGbS061Wq+gcpPV/9ZvKbsjze2
3iz6j6zboLhxSKRUE2ePfWoZ/K7Cq+AKv6orOQX0S48co+PIvd9h6nei9HPt
UZ4blRunZ1ead23ThWJLy5MuG7gkLCJ1/r4+Km8b3pozoFFJ+bz9svukC53m
s4zXC9pPOT7oyjHOP6NrN2nm72nvOxTO2cWUbxw9Pvnm0s/525E/B407jd+h
7yK/nCl/yPi662JZ9qCaXe4vEKpss61P///sWAblP2d33/z4jXefuS0serS/
csLDN8+D9NfL/XzlwO1H5NeVI2/OeGa303BeQWqPEZlQ7tW96rwtdxaFxKZ6
m8//4YlsEanPcNureILS3zTH14VH7nld7XRbsnva5Y3DnntfmXix9jxH465r
13D817VrODmjK4djPNfJyytmnzXVV5GejMZFt7+cP8Gj5/j0/+vqS0j/Qe9w
ITjyh0fWQZF4vvCml7Lq5HnWxehOp964Z01YTLxv38jmNy90nIbVu2WeVyzL
rUKWzsTbXwj3r1bi/KfDXfXrNN3l1Ml+ZNiaSSuo3971e3d9NEucNjfkfmfw
guse2r58k6sPRetHn5N8/XWePPld3ee+nzkh7OpLSr9Rvys9R+mLLp+J3kjl
1YK/nvzYXZ0KnbNfS91a2irfeW5H5RYvXb+YlSe681Dy30H8R/sRmldIjkm9
RlB9BuGhcmP50j0bNqTniEhZKh69qm6f7TvN/Tm1mmc0HTP1CL+O3n+9VNB7
sBE9FK76o+C6/UL8pH6ecY1q7uvdNiQ6Vbrvm7Mu3iJK38s/2GXFTGP83H3a
yA6V88qJziPyrmvT/AFVR3Ib8YfCObuM+S67z3L4dfMBkN6C4AjPK+Mv2bLs
tDxx1S291367Za+I1Nc7Y2o0HFz6r7CIlEKVrJyh/UV23OsFX2ft2FuOp8k/
H/+k46TZkJ/k/nmh/ISqPdpndc87R8upIo+8QuNuC657n8bOcReMf6qoUDz/
4cB+h0J5ssT+RgSPjtd68/d09TTO3xurX+uk28Y/XannMiejyQmT94wJy/rb
vte76XklCr/3vdwvT8wOi5oPLdh+a72PZZnBjkus9qaqU/sIxQFRXgGSPwie
NnloydULd4lxxUv75TQuEZH6TMhnv3Yo7S+K0/Vae23Ru8uWi0Yfb9k+4MKw
kHWIB533UXUUp6N0RuuFrp5I7TtH2XcP77t76HVvFAhV5rcb2HjO+mkUv0eP
QnAqB2LMZ4jZrxV0XoRP+ll/O+d/Rt/VfY+De4fazP7FdiVaRxT/s6vG98p6
ukCosmXnfm8+fDCT5jV58gfoPIyOq+UKXX3M1A/GyHOXHpSfqerUf24q9+ru
qN4xo2GOiJSlMj76qSNyWtRu3iQkXp854Zb0BzfJcqXsV7b4tPqIF6/eWqLq
Trja60OH1w+JNY2uGVvt581iSK++mVWmL2b1GeQfRn4kqWcJpV9x+Z8gn19Q
exa1J+Nlun615YZp3rupHki/6zffyTL9bnu/9zPr9pe8D679LjbFw/ntTeOe
tL3puJB8AG09hNKD5EzvTktvv+KjfGdHj1MqjaxX6Nw6sM0noTELnNvumbyo
y9KQ+K/zQ9aaVtkiUs90pLxQ8sNRcuP/93fh9Uj7G/EHl4iIf3in9A8vcM6R
/mtZClUn/XXn4TVnT2j39del4qKH/9D84O3rHVWq9lTOoHshEJ1ILqE8UjQf
/J5fsJXvzcTfY86zQu/30faa7/Gx9+NpnoNj81c5vQXxR3dfCMifb3qfhosH
5Ztx8QsaxyTryDP/Ubyb4kH5UcgPA9/PAvd2EjvI9ZMXvjpydvcbykTfzIz8
k9/6SpaeOJf2+RHpRxfKf47Gl/j/kT/N1Rszm4y5sMGoPDFoRJvLp9QvEud3
/u6SwgfmQn4iPY0bL0ontz+ieYvgSI6Z3sMZtN0H9nHyu3Yehdtf0/sSEdwv
PbpwW3n43HqpaDy24GhdID3B1P+MxlfF/xRcxQFt3ZOA9FXkt0HtlX9Kt7+m
+BGeRLtnMtnhHP91z//G+G6yth3K3C/NwqPfYdrAvseE4Nx5W6a/7n7BrWtd
+5S8w+XqV0QfcvUiZMchPXnxpn131KqZLxo8m7Viwa5C0Xxpi8sufX+a89b6
YZumfFZC6N3p1pult5hS2iwsajcuGdVhOY7jPNKxw+Yzfyx2djdrVm/k9l0i
Uv/EKXxp7eG6lQtUKZrMP21avwfWeOxGYD86RG6785OTn37lDLUj0Dtr3DzX
1X/85rOhczqoXwiuO8+j+aifb0/xkHtgPPfAM3QGdp6a4relz5D3y4Tu+2WW
7cqY44MUjvxLqh3Nl87v9cbPd6WGRI8Lzlg35e9bxcsD03q1OmeOymty57+y
yyJ5RJud+39X/fCHPUplHtGXTuM2JZvbziwRp6dtS2vZarv46/gfxneuscoR
Hc66aUb3fHFHRuiFRwYXiivr3Fbp6/tpPNHNe4D++Usu6LAnq06ucJrUbNNk
apGI1NdBOPIvcfYj5aff82WmeGKNi8l3JoQq6XsTunRWFNzUDqVwW/oqut/M
dn9jhdv2J1Q0fgQ3tceRvoHgKD/zyqN/eS58zBu//BUZ51ui9ui8MGpvi59I
zpjO82RZF8kC5+QVus+c+vdUnED9TtujfQThp3Yc58dG/kaKR75TIqLfLeH3
I+D3g/EO5vwjjVNw7xSb6nVuexRHQ/qquq/l8HkbHpm1MuzWVX62ytdWedo3
rerZaFxmqbhO2plX7Gu2/6eC5TBPaebEIX8bEN4hWu3oW/nlTSXO/jpPzBwj
5jkbejxw4OKu68T+wZ1n/LtvmazjOCnyh5M4tXt/nakeUpRZtWfKuAKhSppH
zcSL3XmieS+Btr5B57nf+3J143qqzuSFeug3fQ8LwSmfiRzQPg9C4bb0ZwS3
tU/ZygNBepTtPBPDfnn0K5WXr+Bc/jPSr5A+g+AoLmmq15nCUb9M9V4kz03H
N+g41LEGj9f6SnY6bc1DTi/VxWNq1zNxNxfO5UujdY3k2AerT3yi3Y5y/CvO
bb+87aUfJ9x8Y/obs9yzRc9xeegPHvS4cPntuniCji/7nM/a7REc6beMfuJQ
OJIzCI/Ky1RwTo9C9MN8MMN5FS//YbzosbXfBQ2vKLnK5Hm6/pPod1s/97zf
ivwt9F4+0t61W6PvqfSe99F9l5DjG/KnfSL6VL3m8BH8G++qfFHr0bS/7j3w
xB+l/S4D+i7yDyD/mJTrDifPUf7tn53dpw/rUuCW371+Z1q30iXkvrks9965
Fu/WOHT5qAK3bLrQeXX4qbPYvEp6fpzTn2k+J3dPC+0v5yek7dE81GzvzvNl
dxdln3CoUFx1Q+u0N7/Lk+Xb7Pgi/BQe7afznt9HfiT5rooA76rE7HcC6w6O
r26+600LajaY3jjPmfnd4peHpxfJ8o2Ek8+24Jb9VzHrk7b2X9QvhN+UfiTn
TelHehR3b3CsfLA17qb6TKL5MeIFP9bs1kTLJ7dln9qCI3uQkTMefqr7VRVc
3bNqat+Zyk+Ex5ad6NNP7ml/PJ/BH9zWu5/Jcl7Alny2vM+6v6t9Nl7vz5rG
K035gPxdQeuZPuOAMdNja54ky/oKGm6LD8ki92zJK8v9jRmPLbjp+jKVb8he
Y/QfbT2KodMjf0zlkqmeY0vOJ5pdkOxwy+eIY56fCG4rvyvR5k+i2fWIHub9
UM/6jVec1LRftvDHC54s+lui7e9Bw1UcUcHj7QdA+3XQfhVTeuC9N0A+JMv8
N4Wb8hnxIdHyr5IFbtmfA/Ggc83K30z9zAiO4sK658TJORpBz9Honhvl3s9C
9NB8A+4+LiY/wcNP5nyHdj6DaXsaRybn39F9AuTdop3OF1/uy5i+r8R57ptT
q4Q2ToXvpaL7tRB/NN9n1OYbnQ8I7vccMXg3U0SX7xjTo8kfzzuYKE8A4Tdt
b3pemzm/4/kuA4857yIouC396ljLN0b9RXoX0itM8+FN7URb8Ttb7Rk8CTO+
yQK3ZQ/a4n/QcbFkkVfxgtuy41B+kWn+vOl3bZ3XQ3BT/2ey5CH8Vu13v3Bk
39H2qec+u29JlbUiUoZlWZ43y9hBHn2S6nvy/nYh72/32GsID83PP33mK6fO
HxJ25q+q1r5v5RWy9Nw74dEzdc+nq/z+6Px3nLdP7AWH2gum9g5qj+Cm91RT
/VzlVeve28+NI7Vb1fkByU+H8tN0XlF6VJ2x97XfsaX0+H1fEvWLtuf0BIRH
Fz8HN31nKlY7PdpPkePxV5jSbwpH9MvzAg49L2CLz8kK96tvIDmM+EnPa3D3
+ZjKh4qGIzvieP55fOGmei/KezT9rl+9NCj54zeOEOt3Ew1u6jdAfEPjm6B+
Ce35nyxwjj9B+9V114vpfLAlfxh6jOXSsQKPN3904ybR9qfXDkV4TOM1QZ2f
DZo/tuDHWt5RvODxuqciXvGX43bBsQmP13yzta/Fa97+VuOkiSoHYvX7qbpp
3ogpPbboNIXrvqcZtD4Z/Q5KjvZ7KMkKt3zuTHtckuXdGdP2tu1NU/08XuuX
wn+r+8uxCjedV4kyDwk9gcmNWPfltgfH1u+QmesM6t71uppji2V9Ytz0UlP6
/bavaHic9W3j78bKT1v+FlvzU7O/Sbff2YIH7R+Ltz/2OPzX4bbG3e+53aDl
tuk9mb+1dR1vuK04CMKfLPFu03mV6Odu/MLR+0RBnT9S+WEKTvPEgu6vLjxR
/Yem9oVlfyMb96w0681nbxtbKsscWY6tsPvNqPw5HmfUgweVp6GJx7r/OVnO
kZnOT9Q+UeVVssNt5XtQ/LbGvaL4YEoPWr/ongEa9/H7Prst+mPFH284c97B
uj1lyk/m3hhTPA7Fw9Fvej6IucfD8y6JLt+Chh9r7/JweqaunhOv+3hVncpJ
n/uF0G1vC47GF93XEX1ezvsuSVB0RtNXvq7Ju8YuPZbvOQx8PSaKH4Y5fw31
arpO5T1IDnpP3NSveBz+63A0P9V7WvJeI8+7Wgg/nYd+5arp+UoKR99NtPwE
Tj4g/Q3ta2hd0HO+QdvL8dZD6DlHJOeDpge9LxZv/njorKD7TOi65t5f83nv
lit/ouPWuYHFr3XhaNxN9Q3uXcVY6UT5bNH3APq/H4BrH6v8D1rOc/EyXTls
i57ofvrXA23ZQfG6HwntawjO3bORKOflkXxA40Xun/Tcv4HmYUXHPdF7Xrb3
RybuEHe76f8ALJM2jw==
    "]],
  Axes->True,
  AxesLabel->{None, None, None},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGridsStyle->Automatic,
  ImageSize->{362.44765428702704`, 309.67744878150114`},
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], "RotationControl" -> "Globe"},
  PlotRange->{{-1, 1}, {-1, 1}, {-0.9979039430618286, 1.0227795839309692`}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{-0.4615815060068076, 3.1144376669842955`, 1.239846979180084},
  ViewVertical->{0., 0., 1.}]], "Output",
 CellChangeTimes->{{3.6804509250131807`*^9, 3.6804509297789345`*^9}, 
   3.6804510142546864`*^9, 3.6804510767099495`*^9, 3.6804512176141224`*^9, 
   3.6804514877764874`*^9, {3.6804515233176336`*^9, 3.6804515337227573`*^9}, 
   3.6804515693191414`*^9, 3.680451621840664*^9, 3.680451742628253*^9, {
   3.6804518567635612`*^9, 3.6804518600697737`*^9}, 3.6804519783103304`*^9, 
   3.6804522561498814`*^9, {3.6804523825747976`*^9, 3.6804524066313763`*^9}, 
   3.6804530003436546`*^9, 3.680459995627634*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Sin", "[", 
      RowBox[{"3", " ", "x", " ", "y"}], "]"}], ",", 
     RowBox[{"result", "[", 
      RowBox[{"{", 
       RowBox[{"x", ",", "y"}], "}"}], "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"Mesh", "\[Rule]", "None"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6803583789252787`*^9, 3.6803584162012367`*^9}, {
   3.6803584735966024`*^9, 3.6803584917210913`*^9}, {3.680358552786993*^9, 
   3.6803585569379997`*^9}, {3.6804507381376443`*^9, 3.6804507479426928`*^9}, 
   3.680450929230296*^9, {3.680451013709833*^9, 3.6804510138222623`*^9}, 
   3.680451076397651*^9, {3.680451527751148*^9, 3.6804515330462055`*^9}, {
   3.6804517309652963`*^9, 3.680451733757086*^9}, {3.680451851701318*^9, 
   3.6804518594453087`*^9}, {3.6804522299407773`*^9, 
   3.6804522880354185`*^9}, {3.6804530153062*^9, 3.680453017594452*^9}}],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1: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
8qz2vPZFLXlW/WWt0+RZ9VdckiLPqn9OWRV5VvzLPuXkWfw0sv/Casop/np5
kjwLXnRwyzR5FjzWoiZBnhVv9Ot28ix49M78LeRZ5Xv8tYw8h/bTj4PIs9p5
w9tl5Fnl9y/YQp5VfkO3KvKs81rdJkme1c4f8tPkWfX83ClFntX+63v5uCD7
PrZ5Yoo8Kz73+xR/L3gkcliSPAse3efCavKs8v3aVJBnlT9rzSbyrHiPX1aQ
Z41P6QX3kWfF21atJM+q54mzN5NntWdjrwryrPJP31hNnpWHk5slybOO23t/
xt+Qng6X+bgscTT6n7VJ8ix4LP5wLXnWuHvxNVXUq/JT+leQZ5WPLIqTZ5Wf
d9ha8qzyryxdQp5Dev56nQPPav+iV5eQZ9V/5DVrybPgBXc3KSfPiv89VkGe
VU/1+CryLHhR5SO15FnwSJc1SfIseSk24MLt5Fnxq4+pIM+K73+T9wPBo4V3
buZ4gke27LuWPGs+PGDmCvKs+PxIQJ4VL0oPIc+Kf/rsIvKs9sx9ZwV5Vvvv
7reWPKudx3+7mTwLnv/q9C3kWfF2/SrIs+BF8+ZVkmfN8yf8uIE8Cx79vf8a
8ix4bOndZeRZ5a8esZI8K9528mLaoeNOHLaQPCs+LD6VPIfqkQbXk2fFT28w
lTwr/tSsheRZ8R9eXkyeFb9s1wryLHikcFAZeVY80nwteVZ+XumygTxjHnX/
H3raOFPXZfF46cggXNfl6qwB55u6LotHq+4wdV0WL6odEoTrupz80EeDcF2X
xQcnR4bHg/wpN5q6Lodf1s+F67oc/sVdLlzXZfFVDQe7cF2Xm++oAS5c1+XG
73aCqety8q/909R1Of3zh5BnsTd2VIf1rKsEj/723lryLHjkpBvKmLdUfucp
KxhnFT+/8RLyrDyt+iggz4qvO3sGeVY8//tbKad40eBp5FnxJtctIs9qzy81
i8mzyldespI8K56+vMyBZ9WzdCL+Pcl0SL7iadT/aa3r46m3Ksmz4LFViyrI
s+CRJ+7xdYb60S+fbSLPigefriHPgkcXrV5BnlW+1cKPyXPYT6vOxXwUf3T0
Ij4rXrlqOXnWcXtvWEOeFX/tH5vJs/Lwt39sIc/KQ5chFeRZ9eS57eRZ9lP+
73cmybPgBd+/VEueVf7x+6rIs+CRUaMqyLPg0cM2xcmz4LFLD1hLnnV/X12z
mDwrnj/uXvqN4m32WcJ5qj3fzV7DZx238+Y4eVb8sUkV5Fn1vHt9FXnWcY99
pZY8q54PhiXJs8Sn2DkzU+RZ8IJpJSnyrPjydknyLHj81y+rybPgRQ2WVpBn
wSMXDttMnjVebv9iBXkOxdFf7ifPgkef6bSSPCv+dLvNnL/izcdW8Fl56DG8
mjwrHqtMkGed10WNeN4Oxfv/HJQizxLvi05fUk2eBc+fuy5JnjU/JBr7c47g
kU/vSpJnweOffVVFngWP7pzu6xXV859hZeQ5lJfW9yPPio/vV0aeVf9f7/T+
KnhsSUEVeVG86+oEn1X/IfukybPa+ei55DOEf3pqNXmW/Jm/rEU5eRY89vyc
KvIseGTLbu/Pin8o5x/Bo8/OrSXPqn/pGxXkWeULH1pLnjXP9xk4nHlQ8Z1L
1pBn1XPdXRXkWeU33V9LntX+FxekyJfaOaF1is8qf9TaKvKs8tER5eQZ39fZ
s6F1SWD6dRk9N04rN3VdFn8+UR2Yfl1mXxRfkgpMvy6j/8IDk6auy8rviFWa
ui67DwsqN5BnxYvefcb26zL639i93tR1GTx23InbTV2XlX94WdLUdVn827Ep
U9dlx93Sq9qZfl2GhyMOKA/JQc91O1e6XoV1A1QFA+vUzU3UzSfS77sqd2zd
sJl7HY8nuqbcPpnfxxWP1XZLuZ176v6ru18hXnT0i6mgfVaP4nmvP5Xi7zF+
nZ7GX1XRHsVfWJekPYLHGzVL0x7B83ZfnnAYV/Do653TwUXZZ8WLOh2SCu7N
2qN4weW7PC8Yv07PX45PUU7w/P/utQfPgudV/TlJewSPv3NKkvao/oKWadoj
eOyAjzxvmHfdukwY5+1RPPF8wk3O+M9MxfMmjFrgoF/lh8ZSwdaM/5QEH2X8
K/vvgp1y7XLqUfyr4bPdqCzuFH9zkpeDvjr8++uWOTwrPisWo37Fmw55i/oV
/7jh60FZ9lnxaM0tMc4T+uqeltd8RPsUvzo9g79XvFGTybRH8ZNXPEF7FG/S
9Cnao/iyuVOCmdlxQ/hfnv0gwH5RfFSDj2g/xql7Kp/9EflU/OBxs8mX4kMf
fJd2Kx67ZByfFZ//9mgH+xWPN37TwX7Fr2gxi/td8XtmLiCf0Fe3LhNGf0J7
BM8bOvYt2qP43EFv8FnxDQUx2qP6G7ZbRnsEj5R1XU1+8bs6Pd3nel4U33DG
LP5e8Qc7LeOz4NGKKWsZ1zB+3bg3D01Rv+B5z/26gPoFj7Vsvpr7UfDo6BdT
1I/4UYcf0yXFeCd47PpkinFH8LzbBiX5LHhk/K6EQ/xR/KCD0rRH8fU9vT34
Xd24b5f7eC143sjPk7RH5bsemqY9gkfOKU/xWfW4/BTtUfmjd/m4ie/r5L/t
luI+Urzw5hTXSfHEAynOU/F5Xb09gkeGbqsiD5oHfznV33NpvistqaC83hNN
+ZjnU5WPtj9xPfuBivc8zecn1VP4ea3miTzcx8WDBPtaque42hTlRU98T6O0
5gPq6XpXivFT57vyoWrKa11275hkKB/g3nP18BruH7Xn9IP8eVvxhZtC+4r2
PDgyxfObyBe0bJUO+T3qx+JDfZ7VdTl3SDX9Q8d97Azer4XkF/5lHeep9UmH
WbWU0/uj6X9KcB21rui399yBZ72HOuEXf++p9cyvnf16aZ370xC/Lir/wmOV
9EOtKz773e9fqYuLjt7X3+NqvTHlS2+/4JEJD/t6Q++J9r/U14cqv/xrv0/F
v2JndvT1qtrZrK2v+wUvOmZVkuul903dz/X3zaI/umJxkvMVf4y6Rf4cp/a0
3unv77Quemy/Ws5X9EQWzqqEnlAddWl3X7+JfHzjC/49BMFjC86sZZ7S88d7
F8xgflX85Q7TyI/qqSzx9zdaL60auJh9c8VrHpvLfK3nm9KfZ+fmNWOhysdK
BtBOlV/3zis8v6t8nzPmMA+q/GFvTuD5S+ufDovncJ6Kj+j3Dn+v+OzIi6Hx
cA7rM3IUn1U+79PTQ7+H/IyWQ3he0+9Pf2RCqH7iOS/Wmec4lR/456mh+gby
+R/cxvOdyjeYP4c86DiV78/jOip++JEfkHfFn+g8meuq586preZznipf0KI/
eVD5wveL+KzyOxe8wmeVP+wf/yEPobqx6j3WOSpf8/oc8qDyl94wj36sdd2v
65eRB+X1he5LyIPiZ989j/NVPDKtL+er5++dg6ZzviqfnDqH9qn8kQve47Pa
eU27xXzWPvOYkxYz/kjdGCvbVM08Kuf+ot7zE4wPIl9U8XYN85fq+XRtJesT
rT+vfyTBekXlD/yhmrj2dc/d5POf9i1P38n3IjQPFzVZ5s/1WseWnlrNOkr7
mTddWcs4r/KflyZpv/Y5gjN8/03z/ysP+jpQ+8NnNfX5S+vVv+2TpN1aJ398
ZjV/r3X143vtRF9F8Q97+PpQ+4HHnOL7Wqp/fJs056X92A7Nff8lVG+f59dL
+5y9zvbnc6l781+v8P6kdfXWryrJl9bJM270fCne7vck5bXv9+3YJO0Q+eit
ezwPKt9oh+dB6/Y3DvP1uvaljmjq56t1dWWbcvqh4PnRHb4eFTy6dMRa1h+K
b/khFZh6ODPujV/6OkDr/BVzqgNT92b4fOv6VGDq2Iz8PsNqyL/a/2ZZNfeV
4g0WhvYh9ER6He/7qCp/8W8pZ+rezLw2f+/7fiIfS58cOqdR/7LJCT6r/q6R
9aFzDuRveWZdqN5F3f77ret5D671f82df5hXpr66dn1N6ByI9wbv+3tlYMbN
6Jn9yHrmQa2rZy3w71tqPfn6ef68o/3d7bf4Olzfk3n+c39u0vdhZjSsIQ/6
3s5f5Xyr93e3N/V9Ve0DPLp/Le3UeQ8ekWJ813336h4fh7Uf3reswvKfiRvv
XriOdgt/8VsmJIIGGbntwTEZPjLv/USa/FTrNmXktyoe/3zvuQPP+F2d/Tu/
rHV4Fjxy8K4U9ah85TUp6sH3dXZ2aZCmHsFjbw1Kuaz5SSd45NIWe/NchrfJ
wceZ77P3nYN7PO+A4zOj9m+XU0/3DJ+Zvnb05w0p9++MXLW7J8NP5lwdX946
TXnBo10vSPAZv6uz8/ofvR7B82YcmKDd0LcXLmh0TSqAHYLn7dh7joB+wWO/
35Rwg7J4MC+LZ+Z11nCvX/DY831SlJd1jNUcnXK9s+OG5Cd95HH1h6ZFKfKl
8h9XpYL12XEVj0wdkwrGZefPzzo7y2Z4PxE8cldV0uFZ/efkr5K0X+QLEvul
OV/B88ft9U/Ii56iVw9N0z58X2d/79sS9EPFH9ydpLz64bE3p2inyEcW/pzi
vBQv2Dsu5NXPZzbydqr8dVHkx1r182iHE9NcJ6xPnX8esq/fj4LHpi5L0f4h
Gf2bMvofucDbL/J5x7f2+0v1v98zHQzJ7h+n+6vH5GeCmswPFvCzDm8xciL3
neIvTXjMQY/ifduNCkqyzyH8h7YTOa7u3+jie7mf8X0dPvbZkXxWPO+bm8mD
7vcbf05xH96d5SeDt27v+Rf5vElbPJ/w9zr8lr3xGftc8Fhts7Tblcm/lRo3
YtX7p6lf5Iu6HebjjOpJn+XtET2RaE8fHzBOHf723joKv9e4NGNlinIiX3R9
4zTlBI+lT/Lyquek1t4ekY926Zyg30i8yj9+kY9v+F2dniOKvJ2C5835wc9L
8Gjbjl5e9Ee63urtVD0HtUzo/slDHTJ0vr8H1PiZV+jfr5a4lzfmN5+/9B6z
0Sc+Tmo98/gnPt5qf3XMDN9/E/3R5Ys8rvFtfKt0yP9QF8Um+fdbNL65w33e
1Ppn1Fhvj957Pnm4j0vaPyz5l+/LaRx+QXCJV3m7W/j+msjHKr/277frOpzR
zMcrra/jb/q4pPehxx7i47a+79223O9H1fPM0z6PaH+v/yx/HtQ43PZ7fz7V
+PmvnV6/9vdqyjyu79XEt/n3/3Xd2t7v46reywTv+H2k7xdNa+3rbNETuW+3
P7dq/Ll9nX9vR+NJ4Z/834NI3MjrE/f1idT7+bEOPi7pufWqb/3+knNlwWet
/PlU9a8+yuMal84q9ucOjScN3/X7Xevb5o18/FT8lFk+Duh5cMRP/lwp+qMl
ct6U+BBJzPR9coknRRtnp0J5Eeea20f5+wKRj3ba5OsiPZf87Rtvp56bev43
FVo/6O+71N/va733j2d9HaL11eDf1tF+jWMnzvLxSv8+qO3efWfmldEzc0yK
+U/17NfUz1fw6HdbU4GxP4NfnUiSR7WzYXQd44vWgUWTfL2kf3dzd2tvp8jH
LtmeZNzQe4e5jX3fRuu0kVuT1C/zjhRuS5Bf0RM/uZf/+xGpl2KPv+zjhsaH
M+/09Vi3DL4+s163xPl3E1pv5P037eOD1BuRTsf5+KB9s4vm+H6I8J3/VHuf
r7XP80upt1PX56grfR9G8/UPf0pz3+l7U0++4+Ob+GFe4o21gcmnGT0DF/n6
UuVXrfK8aL5e1Dxh+mbZ/H5nImXzXcaezj94fnRf3F66jvPS+7vXJvl7bv17
t/M7+/caNQ8WtPH9Ps2Dr4718VPv3Yamank+F/n8Bw/y+vW+6eKR/j1V7e8d
vsm/h6NxtcVx/v5P+zF7B2b+1vcw31/p+1SKt3nZ1wkaP3tXe3l9//BPjfw9
luDxZNzfe2o86dAmEcCfdF+POT5FXM9Ts49Is07W884zh/h+nPAZd8OwjrUq
XzTtZl+3Cx7fdKCPj5KP8u8Z7e/LtQ95VbE/78m+yBtxkK8D1D8Xf+brBI1v
53Vf7eD/Gief/izJvqvKL7jL9+UEL7q1yMdVPae3ONbndb1ffqpBmvPU83ii
3Pu/2lNS7s+xyn/nVknuQ70/bblfmjxrfdX5shTrV42TE/r6ukvPmx8dlSCu
95sndvH7WeTzD77Nr6/WXc+19LxfnI0rGT1FhyY4T4mr+f2apygvdVd8xnR/
XtM4/GD7BOOqnhOfPMTXaSq/caDPc9qHf3qGt0PPO/3O8vWfnlOua+bvuzW+
3Tg4RT2K9z3N+4/itZ/6+K/44sdXO8Rh9cOfd9aG4jXec9ivqoy45rVGLfx5
Suu3t2S/KH5tJBU+X2Xjef7upaUWz9gzfMBq5Rd4fryJz5v6u+1n+78D0j7S
RS/6ukLfK7jtMz9PmVd8yakJ+rPkzUhhMsX9ovHhgPE+Dih/bW4qpbyu72GN
/Pvwghe1aByqM8BPtHxzqJ4AHjnjnYQz65XBXzxqNf1B89SJ8j6Zvp9zw28+
Puo51N2XIq7nylXH+rgteP6Hzfz9nb4v0f/iauJ6/nrmTp83dV8/9ILvk6t8
4+4+3+m94Z4xPp7r/caQ95NcR9m/8Xem+XileaFRgxTPq9pXeWu3f+9L9nXB
mPeqzTpm8KKr1vv+tfaHRw9P0n69V3qhYzVxzbMzN/m6VvvGy1Z6P9T7su0t
/Psfmt8fOHk7+/ya7/YMrqG/if6iprf7+1r1n/kP+Hyk+f3HY/w9ruaFTvtV
U4/WP52v8/tK8k7+ZSf5v+/WvPDoF0nuE+1D3veT9wetk3/s7PvMWicv2uzr
HPWfJQW+vyB68kum+3pA6+defZLUL3Eg/vl//d+/6H3KGX0S1KP1w4iOKbvf
M/NtWePvITTvn/KTP38Jnp/XwZ8r9J5nasO0+h/1t91aS3/Wf8dgyLwa8qt9
nunv+vfFtU5YVZ5kftS+9NDmac5Tz1Nub70Nu3V9G3fxeUr4KDhqi4+rmt97
zfH3fJIf4o17+Dyu7wO0P8PXM9pvGXyx74NJHI2f9Hwi1M/i/ezTvj8l8pGu
RaE6g/KrxqacidsZfm45w9/DyfeRHwf4e3n9O4zCB30fX/yt4JYuvn+tfcJ0
dx+3ta/1ZKck+dHzb0lLHw+Vz0hvXx+K/xeUlfp7PokbkX9tShIXP88/onmC
fq595ibN/LwkzkTy+/r7PIlXRVMTvg+j7ydsWJYMBmf0l+fsz96TTrnZ//sz
4m/5X7b2cV/jyeDLfP2q/j+jp49H2s98+Fn8exFbdNyCQ7b4uCT3uQXjdlUS
l/vfeIeONYwneu/wbAf/9xhar57Y1L9HqHFv42O+ryHrFf/76mrmBT1vrnn/
W+L6/sm/n9rG/ab+1uuoquB/AX0qngI=
   "], {{
     {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[Polygon3DBox[CompressedData["
1:eJxVm3fYVsXRh885wQIGBTHGHsWKBVRAsYuCNR8qoKJEBBQUO1iIohTBXtGI
oGCwkAh2NBpjAXtBsGBvEbGBqETFhprM/c59rpfvj7l2zj6zc2b37M78dnaf
Dfqf3P2kqiiKs5Yrit9EuX1ZFB9GSd3vgh8ddEXwO0Y5v0iZNYJWDGoa9HbU
7xL0UfC7R7k87YLW9PdmQWeGsn/Gbx8Hf1PwXYLfM+jAMmU3Cvoo+G5Bnwc/
MmT6Bn0a/GdBKwetG7Rn1O0bMvsE7Re0IOpa8q6onxfPfwz6fTyvoH3nRP1D
Ubco+Pej3Cvok+BXL9JO5MaEzOigw+K3jbWd3zeMuoVRd3DQZvaZPrWxXCvo
y5CZFXR/UP+gL6JunaCDos2GUW4bdGjwX0fZOujokPnSvhwT/LdRbhm0ie/E
9oFR/02UWwRtah3v7uA4YWNHS9ptZ4ns9pbYOyf0zA7aPPj2RdpD+07+Tj/m
Y0/Y1zvo+HjuHfSnoCOC/i+oW1Cv+G0bvm1Q5yJ5+rWHJbp/0L49g37Uvi5B
e2sT79xLW3nex7odgroqz2/fhT1L+GZBS33HQUGXxPNXYUffoD8F7ap9Rwa/
m3YeUCSPnQcuY+8v2tIj6Gdt7B70n9D5UtAjQX9groWu7kH7Bt8nyu9D5hDt
ph+HWmJ7L8t9gw6z3A+bou2AaNuvzHH8o3b+V5uODOqzjL1Fmf3rG/SrY9GT
ORD1ZZl2Huv7eM9xUfebMmWaMDeZU0EDiuSxd6Al9h5j2cvfu9qfQeo7HP2h
pypzfL4KWi9oq6Croi+XR/36QScsMy/O8B3oPpH1Xqb9J0W5An1nbKM8JWjF
oG+DhgQ1Dfqz/eH9Q9XB82nxW7My+3K6/eEd50Rdi6BTg/8pymFBqwRdF88X
My+ChhU5d7HxbMsTaWt5EjZHm98GnRz891GeGbRy0FmMqe2HxnNz7A5+YtCl
QZcFrVSmPacFtSyzHB00IvhWQSOCP99xoU8XWNLXi4LOLPI9F1ti77ll+tZR
wY+McrWgkcv0h35c7zN2rFrmuIwJ+rFKXROCznO8ePfvy7TrqqA1ypS9Ougv
tkP2GkvsHVOmfeODVg/+3CjHBo3zd/rxXNCDQf9yLPn+zN+Hg24PuiPoMfSU
2W5NY8UNQWsFf2WUfw1au0zdk4PWKdPGG4NmVNmPW4O+Dn5m0Lrx+032A/sv
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
5pkZcnLN8B+6HnepGjHLLq7ZN/3G7e3LjupEBqxDTvjvVe4N2BeQYyOv1LfI
OyLkDsgbsF7AQDXWAN+QL2bPwN5hH+s7u6ZYp11ca2BpcrCLnM9dXdfzlQHD
dFamletlb+ctcZL4TR6SnCL5z63FD/DkHVkLYOg6ru7nuvhSPe30FV1da7dX
uT9hb8K+BB78cE+V+465wd9R5X6GvcydVeZZyLGQV4Ef45oidpLr4C4ruQly
JAfJ498oeSaOkUsgp0AMvbtKntwC666Hc4/1C67q6dzu4Xpk3bH3JmYx/8Hi
jxcpc7Bznt8PUYY8BPwWlvxG/GGPRb/6ub56Od9YLz1dIytaz/plD8aYsL/l
/irnI+yp761y/8Peh/0re1f2rfdVybOfJUYd4fz/R5X703lF7mlou43rCBni
FHOePcN01xH7Afbt7GlpC8bn3JK7mJwVcM+AXBh3R7l7wH1N7moOll9HGe4h
cA+T+xTcN+WMg3safZX5RhnacmcA/dzzLPx2fEfuEAxQhvM8zt2428PdAO5S
7lTkHYNjbMuZIOconKHMlSc/xt0e7gZxt4l7DgPVSS6QszHOxTgfG2Tbr5Th
PucTtuW932oP7+LOM/Zwp4hzQO7ucG/nDHnkORfkvO0p+eOt31Ced7VThrac
4Z0szzkP5z2fOIanOG6Ug+X7y9fjNMR+DZRvuMtR5B0MbOa/SvBb2d/TtY3x
YxzZF3M2erq2nWo9benrGdqPH+M+zcfaz70j8jyc5Q3Vfnwk53P4TPIfnIXh
62h3ZtV4z3mYPHX8hm880XcxHvzPiHOU7/Qb8OQxwDbsCfFh5EU4eyNnwl0a
ePwe4zfcMcSXwnNexrkYudy1i7zbwzncp87Tkc5VzsLIy7TWTw5TP/mYUepn
3M5zHnKvmLMffCPnKKMdZ8ZwtGNLOaZqvA8Df5i6z3Yc8KfnKTNPnfhS7O2n
zey5LnAcmLPM49bWXagN58r31tde5BiCT+A5P+K/UZw31fdheO6rP7/Eesac
cxn8Nn4MOfxzf+vJMzX8n6AyV11lLnpdffXl8tTBN/ht29R56Stsi68ea/2B
6kT2PNtfq09gDeCLZthn+ouvv0o9lOx52O+Ao+DHGgfIxdT3CuDJUZODZgzx
A+Ai9lF13TjHFj9Obhbfzl3Eseq50Xp8KXlR9gnsEcAt7GdoR36X/C+5T873
J6iHttdZf5c8bS+3D9P15+is3zPed7HOJrruFshvrY9nD4OfJ09KvpScFvrJ
fxIjOKP/q+/C/0+WJy9JfpLz4ydsS6xBFpnpxgTynvP039w521x/RVvOpsEU
5EHAFcQxcotz9QlgKc74wT5goD30c7e6Nsk5knvk7AKMQ56Usxh4zmY4M2bf
gf5uzhnkielgdfJ94BTux3GXnXNzsAN4gvMYYgJnJ8SF+hyltXPjbucDY0is
vd24DS4ZYEwGr5CznmpsJi6zvm53TeG/p/stwErYA3biTv39jhX+6IGq8X+g
D7iu8T/ESHwR40z8fsA4T4wnT91Pmdr/E4OJt3P8FnVcpX4L4wLxdUtjLvf6
uOfP/yXhiXHcs3tEnvv28OSEf43ylyrvznInn/8J7GscfFR5/gsJjw/8Xlnu
yS6N8qcq7xlzL2umYz7TZ3wC4/+Y9UuV4eyMb/R41fgfKGIwMfMV9d2q30OG
OHW8MsSmo+0vfoK7QNz9JUZzb3OW40wse9p6Yg3xu47V8MSvH6rsD3d/uQPM
PRvi0VO2BY+85e/kip9X7hnHDbmp6nnOdzHeDzn+fMcXtGeWfP3fFf5bwnzp
JF//L2OW8+dk7XnG3+co86I8Mqwn1tVKfs+X/KZ8q8V+L+q4E4mfZ1xf8VvU
Y804U861nvvhr1n/oW138nvN9Rtdpxx3yPGR+Ep8OO1edUwYt7e1n2/3ht/x
dPk2rqM3/RZD5bdWz+tV43/iXlMn3+EtdW5Tf5si58/rfq/6jGobY+yH2s/+
insy9bp8z+9C+b78CPm9jP/gg27iDjAHGIG9GHiC9QuOgGe/tpcyYAZyGrRt
XSTm4Z4QuOhl7SH+fynuqe/Hwvc29nJHZH/jO/igzunCgxOIydylIF4TMzkb
vlb9L9nfX4xhxC/2wsQLfB0xhFgyTd/PeVvt/zk/I3bg4xc5r8CZYGX8CnuH
BX4j/DFnSFOc2186hsQ94t+N+mfq73d9fOsawcb/aOej8sxffANn7fU5Ozw+
5Bjn87euL+zBL7H+vnFuvCa/kTEUG4i/J/he1jX68UGsA/TgH1mr+LPvte1Z
+Qf1dT9Yz/87ftK2JbbFhueUod3Fyl3kelyiDO2on6B/pR4fy/8g+N8F6wkf
DD/Nul/s15Py09SzVBtmaM8E2/6q/FPytOOOL3eMuPvxP4/sIZc=
         "]]],
       Lighting->{{"Ambient", 
          RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
         "Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 0, 2}]}}]}, 
     {RGBColor[0.368417, 0.506779, 0.709798], EdgeForm[None], Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[Polygon3DBox[CompressedData["
1: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
         "]]],
       Lighting->{{"Ambient", 
          RGBColor[
          0.19699838300000003`, 0.252204821, 0.33320940200000004`]}, {
         "Directional", 
          RGBColor[
          0.15473514000000002`, 0.21284718000000002`, 0.29811516000000005`], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[
          0.15473514000000002`, 0.21284718000000002`, 0.29811516000000005`], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[
          0.15473514000000002`, 0.21284718000000002`, 0.29811516000000005`], 
          ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}, {}}, {
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl0bkrhwEcx/HHfR9ZbKRIBkYhRykhSokBkZSBgZXRgsEksVgkZ8gtNsdf
4L6PwuD4H7yeDJ/e7/f3+Q1Pzy+nZ7B5ICIIghFbjAyC0IewlKTzbGvhdW5F
PA879RpW6A/s0Y28w/pt2MZt1H3D8xn+iRO6CRd1AU7pPX5my3zL7YIv4Im+
5Fe2ytvdrnkJrukdvNFfuK5v+Z3d24M92qb7rudP/Bu3dRc+6zLc1S/81Q7C
d3F743O4r8/5qc3y1vD3PB8n9SYu6F881tN8LPx21mft1uu+7nkDf8fu8Dth
uc7FNl3Is6yer7il8Xk80qk8xWp5tVsyz8QavYxJ+gcPdSJPsHiLs1irdl/y
PCb8JlilKzFaZ4TvoaM4DYoj/v//PxbgQY4=
       "]]}, 
     {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl0bsr73Ecx/EPfm7HpYyKwUQxKKVcUizC4n5NioGJjVEGJouwkMGldA7n
yDVsx3Dm436nMAj/A49fhlfP5/P9+0zfX07vUONgTAhhzJbiQ/iMDWEUCyMh
pMeFkG11vN6tgOdhi27CMv2MnbqWd9iAjdhEdO6rfp/lLzipW3FFF+K03uZH
tsp/uR3zRfynT/ipveqfugfPdAWu6d94rtf5BV7alV3bjW24//Hmlr/hpu7D
O12F2/qeP9gu33B75PO4o//zvzbHu9y2eD5O6TZc1h94pGf4uA1bv7Vbt3sN
PnnTzpuxVOdig87nWVbJV9zS+AIe6lR+gCl461YR/cb4Q2diuV7GZP2O+zqJ
J1qCxVvEStzjot/Gm2JejbE6A4t0DA+2F/n+/78AFQVDQQ==
       "]]}}},
   VertexNormals->CompressedData["
1:eJztXAl0DdbWjjGolpJXQ8Q816ytKbpb5RlqFopSU6uGKDW3CKpUWzXUVFOJ
qalZTQ9hm5UgRCKJJJKbeZKIWU3P/5zv+LOts25u3JS+PqtrnXX3Pdln7+/s
6exzbsv0Hdrxk+wODg55cjs45Hg0rvbq4+OcI5Yxuiw96f7ZmtO0edDQ86Oa
xvGC1V6zv02L4i9KtvesNsSPjk+YMO5S8zi+t7KbZ37PCK4ymie3XR9K+beW
Gtx3WRDXmbwz//wyp/j8Wyd83Lck08lOd9wOR0XR9B0BLT7Kf46Gnow+ffvH
OGo7L7Z815VJVPDMoly35vlS2e4veXL5UDoY6z5r7PHLtKvh29FNcx6kfHtz
Fv71fACVOloh/7IPU8jh8b9Jaxpd+aFwY385nzFf8GfwF/Iw5BHyE+QX+hL0
FfgQ8BF4EvAEjvg7zF+xe/TxOlOjGWPtoCn7nG9fpODqBV/Z7RrBg1sPKxJe
IITfbrvvzP7c8USV7yx2OO1LAcXXeneue5RGprb0bPldCrkMmz5z78ZYNV6g
drOLH5ozNYoSznkFX62RRIvfcp7TupQfJZddU768Ryi5VvDqEVL7MlX+7Gjj
H0cfph5V89ec4RZE+XmJ+12/yxrn6lFB9zvUCZTzGfMFfwZ/IQ9DHiE/Q36h
L0FfgQ8BH4Gnxv+usstjat+qqf0aoHAMVOu8q/hPOX8gYGDEDj1O69Uv/vrh
VPKc0nngQ0cLZWuQ+spDCqHlua69N2RQHNXrNyBX5YRYuvjehNy1PELIp4Vv
wzZLLTT3x1F5HJsk0iivWw2WZwugXi5fOrhfDaPk3g8vFm2VTN6THo7b6HmM
SvZvPylkSwhdcOnjPeJhssbZZValATMLhsj5jPmCP4O/kIchj5CfIb/Ql6Gv
wIeAj8CTgCf8HH4Df7Eou+yk9nm42l/gCLkgz6ZRg0Y2qBWpR+d6jUfXzhtF
3m08bm5dH0Nt91wae/SdCCpZ/peXaua10NaeQQUqrYpXYxDdC2ix76OWEXRv
+++jLpxNVONJWjD1bMe1pSJosWXs/MKrkzTOBd690HhnqafmM+YL/gz+Qh6G
PEJ+hvxCX42/wIeBj8BTxx/ETcQtxCv4OfwM/gW7hF3AHoAj9ID8g0a79vfO
HqXH2eTb5Fx3C7VPrX+nlSWGBs+7ebNftTDyXuc95kGjSKoVVqxBQPN4GjW3
/7iommcppGDjRfRmFDX5MIdHryYJGmePcp/F9l8TJecz5gv+DP5CHoY8Qn6N
v9BX27/AR8cfgaeO/8hDyBvIF4ibiHOIb/Bz+CX8EXYJO4L9AEfoDX03hn63
Nc7VosfGxfe47d0TTZO+c+7Ku6PUeJ5cB7RpfK5mHEUMGNShxflojXNDj3qL
/N+Pl/MZ8wV/Bn8hj8ZfyK/tX+ir44/AR8d/gafOv8jryNvI18hDyDPIL4ib
iIuIh/Bz+DH8F3YJu4O9AUfgBHx+Hrmo2ir3QD1eLdXw8pt9kmhE/pJF7rwZ
rHHunn2MZeXAy3I+Y77gr/EX8mj7F/Lr+CP01fFf4KPzr8BT1z+QG3UT6iXQ
keeR30FHXkI+Ah1xFPETdPg9/B102CnsE3TgCjxBTz9ekfNZzlf8WfJX8rCU
R8nPUn6lL0t9FT4s8VF4MvBE3WmwZzbYMxvsmQ32zAZ7ZoM9s8Ge2WDPbLBn
NtgzG+yZDfbMBntmgz2ztGfU8Yb4zIb4zIb4zIb4zIb4zIb4zIb4rHEW8ZkN
8ZkN8ZkN8ZkN8ZkN8ZkN8ZllfMa5yFBvsKHeYEO9wYZ6gw31BhvqDTbUGxpn
UW+wod5gQ73BhnqDDfUGG+oNNtQbLOsNnDMN9TMb6mc21M9sqJ/ZUD+zoX5m
Q/2scRb1MxvqZzbUz2yon9lQP7OhfmZD/UyyflbnFzKcB8lwHmTDeZAN50E2
nAfZcB5kw3lQ4yzOg2w4D7LhPMiG8yAbzoNsOA+S4TxI8jyIPoihv0GG/gYZ
+hts6G+wob/Bhv4GG/obGmfR32BDf4MN/Q029DfY0N8gQ3+DDP0Nkv0N9JUM
/Toy9OvI0K8jQ7+ODf06NvTr2NCv0ziLfh0b+nVs6NexoV9Hhn4dGfp1ZOjX
kezX/bDwZd/+m2IYY+LLp0KbtPej1y/7Ta7/j1ie1tF1vsfmSG5zZUSnGj1D
qLGH1/mGLcP5uMeD68FeAXzX7Y/Yo3sSaNOpLkNmTQ+hCUXeCjq49jT1q5Z8
fWpSkqQz6IIPgY9Yl7Au5MD3oLeuUrpFyN5LjPGPES6/FpkQR2NcCo55OPEA
lTqfVOrhwz208+bVEXN/SKXFNTseStweRRPCJ2497RRMjqmH6tQJj5HzGfMF
fwJ/IY+WE7hAP+gFObAO+J9r1LqkV85Lemx0rHTNAVfjJJ1BF3y0nGJdjSf2
A/sA/KE/8AAOo4vmDX99Rzxt/mpUh7nVAyioo/vG/j0sRIN7tPn140QKyd+s
QGyV/dSm5aQlg3+zSP56f89H152Wb1ikHqsvvO13bkYkHVi1pWRgnRiKqerY
9c1hweRbvV2J7ztE097kbwPDXeLobpfPNrT2OERu2RfMmb0qRtIZdMgHeSEn
+GId8O9cbES7pS0u6fHI5LJVvjweR9c3TijwZU4LNWvckVduOUY93YZvjp6Y
KOkMuuDD4ANcgBPwgT7QA/JjPawD/p8e+2BaXTqpx9n/+qf/veUpks6gCz5a
TrGuxg04GuRhgzxskIcN8rBBHpbyKNxY4cbADfga9osN+8WG/WK5X8pOWNkJ
w06UXbGyK4ZdQW6DfbK0T/DFOuCv/IExwi8QH6WfAhfgBHwgH+SFnMqvWfk1
w68Ff+2niL+GeMWGeMWGeMWGeMWGeEUyXiHuG+I8GeI8G+I8Aw8R59kQ58kQ
50nGeXw25Ecy5Ec25Ec25Ecy5EeS+VHlbz0ij1+/7j8339ZYHhU107lEoRi+
fK/vwbnlzlIr34E+Q0rE8s2FFaOyD4zmUw9bNnc+FkD4jO9PKDr+HvzAZ01c
ifk5T0RzmyrvDK3xRzjH7j20IrFLJC1tNSwlbUsUf9zU9WhY/kj2vbf/i3k/
P6rP571V1CVHDLvmuR/gkDOEH1QsuKK6QzQlh/uvWZK6katvXZDjVfeVnPz6
dzk2JKfSygqrxzateJIblhjXfdvSw+wdNvtIvysp1Nl1xKUbQ06S23/GPfRp
6OHOu8um0uH1CUvrDkugr9aPPd53znlycjzVdfmRCKIu784fsd9C1xqcCpq2
zZ+SLoZF1v82nlqXciqV540EOpFW57WfHPzIq2vasvLfWyQfBp9P9iYVGXEg
hnr6fzfW2cmf4/Iuv5e7XoyUhyGP0Iugl8CBgIOox/Q+CvwJ+PdT+C5WePsp
nLEf2B/si+srrqOP3vPlvIPGD+7idJpDIy5X8yqZQviM70FfWLGvw02XUKr8
xeqRluH+1GR92IWIsETa1KfQlB35Asn5+9mzLnj7U8fXqnwS+SCJuk6fmufX
ugk0cd3sNhUSLpBP/OdLy7wcQW7tDu+b9nU0tdo+YMdPieG0omKJXUXWRVI1
ta+z1T7vV/ur7UDhB9xgN8APuEEOyAV5IDf0gPzdvlnjW6tSJLUbG//yhbIR
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
bsVfyk8yrorzteaDv4e84AP5IBfkEfhrfMR7V/0OSryH0fdBom+pz/Wiv6fz
lOgf6r6EeEeh7+NEn1/fx4n3qFpO8X5D32eJd276/aq4f9TvLkR/SffxRD9H
9yFFv0jnTXHPSIZ7Rn1/4Tz+i5qVQ8M5/9Br9ZZNDqUbJZK83z37VN9G92PF
uzWtl7jX0+9YRB9J9znFux0W80n2ncT7HHl/SvL+VOlFSi+GXuLdCwv8Sfb3
xL2w1kv08bRe4p6ahF2xvD+CfJAXcop+mu57i76W7tuL+1P9fkz0zXTfXsQx
7b/I68jzyI+i/6/7b6Lfpc8Foj+mz9eId4h/iHvq/EXq/KXjpDiHav6oz1Cv
IX+J+MmG+KnjpIiHGgfkReRJ8EfdgDoC+Ih+gu4Hingo8wjLPCLyjinOa7o4
v+s6Af4M/4ZdiXsH7V+iztR8RF2k68P9dRNzVnO2sBopfofX625Xo2WfWd/3
iXdi+j1Dwz3tKn8x/BJVqBKWMrFFFF/3KG65Mump9w/6Hlacl3WdLN6rkOG9
ir6HFfWhrm+Pt/qt8MRcUaxGWtZq4w+H3SzU5P0aU95ziObgyb8XajTJQnvP
1i54zs9CwRP2zbV0ieItTt9udi/4CIcjBXJXT4u0+nvqjNL35wlih3tP3mc9
/rycKv0rz82XrjyhP/682W7r/t3oJpxN823F/2Laiun7DjyZ//gzv3A4ZJau
8GDggM/pv98s55M1uuuPhXreXhzL6ce1oItxLRUtGjip1HexGPnxuJMKO548
vHtushpD1bjBql4FyzmlbItK5Z3uL18f02SH2L9Uzug+Kj5k4EOSj8TThI8J
Z1txs7YvttqDiV5is1+LAS+l8uPR1yqeJrriQ5KPveSU+JvwtBY3THjaaj+2
zrfC5yl7s3VdW/HPqL/vqz/N443lsWJcYHNctebvGbU3EU8I8SSz+2LrfCtx
4Cm6iY+k5yk1/spBx1Q1+qpxuVV9M8rf3nRb44Od/eUpPhmNk/j79Py0fbK0
T5M9W6sfntUenjfdlGczysfedmtrXrYXDpmU85ntPKN0K/b5lJ2b6Fkt51+d
Dn8APbN+8d9+7nhWOuoY0FHPtP9H3jHHbzzBf+SYhr3c5/yK+Sznm+gvmr7P
i25rXjPty4um14tGN+FmisOmOGOi/y+e/zl0W+OJtX7Li6LX341uqz9mtTxZ
XaeZ+qKmeJK+T/ekX5f+77OuH2Uvujwv2Ps8Yi8cMnp++bvF+b9bnfy89teU
p6zJk8m+sdU+p6kPo/pinL5PttzqulmFW1bT7VU/qH645mPtHu3vRs/qc00G
790y3b/6373zi0033ctkdR1lpU+eYXvLqjrKxMd0r2dvfDKqr611iL3yuOle
+M+qE6R92rses3Kvp88dz6sOtBXnrN4XK3XaU/hktq57VjltpWcS5/+6c4G1
OsGUR+x1f22v+ba+ZzDlwYzeP/qtWlOveotYjPx4PGZtPqf/O/P8zN4jZPW9
pK37Lu0nq+OA6b7GZOeZPe9YecfyFP54H4RzUInjnz/6L1mNoWr0Jo/CVZJj
bj+Rx62vc4tF7ddk1K6s2qGt+Ntqt381eibjTJbFvYzSM3v+spc80p5N863V
7fI9pK11+DPiYPUcZGt8sFf/ZA+Pydvgwf/TK6Bd7opu8zPL54k8VvjYS35r
9ZKt+fpZ6bbGPWv9mYyec58xv7ww74v+bLqtuNmaNzNLl3Hved+3ZtRO/m79
WPVumNOPC/6svuhT/K3V8896j2Clb2OMwyb+WXWvoe5XOP19ywab87i1uiKr
4ifqFdCf8Z2q8b77WfOjuq/i9PdXy63+7sNWfNR5i3DOAt30OxcTH6mvrb/D
skZ/Ud4PWPPHrP49y7PSTX4aEjC4dL9rT+jfXuzlMKe/9d9VSfpfrS9nuo+W
86d9PvjtgksTudvNpVV677Oo0fO51bcm+p7K+VvX32HhIo0LDfeflciPP2+1
uzz2snN7nSNM+Q79JBnf7MU/o7+HssYno/Ko/SW1vyT3988+l5niSVbX1Vbe
v9mtXjLcZz2zn1rRy27x8Fl/j2Mr/Zey2yNH3H0i/4Euq99Y/Yqn8XxnK57P
+543o/Tndf9rolt5B243e8toXrB3fMhoHreV/qL9fsF0DhXv3zijv4v/q9Kz
+nc6xt+zPL7vYXX/w7j3eV7ym+7L7IWDNXpWv5980c9T1ujPem5duOD//sXq
seR//m3KdL540fC09Z1bRuO8vX53aS8/zez/t+TPlvPfTcjbsQ==
    "]],
  Axes->True,
  AxesLabel->{None, None, None},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGridsStyle->Automatic,
  ImageSize->{348.0335396040316, 200.3661802854235},
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], "RotationControl" -> "Globe"},
  PlotRange->{{-1, 1}, {-1, 1}, {-1.0254437923431396`, 1.0087281465530396`}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{-1.563163962923641, -2.9372283895013753`, -0.6157985165003239},
  ViewVertical->{0., 0., 1.}]], "Output",
 CellChangeTimes->{{3.680452273644133*^9, 3.6804522889700933`*^9}, 
   3.680453019451955*^9}]
}, Closed]],

Cell["Difference between learned curve and expected curve (error):", "Text",
 CellChangeTimes->{{3.680452311828353*^9, 3.6804523257004595`*^9}, {
  3.6804531073138447`*^9, 3.680453109097604*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{"Sin", "[", 
      RowBox[{"3", " ", "x", " ", "y"}], "]"}], ")"}], "-", 
    RowBox[{"result", "[", 
     RowBox[{"{", 
      RowBox[{"x", ",", "y"}], "}"}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"Mesh", "\[Rule]", "None"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Full", ",", "Full", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6803583789252787`*^9, 3.6803584162012367`*^9}, {
   3.6803584735966024`*^9, 3.6803584917210913`*^9}, {3.680358552786993*^9, 
   3.6803585569379997`*^9}, {3.6804507381376443`*^9, 3.6804507479426928`*^9}, 
   3.680450929230296*^9, {3.680451013709833*^9, 3.6804510138222623`*^9}, 
   3.680451076397651*^9, {3.680451527751148*^9, 3.6804515330462055`*^9}, {
   3.6804517309652963`*^9, 3.680451733757086*^9}, {3.680451851701318*^9, 
   3.6804518594453087`*^9}, {3.6804522299407773`*^9, 3.6804523528055754`*^9}, 
   3.6804531009231267`*^9, {3.680460013054598*^9, 3.6804600411586704`*^9}}],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1: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
7Q==
   "], {{
     {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[Polygon3DBox[CompressedData["
1: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
         "]]],
       Lighting->{{"Ambient", 
          RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
         "Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, 
    {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl0bsuw2Ecx+G3RetYjUNicIgLIBEr0UqaEiYjm0UYHBYhImzshMEkQQwG
x9XCFTifD4krcAWeN4ann+8/+TX5p20fnxmZToQQJlg04p71UUbWbtJl2uwW
7dRehhljKn6PdbY5YMfdhXbrteb0jFv7SPu4s/N6r/36oI888cwLr7zxzge/
7gqs8Ol5Xot82YO6yre9oAPcxHfVK+3Sc91ni7V4xySjDNFDJhlChza7P6XV
vtRGTqj1fKgNZOx6PabG/tE6qu0qNu1KrWDPLtcNTWuK3fg7a2m8sZcosec0
hVcJycT///IHM28s8w==
      "]]}},
   VertexNormals->CompressedData["
1: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
vNQ61Pz/D9VXxvI=
    "]],
  Axes->True,
  AxesLabel->{None, None, None},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGridsStyle->Automatic,
  ImageSize->{505.675871348679, 171.33333333333334`},
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], "RotationControl" -> "Globe"},
  PlotRange->{{-1, 1}, {-1, 1}, {-1, 1}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], Automatic},
  Ticks->{Automatic, Automatic, Automatic},
  ViewPoint->{0.7900762440301181, -3.1118489470430335`, 1.0687261854219112`},
  ViewVertical->{0., 0., 1.}]], "Output",
 CellChangeTimes->{{3.6804523350816603`*^9, 3.6804523544214296`*^9}, 
   3.6804531017750797`*^9, {3.6804600264327974`*^9, 3.6804600424136205`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Learning \[OpenCurlyDoubleQuote]Sin[3 x y]>0\[CloseCurlyDoubleQuote]", \
"Subsubsection",
 CellChangeTimes->{{3.6804507867252703`*^9, 3.6804508078216476`*^9}, {
  3.680450965765478*^9, 3.6804509705495915`*^9}, {3.6804510395973988`*^9, 
  3.6804510410773745`*^9}, {3.680451762444683*^9, 3.6804517909650903`*^9}, {
  3.680452041620799*^9, 3.680452051260621*^9}, {3.6804524641635017`*^9, 
  3.6804524798673635`*^9}, {3.6804532225854025`*^9, 3.680453227881425*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetChain", "[", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"DotPlusLayer", "[", 
       RowBox[{"10", ",", 
        RowBox[{"\"\<Input\>\"", "\[Rule]", "2"}]}], "]"}], ",", 
      "\[IndentingNewLine]", "Tanh", ",", "\[IndentingNewLine]", "10", ",", 
      "\[IndentingNewLine]", "Tanh", ",", "\[IndentingNewLine]", 
      RowBox[{"DotPlusLayer", "[", 
       RowBox[{"1", ",", 
        RowBox[{"\"\<Output\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], "]"}]}], 
     "\[IndentingNewLine]", "}"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6803580407480574`*^9, 3.680358081136017*^9}, 
   3.680358318545034*^9, {3.680358450833645*^9, 3.680358454922589*^9}, {
   3.680358520949281*^9, 3.6803585273934994`*^9}, {3.680450694661951*^9, 
   3.680450695821642*^9}, 3.680450816894287*^9, {3.680451119407272*^9, 
   3.6804512049501567`*^9}, 3.68045125579736*^9, {3.680451324085854*^9, 
   3.680451472030263*^9}, {3.680451504061485*^9, 3.6804515104773593`*^9}, {
   3.6804516629410973`*^9, 3.680451677661211*^9}, {3.6804518693813314`*^9, 
   3.680451873732929*^9}, 3.6804520552372437`*^9, 3.6804532350025897`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetInitialize", "[", "net", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.680358433289722*^9, 3.6803584364737926`*^9}, 
   3.6804508183659563`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"x", "\[Rule]", 
      RowBox[{"Boole", "[", 
       RowBox[{
        RowBox[{"Sin", "[", 
         RowBox[{
          RowBox[{"First", "[", "x", "]"}], " ", 
          RowBox[{"Last", "[", "x", "]"}]}], "]"}], ">", "0"}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"RandomReal", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"10000", ",", "2"}], "}"}]}], "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.680358323212538*^9, 3.6803584031626587`*^9}, {
   3.68035846091537*^9, 3.68035846465798*^9}, {3.680358535081916*^9, 
   3.6803585378656015`*^9}, 3.6804507086856833`*^9, {3.6804509096300173`*^9, 
   3.6804509097505503`*^9}, {3.680450994789851*^9, 3.680450996390175*^9}, {
   3.6804510501735764`*^9, 3.68045105076607*^9}, {3.680451687591172*^9, 
   3.680451688462194*^9}, {3.680451800068883*^9, 3.680451800605103*^9}, {
   3.6804520685672483`*^9, 3.6804520945170126`*^9}, {3.6804528804025493`*^9, 
   3.680452893386714*^9}, {3.6804532421383505`*^9, 3.6804532487150755`*^9}, {
   3.6804601120866985`*^9, 3.680460123134718*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomSample", "[", 
   RowBox[{"data", ",", "5"}], "]"}], "//", "Column"}]], "Input",
 CellChangeTimes->{{3.6804601446188116`*^9, 3.6804601494383297`*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "0.38984587004838733`"}], ",", "0.3944241672263722`"}], 
       "}"}], "\[Rule]", "0"}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0.4143245254549681`", ",", 
        RowBox[{"-", "0.19244663640270954`"}]}], "}"}], "\[Rule]", "0"}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0.5997390440461596`", ",", 
        RowBox[{"-", "0.6907650646643084`"}]}], "}"}], "\[Rule]", "0"}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "0.6366449134769829`"}], ",", 
        RowBox[{"-", "0.8642078031742959`"}]}], "}"}], "\[Rule]", "1"}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0.9574514087619601`", ",", 
        RowBox[{"-", "0.6125870363939696`"}]}], "}"}], "\[Rule]", "0"}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{3.6804601503203964`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"result", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", "data", ",", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "250"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6803583683570848`*^9, 3.6803583753528333`*^9}, 
   3.680358427497135*^9, 3.6804508205499535`*^9, 3.6804511683417273`*^9, {
   3.680451541565759*^9, 3.6804515462452507`*^9}, {3.680451576949438*^9, 
   3.680451577173006*^9}, {3.6804518818292227`*^9, 3.680451882277031*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Inputs", "Input"}, "Mouse"], 
            "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "2"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["3", 
              GrayLevel[0.5]], {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "3"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["4", 
              GrayLevel[0.5]], {"Layers", "4"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "4"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "4"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["5", 
              GrayLevel[0.5]], {"Layers", "5"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "5"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "5"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {10, 2}], "Biases" -> 
               NeuralNetworks`TensorT[1, {10}]], "Parameters" -> 
             Association["Size" -> 10, "$InputSize" -> 2], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {2}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {10}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "3" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {10, 10}], "Biases" -> 
               NeuralNetworks`TensorT[1, {10}]], "Parameters" -> 
             Association["Size" -> 10, "$InputSize" -> 10], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "4" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {10}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], "5" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 10}], "Biases" -> 
               NeuralNetworks`TensorT[1, {1}]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 10], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Layers", "3", "Inputs", "Input"] -> 
           NetPort["Layers", "2", "Outputs", "Output"], 
           NetPort["Layers", "4", "Inputs", "Input"] -> 
           NetPort["Layers", "3", "Outputs", "Output"], 
           NetPort["Layers", "5", "Inputs", "Input"] -> 
           NetPort["Layers", "4", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "5", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`TensorT[1, {2}]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{379., {80., 89.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.68045116906149*^9, 3.680451213600884*^9, 
  3.6804514859343963`*^9, 3.6804515211315565`*^9, 3.6804515673887005`*^9, 
  3.6804516191834087`*^9, 3.680451739665532*^9, 3.6804518478376617`*^9, 
  3.6804519750166707`*^9, 3.680452224380748*^9, 3.6804529904914856`*^9, 
  3.680453351218804*^9, 3.680460220905567*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{
   RowBox[{"result", "[", 
    RowBox[{"{", 
     RowBox[{"x", ",", "y"}], "}"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"Mesh", "\[Rule]", "None"}], ",", 
   RowBox[{"PlotPoints", "\[Rule]", "50"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6803583789252787`*^9, 3.6803584162012367`*^9}, {
   3.6803584735966024`*^9, 3.6803584917210913`*^9}, {3.680358552786993*^9, 
   3.6803585569379997`*^9}, {3.6804507381376443`*^9, 3.6804507479426928`*^9}, 
   3.680450929230296*^9, {3.680451013709833*^9, 3.6804510138222623`*^9}, 
   3.680451076397651*^9, {3.680451527751148*^9, 3.6804515330462055`*^9}, {
   3.6804517309652963`*^9, 3.680451733757086*^9}, {3.680451851701318*^9, 
   3.6804518594453087`*^9}, {3.6804522299407773`*^9, 
   3.6804522526524506`*^9}, {3.680452378628501*^9, 3.6804524026444826`*^9}}],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1:eJxcnXd8VFW3hofeIfQqDAgIChiqIMgMiBJBMPSOI0UizQABQh9CSEIPPVSH
ECCEFopSLBkRFQU1CGKkDkVASmZCBxFuyjfv++77z/XH8627zlp7zjw5e599
zlQf9GnXobktFsv8yhZLnsz/NrCVu/nihTfF/99MZNm+32sr1j7Gs2F3unLr
q195bbc7Pz399uA7yt3D3V7bsZ4jf/m7zG0jz6AjXlvSwAvfRf9wU7kz91Gv
bc7HwYfqhv9jxL91zGsLGX04+VjdG0b+vL96be0nNNky6uw15fb3Ur222tM3
ryux4G8j/vkJry1fVIVlu1tfNXiVk17b1QVz53bzXTb62pjJv1v+zPlgwyWj
niwev270xJXdPMpd7TN57o7fnh1b+IIRf+N3r83dd9PRL0adNfJnHXf68Dmf
P01NM8Yh7ZTX1mryqPjWTU4bdc7+y2t7OqfLooiVJ438zy57bQdWNZ36w9NU
I3/Je17bra6Nfy/z1XHlnod5fbaPx/67bW3Ej8a4DQ3w2S4t/m52zfcOG/zb
oj7bgUHlU3pXO2TUuXq219b/7Q/+Tu29y6izY/gdW2zExTjP38sM/l2jDFvc
zGxu0/oPHdhs87TNzmPw+xvWpUzOOa7Bl6WvtR3OqdPgzVsn2trn9GXwh8O2
2I7njIPB4y9utCXmjJvBk/q5bDdzxtngt++tttXL+VxMPm6FbXTO52jwkRlL
bMk5n7vBn9WOtd3tkH2eGNz69Tzb6pzzyuB1Lkfbvsw5Dw0eFBVpO5dz3ho8
eNZM23+zs89zg4dOn2armvO9MLjng3CbLed7ZPCAQeNsjpzvncHdQaNsM3O+
pwZ3lh1ii8/5Xhvc8kZP23c5HjD5lEa2qzneMHnf91Ly5XjGPO6+Af7zyeAu
2zCcZ34/ZfFzX9NXyqsdpq+EO+v8QF8Jt9/5ib4S7v7wF/pK48em0lcaX+4k
fSXcY/+DvtJ6rpymr7T+J3/SV8pnpdFXWs+yNPpKeb80+kqP2zCNvtL8e9Lo
K40/dYa+Em7N46Gv9Ljlb9JXmufaU/pKeadC9JXmaV2WvlLeoxR9pTx1KX2l
+f+dS19pv+Gt6SvlQRFb4Cvljwd/Bl8pDx69Gr5SfjPXFvhKeWy7zfCV8u5/
xsNXygumrYevlKfZVsFXyl2Z/fh9pTwucjF8pdyTvAC+Un6j1xz4ysizezZ8
ZYxPdAR8pdw6cgZ8ZRz37cnwlcHDxsNXxjhfC4WvlLtLfAJfKXeudcBXyi0/
BcNXBrcUgK8MXqQzfGXwKQPhK2P8T38MX/k9lIkdk44wTrh94lH6SrntOH2l
eX74jb4S7rKcpK+Euz1/0FfCrX3S6CvNM/AMfaV5/j5LXwl3/nOOvlI++jx9
Jdwy9zx9pXzkefpK6xl7nr7S+JYX6Cvlbg99peM2+hp9JdxTLYO+0vHvkcsH
XylfV4y+0n5LVaKvNP56efpK4/PH01fKK62nr3Qcfn+PvtJ+r72XCF8p3zPP
BV8p/+rFSvhK+ePfNsFXygPqb4KvlPc9twG+Uj6k3Dr4Srlj+0r4SvmNyUvh
K+XtWsfCV8rTPp4HXxm8YzR8pdzumQVfKS/odcJXRnziVPhKufX2RPjK4DHj
4Cuj36Oj4SuDX/4YvlLunD8QvlJuWfcBfGXwduXhKyNPFV5fGfFv94WvjH7/
HAxf+X2ThcOP0VfCLbV/4/+/cGf87/SVxl/6g75S/lcafSXcOvUsfaXxKefp
K+UrLtJXmuexh77S+MuX6Cutv+9l+soYh8v0lfLQy/SV8g2X6Svhnh1X6Cvh
jiXX6CvNk3KbvtK+Sjymr4S7X8tHX2n+KyXpK83jqUpfafz4l+grHbfmyfSV
Hjd2N32l9Z/sTl9pnjoBW+Er5WMHbICvlKcmLIevlH+8NQG+Uj6hRgJ8pfyI
1wVfKQ8PWwNfKU9suQK+Uv646RL4SrmnzUL4yuBhc+Ar5Zb1s+Er5dZxEfCV
8oCZM+Ar5b4jk+ErI8/MCfCV8uBlY+Er5Y5fR8FXBj9NXxm8Lq+vlNvHd4Ov
jH5zt4KvDD6sCXxlcE8wfGXk79MfvvJ7JYv/+Dt9JdxZ6TR9Jdxq/4t5NU+D
c/SV8r8u0FfKm12ir5S3uEJfCbf/dZW+Eu4qdo2+Eu754xp9pfEtrtNXmr/7
dfpKeb/r9JVw957r9JXW/+IGfaXj1vY2faXxd+7SV1rnuef0lX4u9wrSV1pn
1XL0lda56WX6yqizBn2l/KNv6CvN/9739JXmn/whfaV59vxBXyk/VDsevlIe
OXApfKU8deFG+Er5wFob4Svl9UrRV8rD7q2Cr5QfTV8GXyn3lV8MXymv0G8+
fKXcej4avlIeGhwJXylPHDkTvlLu/G8afKXc/eMk+Mo4bkH6SrlrPX1lxP/D
6yuDPwyBr4x6PhgMXym3pPaDr4z4UV3gKyN+x1s2v68MnrsGfGXkadwevvL7
I+s87HqGvhJuaXOevhLuzu+hrzR+1WUeT+PvXKWvNP7fa/SV1vPFDfpKuLPc
TfpK85e9RV9pnn236Cvhjue36CuNL36bvhLust6mrzTP6tv0lcbXSqevtP7v
M+grHQffY/pK83+b2wdfCbcmFaWvhHs6VKKvNH5QHfpKxy2iDn2ldU47Tl8p
r/8XfaX9Hv+EvtK+OqxJgq+UR16nr5S3q78YvlLe0xkPXyn/tWk8fGWMZ9R6
+Ep5naVx8JXytd8vha+Ux1lj4Svlnh/nwlfKrZ9FwVfKAwbPgq+Uhx53wlfK
3V3pK+WOXfSVcVwnfaU8eRPng0Z84THwlXHct7jertyyLwS+MuKHD4GvlDt7
O+Ar5XZvb/jKyD+ni3+d3cyT0Q7r735PZPEXl+gr5c6r9JXyc9foK+HOQv/Q
VxpvucU6hLs+v01faR5rOn0l3N3CS18pf+alr5SP8NFXwq3LffSVcPtKH32l
9ST76Cvhng4Z9JXmL32PvtL8JR/RV1rn18/pKx23Z/noK+GO9wPoK80zrCp9
pfWXrk9faZ4X9ekrPe7cM/SV5q99h77S/L+Mo680z6GPtsFXymu7NsJXymOr
LYSvlAdN2wBfKS/abQN8pfxxvnXwlRHfdSV8pXzIN0vgK+VxaxfCV8rdkXPg
K+WB+2fDV8qPnoiAr5Q7FtJXyu3h9JVyz1jOB5UnX+T6lZH/M663G9/Hdbw/
aPT18xj4yvBAtVD4yoivMwq+Mup8bzh8ZfS1fhh8ZfDqQ+Er5a7UQfCV3wdZ
fPs/9JVw+/5b9JXGx9+hrzR+sJe+Eu6556OvNE+Hu6xPuHvAPfpKed379JVw
V9J9+krr+fs+faXHvXmfvtI6z9ynr4Q7n9ynr4Q79j6gr7Seg4/oK62/wjP6
SuupnXkd5feV1l+pEH2lef4oTV9pnWNq0FfK9zekr5SPa0xfaX7nDfpK66yW
Kx2+Uh45jb5S/nPd7fCV8pAuCfCV8rgCc+Er5a0iXfCV8mVTXPCV8tvr1sBX
ysPqrYCvlLv+WAxfKXe8uQC+Uu6ZEwNfKQ96ib5SHryMvlKetpW+Uu7uNx2+
Mup8MQW+Uu4rxfuDxnEncj+DckvFifCVwW+Oh6+U2y+FwVdG/JNx8JXy2Hrj
4CvlqZPGwlcGvzAGvjL67Que4v/eZw1PYAZ9JdyScpe+Eu5peJ++0jzOB/SV
cPumh/SVcMeKR/SVHrfzY9ateY4+pq+EO/M8oa80f/4n9JXWf+UxfaX5Dz+m
r7Svq4/pK+GulCf0lcbnf0ZfaT1DLT74Svv9Pi99pXWWKUpfKbeXp680/+Da
9JXyDs3oKx23s83pK62/z0P6Svt9Woa+Em59HEVfaV+179NXyi8/o6+U2wtH
wVfK99X6DL5SHt7nM/hKufO91fCV8rQqy+Er5e/no6+UhxSfD18pj/k5Gr5S
7jgSCV8pD1hHXyl3BXD9Snmwh+vtxvi8MR2+Mvp9OhW+MuKLTYWvlCf3mwJf
GfWnTYavjPyTJ8NXyn2tJsNXygMrT4avjONmetXvK6PfGpPhK+O4QeAp/u93
Fu//mL4Sbg15Ql8Jtw98Sl8Jdzb7l74S7rj5L32lecY9o6+Eu489o6+U+56x
H63/6jP6Suvf+Yy+0joHP6OvNP/rz+grzd/nGX2leXr9R18Z9bygrzR+Tm76
SrircQH6SuOvFKevlEdVoq/0uG+8Sl/p+P/wJn2l49+wNX2lPG9mnX5f6fis
r0Nf6XEbx9JXykt9uwO+Un4hYRN8pdxTKQK+Uh7YcR18pdz9/Tr4Svkpyyr4
SnmZysvgK+V534mFr5QHFJgHXymPa0JfGXwVfaU8MY2+MurfSV8pr5DO/QzK
gyY64Stj3Jo44Stj3Co64SvldSo54SvlBxo64Suj/n5O+MrIs9wJXykPPueE
r5RbAmfCV8rti2bCV8qTn4Cn+L/HWed/xnP6Svkk2Q8h3OGV+47C7a9kXj/4
fSXcEpTJ/b7S+F6Z3O8rPW63TO73lfKWmdzvK81fMpP7+9T4vS/oK+Gut1/Q
V8LdL57TV8I9jV/QV5q/fuZx/b7S8VmVywdf6XGH56WvdByGFKKvtK8pJekr
rXPNS/SV8kv16Ss9bnUbfaXxI9+mr7SerwrSVxr/d0v6SuNbrqKvtP7WsTvh
K+Xx72+Gr5Q7u0yFr5T3/nQNfKU8puFa+Er5swMr4SvlqZWXwlfK7aUWwVfK
Q4rOha+M83lXFHxl8Fn0lZG/HtfblbtDuJ9BeUAR7hdVbnnA/e3KE0tGwFdG
Pd0i4CvjuMkR8JVyz8uz4CtjnBNnwVfKC7aKhK+M/Oci4SvloXNmw1fG+LSJ
gq+MfvNGw1f+72vWadIj8++p31fC3T0zud9Xwi1dM7nfV8rfyU1fCffUy01f
af4CuekrzXMqF30l3LEkF30l3PpOLvpKuOtepk/8/Wv+bZnc/28dh1mZ3O8r
jd+cyf2+Em7vkou+0jzXc9NX2u+jfPSV8neL0Fea5+fS9JX2O8ZKX2mdPRrS
V5q/09v0lfLpQfSV5nm3BH2l/W7qTF/pOJeJp680z0LHLvjKGM/H9JXy0BZh
8JXysNmr4CsjftFq+Eq5b/AK+Ep5eMAS+Er5jcgF8JVy64sY+MrIX5G+Uu76
kL4y6hxPXym3V+J+USN/9VnwlZFn9Cz4SnnyrVnwlVH//Ej4ysj/7mz4SnlQ
uSj4ysjzMAq+Um65Gg1fGfEXYuAr5XFX5sBXxudyby58pbx5sfnwlf97meWT
1XnpK+HuvnnpK+HO8nnpK+GW3/LQVxo/Iw99JdzxSh76SvkPuekrzT8gN32l
dXrFV3rcqFz0lXB7YC76Sri1QC76SsenaS76Sut8Lr7SOo/koa80T4UC9JXy
74rSV1r/V2XpK82fUYO+Uj61CX2l/TZrT19pv9060VeaZ35Z+kp5goO+0vxf
JdFXGn+yfDJ8pfzxzi3wlXLnx8PgK+X9p62Er5QH/hoHXyl3e5fBV8p7X4uF
r5Q3/3IefKW84P5o+Ep5XMfZ8JXy4Lz0lXJXNH1l5F9BXyl35OHzg8rT9kTC
V8rDY2fDV0a/i6LgK+Wpm6PhKyP+RAx8pdxaZC58pfxAl3nwlfKQjfPhK2N8
XiyAr5QnD1kEXykP+yQWvvJ//7JOk4r56Svh9tX56Cvh7kr56Cvhlizv+X2l
vFxe+krzLxRfCXflzkNfKR8vvtL6b4mvlI8WXwm3lhBfaT3/yPWV5qkrvtK+
yuSmr3R8SuSlrzR/svhK+/qmGH0l3NO4PH2lx31Rk77S+BZv0Fdazzcd6CvN
c7wLfaV1flqZvlIeN4a+Ul5jL32l+ZOn0lfKJ0xMhK+UW5a9DV8pt7ZdDl8Z
9f+5Ar5SHv7OUvhKeUyRRfCV8tDIOfCVUX+uKPhK+dESkfCVkaflLPhK+Y3X
6Cvlznj6SnlIGH2l3Bc5G75SHvBtFHyl/HHlGPjKyL9gDnylvGDAPPhKeXPX
fPhKeWLLhfCVUadnEXylPOzHWPjK4PGL4Svl7WYuga/837Os83mN+Eq4xyO+
Em6vK74S7honvhJuTZHrKz1uEfGV5u8r11cav0Pmg5q/qPhK450yH9Q6X5L5
oB7XIr7Scegl80HhzhFyfaXH3SjXV8ItK8VXwh0BxekrzVO4An2lPKw2faV5
QlrQV9pXSif6Sus53IO+Uv6jlb7SPC/PpK+0nlpf0leaZ91Z+kr51P5b4Svl
7k0fpvh9pTzx4BL4yoiPXQZfKY8LWgxfKXfGz4OvlB/dGAVfGXlcs+Ar5c1r
R8BXBj88E75Sbn+J6+0Gf8L1K+V16tFXygNW01cGD4yGr5QHX6avjL4S58JX
xjhPmw9fKQ8ZuBC+Ut6qZix8pTzopcXwlfIDFZfAV8pHVlwKXynPW4Xv+/B/
n7K+j9fy0VfC7Q9kPqjxhWQ+KNxRU+aDwp3tZP1KuGt4LvpKuDtO1tu1ngS5
3ync+tZz3ldQXuY/rt8p7yr3B/W4TeX+oPLq/9H7Og5bZHw1/gNZv9LxWZef
vhJumSvXV9pvSfGVjmeNV+grzX/6TfpK68wfTF9pnlx96CutZ0At+krjjy2k
r7TfeYfpK81z4fXd8JXysBFJ8JVy61/j4CvlaVGL4CvlBf9cDF8pd25bAF8p
vxEUDV8pj/s1Ar5S7nnXCV8pT54xHb5SHhA7Hb5SHl7QCV8pt7fj/UHlvX/n
erty3wrOB41xc/L6yuAR9JXy5svpK+WJ++gr5YHn6SvlwVH0lXLLBvpKedFv
6Cvl7c7TV8r7P6ev/N+brI/XnYe+Eu5eK+vtwu2zctFXwh3j5P6gcMvZ59zP
oPF/y34GjS/yL/czCPf0eEJfaf2nH9FXyhMf0lfa18MH9JX2le8hfaV53nxE
Xymv/5S+Un5Ixl37nS/3B/W492S9XcehhMwHNf+vcn2leTq0pK80vk8X+kq4
tVM/+krHx1eHvtJ6/ltFX2lfT47SVxrfYxx9pXz0vm3wlfIDD5zwlXLHuBj4
Snnv/AvgK+UhMdHwlfKgpJnwlfLAflPgK+XuZhPhK6Oe3BPgK+WucxPgK+W+
ipPgK+O4babCV8qPWrifQbmnVAR8ZeR5JxK+Uh4zn+tXyp2XYuAr5ck2zgeV
WxMWwFfGOOenr4zPpRV9pTx0HH1l5NlGXym3XKWv/N+PrPKfy3tnlA/4j/sZ
lP8p+6+Uj3zM/VfKq8p+UeUZ9+gr4ZZbGfSVcHd5H32leeam01ca/9Ed+kq4
69ht+krzBNyhr7SeNen0lebPf5e+0jxNH9NXetyGuegr4faKsp9BuOO3MvSV
8rdr0Vd63HlyfaV1ThVfafyw/vSV9tv2NfpK66weT18pv/kLfaV5TnxGXykv
034HfKXc3mUOfKU8+doM+Ep5b08kfKU8YN8M+Eq561YYfKXc8sUI+Eq5+6Wh
8JXB3x4CXxn5hw6Dr5R7GoyCr4w8vcbCV8oDN02Ar4zx6cj97Ub+0tx/ZfAl
3M+g3FGZ9weVO7dGw1fKg9/kervy5sfnw1fKgwZy/Uq57xHXr5TXtGOdyuBx
0fBYiv97kO3hB/SV8iWyv124+2svfSXcXuwOfaV5Im7SV5qn+g36SuMf/E1f
CfcUlPczaJ6xl+krzdND3iejdV7y0FeaZ9Al+kp50BX6SnkTeT+DHreYPO+s
xy31hH8/hLseyP524c4Osv9K+QS5PyjcsaA5faXHdch8UONbia+0rxb16Cut
8/Zm+ko/l+RU+krHoezn9JXycrV2wVfKrdMXw1fKLTVD4CvlgWMmwFfKnX2G
w1cG//Y9+Mrg/YJS/L5Sbh/aM8XvKyN+UI8Uv6+MOvu9l+L3lcHtJeEr5e6C
XeErI37qIPjKGJ95I+Er5cnh4+Ar5cGH+TyOkafcdPhKefMvZsJXyoMckfCV
8rgC3M+gPHHbHPhK+YGO8+Er5aHXF8JXyt9P4f1B//meXedN+kq48+o1+kq4
6+AV+krzHPTQV8pvnKevNP/78v4r4W6vvK9P+eXT9JXW0+oP+kqPW+MUfaV5
jsr7kIXbnafoK43/6jR9pbzmWfpKuCPhMn2l+Wek01daZ6CFvtL8NYrRV5on
XzX6SsfzRlP6SuPjOtNXWucAmQ/qcT8VXykfspW+Uj5efKV9FT5OXylvNS8Z
vlK+NnQFfKXcvs+R4veVcmfDtvCVcsvlPil+Xyl3x3+a4veV8tCJ4+Er5cGf
ToSvlLs2T4CvlHssYfCVkaduaIrfV0Y9rw5L8fvK6Deob4rfV0ZfFZqm+H1l
jEPTYPhKuTV9EHxl1JnC918ZdbYJg68MvnISfGUc9+J0+MoYz6IR8JXymA2R
8JUR3wD7Qg3u2DsHvvKf11lthf9NXwl3rrhEXwl3XD1PXwl3DT1DXwm3VPuT
vhLuqXCKvtL4gSfoK82f6zf6Suus+gt9pfzsMfpKuHvcMfpK+ZvH6SvNs/VX
+krrH3GSvtI6w87SV8qL3KCvdPwvPOV1sB73QWH6Ssc/Uva3a5464ivh9kTx
ldbfQa6vtE5nA/pK80zcSV/puHmO0Vf6Ofb7YA98ZfCyu+Er5WvbroKvlMeW
C4OvlFt6DE7x+0p5cuhY+MrgW6bAV8qtMU74SnnahzPhK+UhfzrhK+Wen6bD
V8oD3ZPhK+W+QhPgK+Wu+6HwlXLH4GHwlXL79D4pfl8Z41OoYYrfV8rdh4Ph
K+XOrwfBV0Y9t0fCV8qDJ/B5Z+UBA8PhK2Oc60+Dr5QH3XXCV0adbWbBV/7z
N6vM9/+lr4TbWz6kr5R/lEFfCbd8d5u+0vzDbtBXmqf3VfpKuDvBQ19p/o/O
01eaf/sZ+krj96bRV5p/35/0leYpIu9v1zxvnKGvlN++QF9p/urX6SuNf+U+
fSXc+kceXl9p/CmZDwr3PJT9V8rbvkVfaV/hvegrrfP2UPpK+fwW9JXWeeEw
faXHbfU1faX1t5q7D75SfjWc80Hla0ssha+U2xf0wHxQubPBKFxfKXfHdcF8
0OBRveArI3/GMPhKubXqSPhKuWPycPjK4EWHwlfKLUl94SuD920DXxl91XgH
80GjTttAzAeNvjJCcH2lPLjTGFxfGTzPBPjK4Cv4vLPRV94Z8JVx3M0z4Stj
3A7Ogq+UJx7k8zjKYxN5fWX0G8XrK/95moWv1OT9QeHWr6y8Pyjc/XkV3h/U
PKcq8P6gcGeVstzPINyyoiT3Mwh3dSjO/QzCHUFFuP9K82wsyP1Xetzx+bn/
SvP8nZf7r7TfV/Jy/5XmmZmX+6+U98zP/VfK6xTmfgYdn40BXG8X7llfSdav
JE/JurJ+JeNzopWsX0n9R3vI+pV8XotDZf1K8o+bIetXwm92k/UrGeeB12X9
SuJbh8v6lcTn7vsl16+Ejx7N9/Upf+yOxn5R5XVW8H0yypu34vuvlCcn8H19
yosW4PuQld//Ng7r7cpTD6zEertye+xKrLcrP/dgJdbblQ/ZEcf1K+Guhau4
fiX89ozVXL8SfnXMGq5fCZ/fby3Xr4TXbL6O61fCp+Zbz/Ur4acOr+f6lY5z
6GdcvxJeqYCL61fCkzq7uH4lvNkiF9evhBf+ycX1K+GDnoGn+M/HLB5Tmb4S
bvWUpK+Euz8tSF9pnsjnvL4Sbj96m9dXmuekrF9pnpPHeH2l8Xm/5vWV8oO7
eH0l3NkngddXmn/4Gl5fafyy5by+0vp3LuX1leZJWcHrK6NOF6+vND4jmddX
etyyxzgfFO7yeLn+qPU8KEFfKQ+vR18J95QPoq+0npKyv12441IAfaV5Wv3K
9/Vpv+MKeuEr7evVE274So8b+3w8fKU8qGwSfKU8sP8e+Ep5fu9u+Er5jWbJ
8JXy3uE74Cvlj2O3wVfKP16YBF8pv18rCb5SPqF8EnylvG3TJPhK+eaPkuAr
5fvmJsFXRv2bk+Ar5a5dSfCV8m8SkuArI352EnylvFK3JPhK+eriSfCV8qiD
W+Er5V17bIWvlPe8kghfKf9iSCJ8pTz0zBb4yn/eZZ2fH27IgK+EWwpPyYCv
hLvX98iAr4TbezbMgK80T3jxDPhK+Yd3eH0l3DPtV15fCXcO3sPrK81zeBWv
r7SesNm8vhJujZjA6yvNU3M0r6/0uO5RvL7SOj0TeH0l3FVhHq+vNP/Jbby+
0vj//uL1lY7z6LIZ8JUe9+t+GfCV9rVxUwZ8pXkuXcyAr3R8Ak9nwFca3+4+
faXj8Osbt+ArzTPoo4vwlfYbciAWvlKeuwTX25X37OTCfFD5/ZbrsX6lPCAs
AetXys+1SsL6lfL+i3ZiPqj8fVcy5oPK2/bajfmg8vEJuzEfVH70892YDyq/
sW035oPKS6zdjfmg8ltLdmP9SvmAlbuxfqU8evturF8pt5/cjfUr5VWL7Enx
+0p5etc9KX5fKe+3dU+K31fK7xTdm+L3lfL2U/em+H2lvNbDvfi9CeWTJ+3D
+9uVf5Dvc7y/3X9+ZfE+vXbDV8qPFE2Gr5Q3X7oDvlL+60vb4CvlO79MhK+U
p366Gb5SHtg6Ab5Svvm1ePhK+cLWLvhK+bL/1sJXyivcWQVfKS86dCV8pTxx
9nL4SnnyBD5/otz6Cfd5Ky8Ttxy+Uh4WFAdfKU/4YS18pfzArg3wlfL0VzbD
V8qjTm6Dr5TXDdoNXymPuL8PvlJ+5vZenE9GnbsW49/CnTGf3oCvhLv/jvfZ
/L4Sbh/WOgPXVxp/pH8Grq+EO86MycD1lcYHzs7A9ZXWOXtFBq6v9LglMz3v
95XmKZScgesr5WlfZOD6SvO/cTAD11c6DnX3Z+D6SvPcyczv95XWc2lzBq6v
NH7MqgxcXwm3Fp+TgesrHR/rhAxcX2k9BT7KwPWV1l++Qwaur4R7lmdeh/h9
pfHfls/A9ZXW8/MzH66vhLvOeHy4vtL8pY/4cH2l9S/ZDJ7iP4+yjruk8ib8
/qXyfd9twu/MKT80YjN+z0l5aOkt+N0U5QsPbcHvExj5HYl4D7jykfm24n27
yi2JW/FeSyN/+yS8P07548tJeE+T8rXh2/A+FGMc8m/HeweUN5+7Hc/3Kn/f
sgPP0SlfP2QHnldRfnn3DuwLVz7o0g7sv1Q+/OYO7HNS3vXbHdhPoDy1+w7c
tzPqid6O9XHlBypvwzqU8vhFiZjvKY/dtx3XVcpP7TkGXwn3xK77B/8W7s5T
zQtfaZ5JS9PhK81zyJYOXxnj3yEdvhLu3DIuHb4Sbo3+LB2+0vyFj6TDV5q/
3oV0+ErzT76TDl9p/vi76fCV8uPp6fCVjkOnK+nwlR43/EQ6fKXxsw6lw1fC
Xc7Mvvy+Ut5tZjp8pf1+7UiHr4Q7erZOh6/0uKsqpcNXmv/agzvwlXB7TOod
+ErzH0y6A1/p+CRE4negjTzDB/L3of3nS9b4HH0RCV8pj6kaBV8pD307Gr5S
njYqBr4y+Lo58JVyy8m58JXyA0Xnw1fGcTssgK+U2+cthK+U9/51EXxl5JkT
C18pT31tMXylvOivi+Er5WVCl8BXyp+VXApfKa+wbyl8ZYxDT+4XN/Lf475M
5dbJy+Er5ff3LoevlLfKvRy+Mj739YvhK+WxuSfBV8qDj8Xg+kr5b4tT4Cvh
1mPjeb4Kd4/6gtdXGv+gmg++Eu6oFeeFrzS+1Kde+Ep5+/Fe+Eq480W0F77S
/PnWeOEr4Z7eSV74SrjLs88LX2lfKw554Svh9r+/9MJXWs/Ag174Ssdz/V4v
fKX5G2/zwlcav9Hlha+U91rmha+0/u1RXvhKx+H2RC98pfHBIV74SvMX7O2F
rzS+SXsvfKXjkNHUC1/p59W1Jn6H3uDDSvH36f3nRfb3NDAM80Hlrh/HYj6o
PPSDMZgPKrfHfor5oMGHjsR8ULmz6ieYDyp3fzkU80EjvvUgzAcN3nkA5oPG
cW/2wHxQuWX1+5gPGnx3C8wHDZ5YBb4yjpvRDr4y+Ilu8JXBKw6Erwz+0xD4
yhj/l0fAV8oDfgmFr5QHlxoHXyn3NRwDXxl9zW0JXyk/UG8+5oPKgzZuhq+E
O9fYP4evhLurf8m/o8Lt7sz5hf+81PiCS+grjd/Vwgdfafz56j74SuuZV8MH
X2n9r73qg680fnkjH3yl+X/OPK7fVxrf3OaDr5T/1tYHX2meve188JX2VfEd
H3yl8S0y4/2+Ut4hM7/fV9rXtMx6/L5S/qSlD77S4156wwdfaf7gxj74Svsa
0MAHXwn3VKjrg6/0uLEvcz4o3PHLS5wPanxaec4HhVu/KMn5oP/zz/5eN4ng
7+MIvxE7k7+PI9x31cnfxxGeHOjk7+No/n+m8/dxhKc6pvH3cTT+pyn8fRzh
ATUm8/dx9Lgjwvn7OMJjN03g7+No/C9h/H0c5Z6x/H0c4YF/hvL3cYQ7O43i
7+MIt0wP4e/jaHypwfx9HO33YB/+Po7madCev4+jvP+r8JXBO3WCr4zjLm4D
Xxnxa0bw93GEJz5cwt/HEe62bOPv45A7P2qxF75S3uUJfSXcvr4DfSXcE7GV
vlL+djB9pfXsfIO+Eu4+/QZ9pfU0sNFXyue3p680z53O9JXW/3V3+krzXOtN
X2md0f3oK+XH+9NXxveuP32l9RTuT19p/Id96SvhjkK96Sutv04P+kr5qS70
leav3pm+Eu56qQN9pfF/vkNfKe/Zhr7S425oRV/p5/71G/SV/3PO/l5/NhO+
Uh5wxwlfKY9pSF8pd/81Hb5SHmqbBl8pty6bAl8Z9aRNgq+Ue4qGw1fKAxtO
gK+M+HZh8JXy4HfHwlfKLQ1D4Svlrmcj4Csjvt0w+MoYh3KD4Cvl9uje8JWR
58N34SuDFw/E9ZWRv0p3+Mrod7ADvjLyFOsPXxn88kfwlfLbvsXwlXE+nE6C
r5TPfHkffCXc5btCXwm3n2hDXwl39nTRV8I9Ee/SV3rcWfXpKz3ulPr0lXD3
iSb0lR63+1v0lXDrs3b0leZv0JG+0r5OfkBfaZ15utFXWs/17vSVxif3oK+E
O2J60Fda/6ru9JXWma8bfaXx/wTTV3rcAZ3pK+VjO9JX2m/zIPpKj3uoHX2l
/eYWX2k95d6ir5T/25y+8n+eWfWkXpgKXykPbDsFvlLuWzIJvlLuSZ0IXyl3
PhsPXykPKB8GXyl3W8fCV0Z8pVD4Srk1/0j4Srlj/zD4Srnr7cHwlVHnOwPg
K6Oe+d3gKyO+f1v4SrnlrhXzQYOHdcJ8ULm95ADMB438mz+Gr4x6Wn8KXxnj
U5LzQeWxtcbCV0Y9gW9jPqg8tNZC+Er50Y5b4SvhzrYezgeFW2scoK+Euze9
Tl9pnhcL6Cs97p7G9JVw+8hK9JVwV49K9JXWc6Q6fSXcMfVV+krrCW1EX+lx
c7WgrzS+dGv6Suv/ug19pXlqtqOvNH7CO/SVxp9/h74yz1v6SsfB2Y6+Uv60
LX2ln0veNvSV5t/dmr7Sfou3oq+0zjot6CvhnvzN6CuN392IvtLj1nudvvJ/
btk+XzsevlLu/GYcfKXcfZzrVwZfxPUrg380Ar5SbgkYBl8Z8WsHwVdGPQH9
4Ssjz9au8JXB/2sDXxk8pjjW2w0+812styu35+6J9SuDf+7A+pVy16WP4Svl
nv2j4CvlofvHwldGnmIT4StjHDZOga+Upw6cAV8ZfR2YDl8pdwwdDV8Z50N8
NHylPGDmFvhKuPPzPfvhK+HWynPpK40fUoW+Em7fMpm+0vgX1egrjV+Sn74S
7o7MT18Jd1UpTl9pfOny9JUet0c1+krHoU1t+kr5/tfoK63z2Ov0lR43vhF9
JdwR0oS+0vzvNqWvdJw/akpfafzZJvSV1vNbY/pKj9utEX2leSYH0lc6Pl0a
0Fca//dr9JUe96269JXW76hNX+nn1e1l+sr/+WR/j86Ngq+Uu5d/Al8pd9Ye
Cl8ZPNYBXxl5knrBV8ot5zvCVwZ3vg5fGbxFC9wfNPIfC8b9QSN+Xj/cHzT6
DRoMXyl3PQ6Br5Q7royGr4x+F4+Fr4z49PHwlfLUDZPgK6POo9PgK+XBzWbC
V8pDt86Cr5SH75oNXymPc86Gr4x6dkyBr4zjDpwJXykfmLYJvlLeot9B+Eq4
o4+DvhLucRemr4Q7H4XQV5q/XHH6Sri91T+cP2ieD//h32mN/+8xvw+a/8t8
9JXW+X5x+krzLyxLXxmfe2X6SvnJavSVcGvRl+krjW9ai74S7ppYm77Seh7X
pq80T1pt+krHoWFt+kp55Vr0lY7D5pfpK63/SnX6SvOcrUZfaT0rZb1d63+p
Mn2l8WEV6Cv/55A9zvGD4CvlljX94Cvlzg1d4CsjPvQt+MrgK+piP4ORp/D7
2M+g3F2pD/YzGHneGARfGfHPh8FXRv7ro+Ar5fanY+Ar5cnlxsNXRp4u4fCV
MW77p8BXykP7z4CvlIfvmAlfGfXcmAVfGfFDouAr5Yl55sBXyn1N58FXytPq
z4OvjL5WzoKvlHtGTYSvjPEZlwBfKT90hPtNhdu/akVfCXdH/cv9DMq/6ENf
KR/3H9dhhbvif6av9Lh1j9FXWmens/SVcOfAdH5P9LgBFvpKeUIB+kqP+3Mx
+kqPu7QUfaXxNcrRV5p/QwX6Sut8sxJ9pXlKVqavNP7dyvSVxj+oRF8Jtzap
RF9pfJmK9JWOf0J5+kqP6y1LXyl/Xpq+Ms5P3gc08jtL0Ff+8c4+bw90g68M
fq8NfKXckmDF/iuDn+2A/VdGnqJ94Cvl9omD4Cvl1pgQ+Eq5a/9o+Ep5cMRY
+Eq578B4+MqoJ9ck+Eq52zEVvjLyX5wBXymP+34mfKU85KtZ8JXyx5dmw1cG
fycGvlKemj4XvlIe8/UC+MoY/4BY+Ep5O2ssfKU8cH8MfGWMc8cR8JXyIR9u
hK+UL7rxJXwl3LGoGn2l8efS6Svhnnyd6Cvlxa/SV5p/zm76Srh12R76SuO7
fUdfGcf9k74S7v7kH35/hNsbPeH+K+XF8tBXmqdGQfpKuPN5EfpK6/ypOH2l
8dsD6Csdz19K0lca37EUfSXc1bYUfaX8aEn6yvgeBdBXGv9DCfpK++1VnL7S
PNuL0lda58+F6SvNs78gfeUf1+zzPOQt+MrgPzbEflGDzwmGr5Tbr/eHr5S7
vx8CXxl5mo+Ar5QHXw2Fr5Q7WobBV8qtGybCV8pDy02Br5QHrp8OXylPrDoT
vlJ+4HkEfKU87mEkfKU8pGQ0fGXkGTAHvlL++NY8+Mqo/7uF8JXykZdj4Svl
Q+ovga+U3+66BL5SfvTlBfCV8Xm91BO+Ut7IFQ9fKW/+/VfwlXDP/IL0lXD3
9qv0lXDrL23pK+HOI7/RV8Jdu9fRV5q/32f0lcb/mExfCXfU/J6+0vjX0ugr
7WvBDX6vhNsLP+R+UeUfWegr7SvrvR9+X2n9CwvQV1rPnkL0ldZTqgh9pXl+
K0JfaXzeovSVxv9YhL7S475ahL7SPK0K01fKCxair5Rn/T6U31d6/vjy0Vc6
blm/c+r3lX/8sr0R7Gvt95XBi78HXyl3ruwDXym3TxgMXym3th0OXymPXREK
Xxm8Uhh8pdy1fSJ8pdzRaQp8ZcT/Nx2+Uh7umAlfKQ/tPAu+MvJ0mg1fKQ/6
OBq+MupJmANfGfHl58NXRv7UhfCV8sDbsfCVMT7RS+Ar5afuLIWvlE+ty/dV
KW/1SSx8ZXzuHV7D/nblp9+gr4Q7W/T7Gr5S3vwR97cLt/92jr7S/J436Svh
jiZu+kq4e89C+krzl15MX2n+lhvpK+GuoAP0lR733jH6Srj1zjn6SvPcv8nv
m3DP6w+5v13jbz3n/nbt65vc9JXGV85HX+k4781PXynfXIC+Uh5QkL5SXqAg
faXjub4AfaXjeSU/faV5LuWjr3Tc4vPSV5q/Xh76SvNE5qKv/OOUfX6WqYDn
cQz+cWf4yuD1B8BXyj17h8JXyh2+kfCV8uSaY+Er5b6L4+Er5amJk+Ar5c4Z
0+Ar5fa9TvhKeXhyBHylPPFQJHyl3PVnFHxl9FtiDnylvHnoPPhKeUyhhfCV
8noTY+Er5edKL4GvlOc9thS+Ul6mM5/HUR7r4vM4ykMu8Hkc4/M90wO+Muqv
TV8pr7mdvhLufn6TvlJe8k/6SvMUaUpfCfd499FXwh0VIukr5W2j6SvhrtdX
01d63Ae76Cvl7Y7QV8KtJ/6gr7SvAVfpK+H20j5+D7Uv+xP6SuOrWugr4c6d
uekr5RPz0leaf1U++krrbJifvtLjZr3Pze8rHYdK+ekr5fPy0Veaf19e+krj
N+Shr5T3zE1f6eeVZqGv/OORfX7GWzEfVO68GQRfKbe/3Q++Um59hb4y8v9M
Xyl3tKOvjOM2nABfGXnqTYavlCc3mQ5fKU+tPRO+Uh7+1iz4yqh/0Gz4Srl7
dTR8pfyxj74y4sfOh6+Uexougq+UN6m+GL5SHvQnfaW83Ta+P92If38FfKW8
+xcr4Cvlx71L4Cvjc1nugK+UfzyCvlJe9RB9Jdz17hX6SuPbnKSvlFdsSF8J
d0TuoK+EW0dMo68MPpO+Eu6ps5y+0vit2+gr4fZ1bvpK+aHf6Svhzh8u0Vd6
3PQ79JWOz+xH/H5qPVee8/lBPe7r4ivlNcVXwt2h4isd50biK61/uvhK838i
vlKeS66v9Lhd5PpK+WC5vtLxaS3XV/q5X5frK3/f2R548g58ZfAOXL9S7r7Q
Db4y4k9+BF8p9/z+CXylPPkh54PKUwN4faU8oDmvr5Q7RvH6yjjuX7y+Muov
QF8Z9bSjr5TbV9JXygMLz4WvlPu20VfKnbH0lfIhH9NXyns3WwpfGflf4fPO
yq036CvlocNXwldG/nVL4StjfPYOgq+U38zL9Xbhzn3R9JVw99iL9JXyV07Q
V8pPNaCvhHucW+kr4dYmk+kr4Y6yM+grrXPrUvpKuP16En2l+WeIr7Seuifp
K82z+zJ9pcd910tfaf7Wcn2l4zxFrq90fAbloa80fkY++kr53fz0leb5swB9
pXUGyXxQ43sWpK+Eu0oWpK+URxagr3R8Duanr5R/IetXxucu61f+/rI9U7MP
fKXc2bEt7g8a8UGt4Cvl7pm94CsjvjTX243800fCV8qTZ46Fr5T7UifAV0ae
Bly/Uh67bgZ8ZdRZkvNB5Y+HcD6o3PMb54PKjw7g9ZXyA1XpK+WJr9BXRv72
9JUxbo3oK+UBbekr5SNrrISvlLu+pq+M416nr5Rbe38EXym/6aOvlB8uT18J
d9y+QF8Jty5Npa+EOwuLrzT/5ET6Srgnl/hK8xwTX2meFnJ9JdzdbAd9Jdw+
9jv6SuM3n6avNP+ma/SVcNeGe/SVjs+D/+grPa4lD32l+Uvkp680/oOC9JWO
z9VC9JXG3y5MX2lf02S9XeO3y3q7xkcVoa+UVyxCXykfVZi+0r7mFqKv9HMM
k/uD/j6yvxfNPoavDH6S+6+UOwu8i/1XRvyLN+Ar5fYmveAr5Y5OQ+Ar5a4K
o+Ar5cnPx8JXyn0zeH/QOG7pqfCV8gMfOuEr5c1/jICvjH6DuN6u/KiX6+3K
436dC18pD/93AXxl9Psj16+UBx3nfFD51H85H1R++xmvr5Qv201fKe99gr4y
+n29D3xl1FmP+0WVjxzF+4PCHdZL9JXGd5XrK+HOGPGVcHuBJPpKuHX4VPpK
uLvaLPpK84esoq+0nlp76CvluX+ir/S438h6u/LX79BXwj0Ln9JXWmfW76f7
faV1/pSfvlL+r9wfFO4aUJS+0vpLF6ev9LgtStBXOs7/lKCvNL6p7GfQeuoH
0Fdaz/kS9JXm/6AEfaV1zilOX2n84mL0lb/erHj3a2PgK+XWo9zfrtxV9SP4
SrnlUDD2ixo8sAR8ZfCzXeEr5fYJg+Ar5c64EfCV8tiR3H+lPMA6Eb4yePoU
+MrgY5zwlVFn5vzR7yvlIT/Mhq+U+76Nga+Up5Xk/UHlzU8sgq+M4xakr5Sf
60lfKW83mb5S/jiIvlI+vz99ZRz3nbbwlfKj+/g+GeHOJ/O4/0q4PfJv+krj
m8n6lcZXD6SvhHuOyvqVcGvBmfSV1pkUQ19p/K+f0VfCHUEH6Sut80gqfaXx
+f6mr/S4fz+grzTPiVzcz6DxwQXoKx2HDUXoK+UPitNXmn+C7L8S7n6vNH2l
x11Qhr7Sce5dlr7S+G/L0lea/1RZ+krrccl+UeGu+mXpK+WzytBX+nltKU1f
+evKPj8/DYevlDsLh8FXyt2NP4WvlHve/Bi+MuJ79cXzOMZxK9nxPI7Bz7SD
r8z4AfCVUWeeEPjK4CdC4SvlwV+Ph6+Ux/4+Gb5SHlrKCV8pD7wRAV8Z+V/M
hq+M/GO4/0p5nf4L4CvlQ25wP4Pyqb14f1B5wjreH1R+NYrr7cpPzed6u3k+
dMD+K+UPZyfCV8q/ncD97cJdK2/RV8KdZU/TV8LtSY3oK+GeIXvpKz3ujGj6
SrijaCx9pfmLJNJXyu2H6Sutv/cZ+kp5RS99pcdtZOF+UeHu1gXoK+HWq0Xp
K+23V0n6Sus8Voa+0vhPytNXOj59KtJXetz9sr9dP5d1lekrrb9aFfpKx6FT
FfpK4xtXoa90fM5Wpq80T0d5Hkf53Er0lf/4WX0FjXDCV8rdfabCV8otv0+E
r5Snth4HXyl3tB0FXyl3+QbDV8ZxA3rg+UHjuN2teN5ZubNVF/jK4KMGwVfK
rZNHwlfKkz8dB18pj73K53GMer6cDl8Z47AwAr5SfqBGFHylPKD5XPjKqOcy
94sqb5KL+6+M/MP5O6bKK3zK/QzKfUO5n8EYt5+GwFfK31zL98kob9SQzw8K
d16+S18p//Ev+kr5v7KfQbhn7iH6So87dRF9Jdx9N46+Em7/cTd9pXn2Haev
hFuH/E1faf74p/SV5n81P32l8R8Vo6+033ql6SvhLnd5+krzdKlMXykvUpW+
0nrKWukrjZ9fnb5SnvWeQ78vdPxry/ODWv+ol+kr5SPlfX3K679MXynfX4O+
Eu4IIMfvWmR9XiF1Z8NXyoMvRcBXym8s5fuvjPiIqfCVcnem3/y+Up5cYRx8
pdy5aSR8pdzznO8XVW4ZyfczGLxJBfjK4I96wFfK7cuHwlcG/zAUvjLyDJgA
Xyn3ZUyFr5S76kfAV8pDR0XBV8odnefBV8rz9ub+duUJf3N/u/H55uN+UeXW
tEXwlfF5XR8LXxn139sOXyn//Bu+n0G4++FT+krj616gr4Rb77agr4TbMw7T
V8Jde+PoK+GeohvpKz3u3q/oK83fLY2+0nriMugr7WtLHj4/KNy5pyh9pflL
l6GvNI+lEn2lde6rSl8p/6gGfaXHbVKLvtL8PV+hrzTPtTr0leZ5Vpe+0vhd
r9JX2lex1+grHbea8n4Gjf/vVfpKuetV+kq4oxQ5fm8nq57YT+bCV8orVIqB
r5T3/n42fKXcNWIWfKXcUmwmfKXc2ZXvF1VunREOXylPXTcOvlLu6T4KvjLq
aTUY75MxjnuoC95/ZdS5rwF8pdy+qi98ZfDFn8BXygMWjoOvjDqbTYGvlIfk
i4CvjDqrRMNXRp3fzoevjH5LLYavlDfpzOdxjDzt58NXygO/mwpfGfVH83e5
hDsTa3wBXwm3h+bh8zgaX/EKfaX5R7emr4S7ehynr4S7PfH0lfJyO+kr4Y45
R+kr5X9dpa/0uNuf01fa18jC9JXWn7Xe4veV1tOgMn2l/K3q9JXyYrXpK+Ge
U3XpK41316OvdJyfNKCvtN/PAukrzX+sIX2leZY1oq90HAo1pq+Uv9GYvtI6
X2lMXym/LO+/0uOOIsfvgGWNc2jJWPhKecFfF8BXypuHzYOvlB8oOwe+Uh6y
Jwq+Uu55LxK+Muo5OxO+Uh57bDp8pdx3fBJ8pdyyj+8XVe74ZzR8pdz+dDDe
12fkOR6M9/UZfJ4dvjJ4oUHwlXLrrVD4Srmr5GT4yhiHnhHwlfKA1jHwlfLA
2wvgK+WPO/F5Z+UVavB5Z6Me3yz4SnmfV3fDV8KdQx18v6hw990i9JVw69Qb
9JXm6fo2fSXcNfU0faX8xx30lfKTB+kr4Z6if9BXetx8d+kr7TdrX6XfV8qd
Jekr7fd6JfpK+11eg77SOr+rQ19pPTvr01d63IUN6Svli5vQV9rvhWb0leZf
1Zy+0jxnW9BX2teBN+krzd+2JX2l+aNa0leaZ0FL+krjP2xJX2l8LnL8PmFW
ne/XXgpfKa/zdDF8pfzIsVj4Srm92SL4ysiTOh++Uu4ZMhe+Uh57Lxq+Up42
eTZ8ZfBHEfCV8hsfO+Ero86IKfCVcufT8fCVcldFvr/dqH/kYLxf1MiT0g7v
QzaO+1pP+Eq5Jf9o+Eq5r9Bk+Ep580C+/8rIX3cOfGWMT8n58JXygmP5Phnl
oeXmwlfKf0naA18Jd9aasge+Em6vV4a+Eu5oJu9nEO6OCqKvNL7JJfpKuLXJ
QfpK6yn2A32l9eS/TF8pj5f3Lmm/bxejr5T/WIG+Ut63Bn2lfb36Kn2lfEIg
faX9TmlKX2mdY1rQV9pvTCv6SvPfbE1faZ0H7fSV8uJt6Sut50Vb+krzr3ub
vtI6H75NXykv1Y6+Uv70bfpK+9qbyRtnn2/7Uvz/zeLb/vPaumb/O0G5O2Nf
uu2t7PM2JcX/v2flT/3OizzCnasm3UEe4e6MzddzvpeWlK+EW6YWP2s7nX2e
J9iU//zVTv3/z/7/y/q//yR7bPrv//3X9Wz3ZeQRbrf3uIK8+r9Puvcd/i3c
3rTsHduD7H/vU+66GcF+/f97Vp5zO5cgj3DP0juMf5H9fU3J8cP5Zbaq2ePp
TfH/N+t7d+cr/m6RcPvnh7y2mtl5jhjcV8aHz0V57gdecH++LP5nOuuRePeN
PengEu/snpSOcdM6w9J4nki868M0L8Zd4p2j/zgHLvHu67vOYXwl3uL4aTPG
U+ItQzZuxrgb8YWHYNw13hE8yuYfd41v+3sCuMaXGb/JljdnnI34m1e2gGt8
3LREW6WcOCPeNXAwPK7c2n9Yiv9zfJbts/TscatYiZ+jcM82C7+nwu0vHeHn
onmqnuH4C7e0qXoe46w8pOQWjKdyy1f1MT7Kly3diHFQvvbAZpyf57L/btzO
/nxbV2Nfwh2n8rMv4c6+f7AvzZNwnn0Jt7wyhH0pP96NfSl3LvkQ30PlTwfG
oy/lj+M2oa9D2X+XbmXzgTXZl3DXk6LsS7hn+TX2Jdz5+2X2JdzeZgv70uM+
W8S+lPtGhqIv5UOabkBfyi/PTkBfq7OvF25m1zOhLvsSbq9Umn1p/E+P2Jdw
x5h/2Jdw9/fX2ZdwS/L37Eu5OzEcfSmvUN6FvpS7ZmxEX+HZ1xc3suuPbsC+
hFuaVmRfwh23C9Jvwt3tM9iXcM+LWhfQl+Y/fJ99KY9934m+lB8psB59KX8+
Ox599c6+XruePf4LG7Mv5UHV2Jdwy8OK7Eu4vfJT9qV5Og1iX5pn8kuJ6Et5
hRqR6Ev52gdr0Jfyn1duQF/Nsq8Tr2WP/5zm7Eu4pWst9iXcffZV9qXxp3P5
0JdwZ7V17EvjI+3sS3nymWj0pbz7/VXoS3mDvS70VS77v1ez6xz3FvsS7nn/
Nfal8Ytasi/h9nP52Zfm8Z5mX8It6QPZl3LHjHnoS3mr5yvRl/KApM/Q1/3s
6/0r2fzdtuxLuKNRQ/al8c87si/hzmdF2JfG2wMuoi/lhyazL+WpLy1CX8pD
i6xAX8pr3l2Hvk5lz5MuZ4///XfZl3DPg2bsS7i9aH/2pTygJPtSHvke+xJu
SVjBvpSnDV6MvpRHllyGvpS3a7wWfe3Jnrd5svsa3ZF9CfdEtWJfwu2LR7Av
4c7bZdmX5qkyi30Jt3zzBftSHtJhKfpSvjb3EvSlfMjA1ejr5ew+LmbzNR+w
L+HOY23Yl3Brr8nsS/N8WIl9CXe99TX70vgvPOxLubXrcvSlPHXVIvSlfKoj
Dn1dyr4OOZc9/r27sS/hbte77Eu4p3QM+9L4+lXZl+ZPe8S+hFtaV9mKvpQH
LFqJvpQH7ZuLvpQnVl+Bvj7L/nt9Jvu4k3qyL+GWvzqwL+HOIcvYl/KA6uxL
89sqetCX5t8zjn0pT620Gn0pj6s8G30pPzJrKfoakP137c9s/kNv9iXc3aIz
+9L4X9ezL+GunTXYl8a/2ox9KV9/n30pr1B2HfpSnlx2GvpSHjooFn1Vzv7v
qex6XvRhX8ItM4PZl3DHd5vZl3D3SulL8xfvyr40f/+dSehLed9gF/pS7rk4
HH0pr1N/Dvr6K9uTv2d74JH0Jdw+rQv7Un5mG/tS3sbKvoRbwkayL+WB27eh
L+XPPolHX8rdvbqn+PtSXrC4E301yO7jt+xxPinnofKu0pdwx+CdMq8Xnrsy
+9I8r0WxL+GWtAvb0ZfyN79NQF/KU3dOQl/KnXWGoa/E7O/dz9n8ci/2JdzV
RfrS+Oa72ZdySyn2JdzuSWBfGv9m2g70pdx6bDP6MvL/OBt9KXef6YN1AP9/
s447ox/7Em79uwf7Eu7842v2pbxNHval+YedY1/CLX0D2JfyzRvZl3JL0dmI
99eb7ZOm69GvxruTeyCPxjvrheN7qrxC3oW2uTnjZeYpOijFzzU+8MRcW/Gc
88aID5w0LsXPNf7xe5G2n3K+P2Zftaak+LnGBz+bbiuS4xEjPnTv9BQ/13iP
dbKtU45Pzfg701P8XOPtBSbZFuX8XTHrPz81xc813jphsu1Ezt9Xs/7ek1L8
XONjx0+zlc65zjDiAx6Epfi5xqduc9qScq63jHhH+dAUP9f40D8ibMdzrjuN
eM9/Q1P8XOODysy23c65/jbi7UG9UvzcqKdrtK14zjzE7LdcrRQ/1/i0yDm2
BjnzMTM+pQu4xodsnGcLzpmXmufbxUHgxnm7bYEtNGd+buZPHAmu8QFrF9mW
5KxTGPGuSuPANX7qoVjbnpz1GiM++buJ4Bo/ZM1i26mcdStz/DtPBTfqGbPE
dj9n/c6IDx7oBDe+Ly2XYp3TyB8VAa7x3Z8txbqncHda1vtj/8f1vsMbTX1Y
T5R4xw8FySXe0f51H9bp9Lgn85FLvMdZ14f1L4l35s5DrvlvvuzDupLE2/tY
yPX+yPzM62r/eo3W/9W/XnCNH1fRh3UQHZ9mj7zgEu/aVcaH9QWJ97S+5wXX
+B4BPszbdXz+9XrBdfxnFfVhPqz1bLrjBZd4i6OQD/NMzb/othdc67EW8GH+
pvlfyczv51pPkfw+zIu032I+L7jE27PeH+Wfb+jnVemhF1zj72WeV/7reIm3
trCQa/0Fivtwfaz1dyxIrvlnlPPhulPjG5Yh1/PhrczzzX89p+N5vSa5np/V
M78v/usk7TdvS3KNj37fh+sPPT8H9CDX8b84zIfvudZ/aySvT7TOd0IYb3zv
ZvC6Reu8dY2+0HGrPsmH6xnN3+9H3rfy31fPqvNzWd/TOksPvIQ8Gt93ohfX
P5o/vcfmFP/9dOXDv01K8d9PN/7efTEjxX8/XbnbNQf3WY3rot6836f3T8/c
4v0+/bzeak7vSbwr4agXftP7rVMy51l+jylfM9sLX+l92A8+ppeUPwqif7TO
4g3oGeHWeuXoEz1uydz0huZJvJsOPwh3FPsnHR5QvuBaOr7veh84/nY6vtda
v+dZOr6/etw/KnjxPVX+TRsvvo/KS4Z78b0zxvmQF98v4Z5Tufg90vpbZM5z
/ftD1J8NZvH7ovkvZv6d8p+vGr+yO793/v0jWfmH233YT6Lxp7/n/VyJd7/T
lev8+n3/9+XL+L5IvOXZltv4vmj+G29F4Ppfee+S8xCveZxjQnD9r/Gxubfh
vq1+vu+PX4t5hMbvLLsL9yU1PnRoBOYRygMWx2AeoXl+b7ED3Mjz/RjMIzS+
6vokcI133R2J+YLGD9ydiPmFxif2j8B8QeM9y7dgfqHxwUtjMF/Q+JGVtmB+
YcR/MA/zBY0fXmAL5hfG+Dydh/mCxnduuAXzC40PSpiH+YLG15u8BfMLjW+e
Zx7mCxr/669bML/Q+AORczFf0PjIlxMxv9D4tKFzMV/Q+OQxiZhfaHzy4bmY
L2j8ns8TMb/QeGtmv/75gsbXTk/EPMI4fwouSPHPFzR+YaWtmEcY58O1hSn+
+YLhh5ZbMY/Q+HqrY1P88wWNjwveinmExj++uzjFP1/Q+JB+WzGP0Pia4UtT
/PMFje/QfyvmERp/v+byFP98QePvdtuKeYTGn7q/IsU/XzDOh7ZbMY8w6rka
p/tOLP/bz+M+Ogn7uoy/C8f/85r7GHLinX1qXjLu6/v3DVU54THui/v5NKfH
uK/s5/kae4z7sn7+5e8Xjfua/joPBF007gv64yv+fMG4r+aPn9DngnFfyh9f
7Ol5476Of1/TuV3njfsi/jw/zzhv3Ffw8+8+PW+sy/vzH486b6xr++NfHD9v
rAv7jzu44wVjXdXPhxa5aKxL+vOkF/YY63p+vuaAx1wvy+GeCosu4e+mXm/s
Lesz59v/O+5PMZfxd1Ovly7dM+ex/4t3xMVewd8n/btfzmt+r/z5j7e4iv2Z
+nd/9g/8Pvv/96z8TXtftfn3ber5+fD5Tvz9lXh7pxMnsJ9T40//sAP7oCTe
ku9aMq5LNd5zeZSxL81//n+5+zL2f2p86mdzbbovzR8/MOYS/p7qeTJoqwd/
N4Vbhxbz4O+jxu987yL+DurnHv3DBfy903E+NfkC/q4pb9/tAv5+af5v7Rfw
d0rjhzW/gL9H2tedRhfwd0fzfP/aBfx90TztrBfwd0TzlClxAX8vtK+tj87j
74Lmz/jrPPyv8dW+OA/Pa/5588/D58pXDDgPb2v+DXXPw8/K82Wcg4eVl953
DvMUPR/WXlsFP2t8sXHnMH/R/ZNHWm/S/X+os9mmS/CwxlcYvRn7upQPX7UF
+6KU13YnYl+RcuelrdiXo7zvsyTsa1HeucR27AtRPrnCDuyrUB5edif2JSh/
M88u3NdXvvr8LtwXV37og2TcV1aee0My7ssqH3IhGfc1lc/OvRv3BZVfzr8b
99WUb76SjPtSyuvGJuO+jvICeZNxX0R5mbCduK+gPGz0dszPjX6bJakHcf5s
/PI8zjO/F7P4jXCnTf/9v3hX+cv8Huq+3GXzTmJ+If9/Lm98OuYRwu3zymXA
b5LHfeBLL/ym9bvy+OA35e0DffCb1tOojw9+0/xDJ/vgN81zfIkPftP4sHgf
/Cbc8+9WH/wm3GlP8sFvmseW4IPftM5HcT74TfN0n+OD34RbX5vgg980f0OH
D37TfdGWIB/8pnkqNPDBb3rcC6V88Jv22zlrPfB/ftNx+2SvF37TesZnztP9
flP+Yytjvzu8VK7LOVxnaj2fWbhPV/9+DvlqFfym9RzdxH23Gl9w0Wr4TXnC
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
byjfZ+HfZeXhL0eiL+HOzRf/Ql/C3bvEhxqfJ4J9Cbe+fpd9KU9ZxL50v8aQ
IuxLedCeKPSlfPsnvI5SHl4iFn0Jdzf5in0Jtxf5hX1p/JNI9iXc+e5j9qV5
Fq9gX7rfJPYY/34p9yTx77LygLd43at87tEV6Eu4/dYq9iXcVed39qXxSfL3
S7jne5lPCnccWc++dL9Maktebyj3PZmBvpQnhHGeorxew/XoS7jz94nsS/kl
uY5Sfn8++xLubpyX1xvCHaUS2Zfu95nv4PWh8sAhE9GX8nL5OK9UPr7qRvQl
3F6qB/sSbi19gX0J9xxczL6EOx8VZF963JZ7eF9e9yV99SIW6/PK6yxfjHFQ
Hjd1PsbB2N/0wQisA+t+Afcr9KrGr/03/v+/Vy3Hw986cN9W4xd9uuX/v1ct
mwfnT8B4SrzdG/jX/3+vWnZcqz1bMc4Sb/3sqjyXLe8PrFn1L4y/1uNZwfsm
+r7H59f5uWh81u82/r/3qmXnX7SKn5fWU+Brrltp/kMBjBfuWX2Y61qaJ9rG
dTB9b+G5t/n8oO47u3tQrgeE9yvF5y/0fXTzSvA5C91f/Pl8L/aF6vvxls28
w99HlvitzTOwPqb8h5e28PeRhR+IXI99m8p7b1/D30cWnrZ+y/8fh2zuDhiM
947Kfmd31bLsS7jz1mr2pXz6MvaleQLbsS/dT939GvtS/nM1F/pSnthkFfpS
HjtsMz4X2Zft2VmJ9et+betW1i/cenwL61c+8APWr3ka7EhE/cqXPGD9yvf9
tgL1K2/WchPql/3j7jetrF/f/9ZpP+sX7vj4S9av+9Ab9WX9yp+P3Yr6ldf8
bgPqVx4wYxnqV762UgLq1/ezfVuL9ev738Z8z/r1/W9v/Mb6NX7nENav++jD
miehfuUNYuJRv/Kgt5egfuVl8m9E/fp+tjavsX7dpx91kvUrr3uF9Qt3nR7N
+jW+93PWr/z3dhtRv/I6VWJRv/LQ/zagfnluwH0okPUL98RcYv36nEGtR6xf
39u2O5z1a3zM99tQv/LVT1i/8uQS81G/8oQXLtQvzzfY6zZj/fq+tTFe1i/c
U7JIOurX97m9E8H69fmJpIXbUb/yo1sSUL9ye/4Y1K/8eGHWL89hWOe0ZP36
HrY3/mP9yv+oyvr1/Wxr57F+fc7j/b47UL/yGl02oX7lqSUjUb/yx2+sR/3y
vIj1pJ3163MkQ/PxOUF9P1twI9av8V8vY/3KR9bZifqVOx+zfuXhLztRv/Iq
A9eifn2v2r/vsH7h1oJFWb++n63PO6xf+Y51rF+fm+n/mPUr/2HDZtSvPPSD
cNSvvMy01ahfnr+x3u3A+vW5nHGlWL++P83di/Ur/3Qz69c804/uQv3KK3Td
gvqVOwuGon7l/aPiUL88J2Rf9wHrF+6YX4H1C3e3+4T163vVnuxk/foc0o8d
klG/8t4Biahfuf2b/qhf+dphK1C/PM/kONON9et7z16vyvr1+aclk1i/vg+t
8X7Wr/H1drB+5fF/s37lzuh2eE5c+chCy1C/vq9sai/WL9za4GXWr89ptYph
/Zon4xvWr/EjCuxG/cZ7zM5vRf3Kne+PQP3Kp3ZejPrl+TBrh76sX99j1vEV
1q/Pk329jPXre9JufM/6Nb56d9avPL7ANtSv3LNsMupXnlZ7PuqX59icefqz
fuGedq+yfn3ubdJ61i/cvu0Y69f4r+azfuVp47ajfuWOh5GoX/njwZGoX5+3
C5f69b1k115j/crTE1i/8s9+Y/2a/+h21q/cV38n6lcem2ch6ldufW8C6tfn
An/px/qFu3rUY/0a3z6R9SvPcyKDv48g/HhJPjenPKHAMtRpPKf4YwvUKc8p
ejpLncrvSJ3CHfm3sU7hzrO/sk59DtJ1m3UqnzooDnUqd4wIxXxQno909f+Q
dQp3t2zEOoU7Ez9nnRp/6AfWqc9ffvsL61S+r1Ac3xv5v7qy+PvBCajfeA9S
49F8n6TE+9aMxz4V5fbJo7CvQrml6xDsSzD4qUbYT6Dc/XAQ7scb/Npw3M9W
7ro8AveDlVurh+B+qlHnsI9wP1K582oX3M8z6qxQBPeljPjB3XFfxzhu0SG4
L6LccXwU7isoD90+DuvyRv4u4VjXNvL/PhXrwsrTVjixrqq8+Z4IrEsqj/sy
Eut6RvzeKKzv6PmQuHwW1j00PmZVDNZH5L0urmM1+L4U5dm///i/ebtwi7sS
3/uk74e5W47vd1LetTTf7yTcfqME3+OkPKUo39ck3P1/XJ13fJPV98cjFCx7
imWIARHKHrJXwhJQVPYWgiJU2VOWEPbGUqBAWelu00FaCpSZgGwqlL1L2NCR
gcAXEPHXJD6f83l+/uOLN4fPPc/Nfe56zj33aRHJy8T2sz+U/EvE7aGFJM8S
+x/kJ/mUWL+un+RNYv1mhSQ/EnHtqw8l3xHb+5WQvEZsX/0jyV/E/rSuJnmK
2B9dE8lHxPxgN8mXwuWO/VH26zjvU/1JEq/C5dadLf0b2y/vInFx3B7WTJd+
j8+Fb74q/R7nB6sdL+OgKi9Q7b1oh5TnxJ5UQdoh52nRlpB2yPbnKf8YcX3w
S8nbw/ZNHkreHrZPuSR5ezjfi/6Y5O0hrq29R/L2EDcdi5e8PayzfIfk9eLn
KrVJ8ncRN5ZbL3m62M/F6yUfl4qHOdEOWWdcrOTtYfs/DkreHvaz3G3J28N+
dioo7ZB1rnwi7ZB5iTbS3jiPzaueLrQTzg+26YUL7USVx6ObDeMm89KVVmPc
VOWBmRCJ/XYud9FC2UdV5c0Ykoz9drZvfs2C/XbmPealYtxkHhCQgnGTee7F
ZMTDMd//YyLiyZgf+58Z8VjMh35tRjwT84MVzIgHYu73mRnxNMzffmVGPArz
gb+aMW4yDwkzY9xkPj7JjHFT9VyJZoybzGM2mjFuMt8z3oxxk3nhL8wYN5n7
P5a8K8zbLpf8Ksw1VSWPCvNl0XEYN1V5ilpIHhVVu9XGob+i89nGSmvc6K+I
a5sGudFfcZ6K3p3c6K+Im9I+daO/Yv3Ef2TcZJ0dd2TcZPsSNhk3idtDo2Xc
5PPlH/wu4ybrt/tNxk22HzNJxk3WvzlWxk3O41F4koyb7Of8eTJucrkXN8u4
yfpfHJFxk3WqvZJxk+t/cQs3+ivWKTTfjf6Kn+t0/vxc6a+Yf/PMjXGLuO1o
sBvthv1ptlTOQbFO4mrJA8zcb43k6WJ+cHY44q2ZZ86IRbwy88BtiZifM7cV
s2B+znxg8RTMz5nfX5qC+TlzXWoK5ufMk/K50s8wPx6Zgvk584qhKYhXY153
XQrivZgf25GCeCnmew+lIN6I+Sd5KYjXYV65firiXZhPnJOKeBHmG26kIt6C
ebNOuxCvwPzF3l343q/63ZvL92/mww/L/WGcv6FOigX9CfPel5PRnzDv2D8R
/Qnzetnx6E+Yp4fEoj9hPrlPNPoT5lGNItGfMH/RMBz9CfPrlu3oT1T2P21B
f6LyM3QT+hPmfsNC0Z8w73lP9hOZd+4h+3QqnSuy/8V87IFQ9Ccq/7uFoT9h
3ujsDvQnzKsej0R/ovLnehz6E+YXy0l+TOYpn+zy/t8Th8D5N6b8LeesiBum
9HRjfsL2G0a7MT9h/YOz3ZifMK+VP34p/QZxW+PtbsxP2L5YghvzE7Z/t8uN
+Qnz0HQ35ifEjfvzudJvsP3KNDfmJ8S1QxLdmJ+w/RqTG/MT5hvXujE/4fq5
P8+N+Qn7c2mMG/MTrufj/dyYn7COX3s35iecR+ViDTfmJ1xvo4u6MT/hcp0O
Od/EPPiixG9wuT/vlvgNzocQNyEa8QfMj34s+YKYm60x+F7OvMLoWHyHZn6q
RBy+7zLvvCsO302ZFx0Qj++RzFu/jsd3PuaPN5jx/Yz51gYJ+C7FfL8tAd97
mN/unojvKMybnEzE9wnm75smYd+f+Yo1SdhPZ37xzyTsUzPvn5OE/V/m/neS
sK/K3LE+CfuYzF+9S8S+IfPsnASsq5mP+sCMuCnmXXsdsSr9CXHbjairmJ8Q
N53OkfN1xPWXB8r5OuL2T9pL/gri2pXfS/4K9uezFZK/gvXfpUr+CuYzLkr+
CuKGWk8c6GfYvqPbgX5G1f7zudLPcD3kPnOgn+HnqnjLgX6G+e8nJH8Flzs1
SfJXcD0cDZb8FcSNX0+S/BWsf+A7yV/Bfm6pJ/kruNxB/pK/gnW6PchDP8P1
lngoD/0M+7l7Yx76GVX7n5SHfkZZZ3t40JrF6GeYN7IsQT/D3H5tKfoZlX2h
5ehnmGe2WIF+hrl+wkr0M8y1CavQzzDflL0a/QxzS73f0c8w79YyGP0Mc9PN
YPQzzN/NWYt+hnmVT0PQzzB/bQtBP8Pc78d16GfU9SPfw5inR8t3JuaL2mxA
P8P8acwG9DMqP1dsQD/DvOVNiU9mHlh0JfLsENc/DJH4RuK2+WMlHpK4MfKK
5BdV9mO8z1tiMua3zI2rJ2J+y1z77zjMb1X2x3/B/FbFJ47G/Ja5STMS81uV
/XQD5rfMNZGDML9lrv+sN+a3Kp2MzpjfqnSeV8f8VsXbt0T7UfGK36L9qPQv
DUT7YW6/OgLth7nt8Wi0HxUfNx7tR8XrT0b7UflTcAraD3PDzCDs9/H561Nb
TFj/8Dn983fS0a5Ix776EzmnSdx4/J6cg2b9SWWlvZG9fvZgiZslbrsUKHkb
2P8oreRhYF64puRbYP2pDSSvAuuPbC75E9j+UFvJk8C8XQfJh8DlvuwkeQ+I
m8p2kfwGXD/nOkseA9Yf0UnyFRA3/KOXvASsf76d5B9gf963kjwDXG5MM8kn
QFx7v5HkE2B/jtWVvAHMh9aU/ACsv1sr82Tm1yvJ+XduVwMOSzw022eUl+8j
qvP+tUbiOwjzoNS12AdkXmV/PNoz858jd+E7Mp9zt836GfrMDddDoM88tEUC
9IkbT8/dhXWjSv8vGdeZ9+sm+QRY532MvEd8vn7SN1I/fM7d2PAb+M88bWsw
/GdetoYZ/hM3uv+XBv/5/Hu58+I/n5dv0Er8J64P2yj+EzcsaSf+8zl027IR
+I7FfNnjFfCf+euf4uA/cWOPjD3wn8/LXzSJ/6yT87n4z7zFIvGf9dNri/98
zt24bBr8Z26ZuAj+Mw+LjoH/zEuuSYf/zBdPFf/5vHyPcuI/cfvSSeI/21sr
iP98Dj39tBH+M3c9mQP/mU+vEg3/mU8L2A//iRsPUl4g4tqLBcR/5oVGiP98
vr5sYfGfz5U/bbsE/jM39J8M/5lXuRsJ/4kbFww/AP/Zfkh98Z+5/YUL/hPX
lugj/hO3B7jkez+fT0/3Wwn/mettP8B/5gVeRsB/5ieHH4T/fG69Zznxn7jx
12fiP+ts6yr+M+9xQ/xXnUMv9zv8Z258rof/zLUjxH/mLwMOwX8+n97s3zz4
T9w23S7+s05we/GfuHbsSfGfz5t3brQW/qvyZxf5GvMl5n1riP/Mv1gl/hPX
LnCJ/8TtO2+I/8x3txD/iZtK7Rf/+Zz4pikh8J+5/qeh8J95+/biP58rH3hA
/Ceu3/pY/GfuvCz+E9feaCL+Ezcdt4j/fH7cr886+M/cVP4H+M/8cJL4z/xM
nPjP58ef2cV/4jbNRfGfz5Ufayj+8/n0KgniP5/7vn1O/FflTZ8q/jM/N1H6
H+bNB4j/xE3ns8R/trdkiv98rrxTAxp/hdui4sR/Ppdteir+q86JH5c8h8z9
Fku+fuaW09L/ELftvSv+8znxs+Q/ceNn5D9xwwvyn89lGyPEfxV/1Qv+Mx/8
RMYv5sMLiv/E7eUfiP/E9dWp/fC58qbUfpjHUPvh8932f+X9VeXLH1oe/Sfz
Wetj4T/zbR/K+MXnvg1PxX8+372c3l+2/6qx+E/cYKD3l89x+/uJ/8z15sHw
n7llmczP+bz2uRv74D+f1/7EKf6z/dVr4j9xbdum4j+fEz+7R/zn89pVdgXD
f+aGv8bKuQbiJW0y/2f+/W8yfyNuvPlK/Gf+8Jb4z+e4H1L/z+fEww6L/3wu
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
OebTeyZg/1Z1j+qwePyZ44Gjmkj8E9ufvuPEeMH30L2s6EJ/xfbFQp3or/h+
w5TBTvRXfL+ntaro872Blnw7ZTzi+/v6HHFgPOJ7yu7ddGA84vvIwp47MB6x
faKfE+MR809LOzEecblVPnJiPGL9L8s7MR7xfWq/lHRiPGL9IfnlKuORyv9X
DoxHXG58fj+mjEes//VlB8Yjvh9NZ3NgPGKdJ2YHxiO237DegfGI/Vn4mwO/
L/MHPznw+/L9g9e/kfwRqvvy5s7COoXj/UonTcZ6RBX/ebkx9v/53iLTzzJv
4fuDPvmfE+2E77Gyv3GinbBO8UIutBOO6ztUwoV2wvc3FfjIhXbC5Xav5EI7
Yb7sExfaCfvzNH/9q7QT1o/O50o7YZ33+fNApZ1wfTbOL1dpJ+z/5AoutBPW
d+XPM5V2wjoXirvQTlinSf48VmknXG8NPnChnfB9SYkvnWgn7P/kp9IPsP3J
m9IPcP3sy3DKvvR/v7PHz7h982X/mXi3M0tln1m4dk0ruVeauH7hJJfca/Bf
e/Ho9NSJDnF98cZu2CvtyGNvaz0P9sznVhV7pX15uL3sGNgT158pKvZKu/OO
C2Gd0T8Tt196Lf4r7dFjr58yAfbEDdOfib3STr32QTNhz/zmbbFX2q/3fRw3
D/bEbU8vir3Srr36N42wJ66fflbslfburc9PxJ647asTYq+8B9768Z8Ne+L2
+n+IvfJ+eOwtdSbDnrjx4RGxV94br//2/rBn3uKo2Cvvk9f/kSPx+xI3OMgf
5T3z2k/+DfbEjddOyPdK5f3z2r9Yivkfc417OXSI246eER3lffX2t50XQ4e5
od862d8Wrl90XnSU99v73j2dDx3mltFhsm9P/MVl0VH6A2+5V2ZDh/mBMuHy
PUK4Pu+m6Cj9h/f9jZ8MHeb/touW7yzCjd/dc+mGeMcXs67C8ZwfWhXy5W0O
fB1tVfiLjO8H3drj+656c0MM+OXL57/7Lcj33XNyvVjw1Nsdvvy0ki9/r/GA
8JCHu9oeOev7DniqYxz4xNzPv/jxN9/3uMlHhfd8sbF2oYa+PK6F28SDN3hX
RBtr932fikgSXtJvToXuIb7vRCWrmMFzizmK53Ty5fPMXiY8o5yh4OqXvu8m
rv8JN1e++KZBrO/7Rb3xCdYwbz3vsJb11luWhxtf3XKj3ohrgp6Lfab3d/fm
UdQuviP2xDWnVifCfo233d7w8k+yxJ65vkcS7Ht43y/fvvoA0ieuSWubDPui
3nWDLy9f3E2xZ151wk7Yn/L2Pxe8z9vxitgT1yRPs8C+uHfdcM5rn3VW7Ilr
3ndLgf1Sb/98ysvPHhB75lvuin2BFZ7x4g8PN2VsFXvimsJ1U/A7vvWOXwe9
/OAH8Valfbu886tUb72NbOBC+2ZesJYL7Zu48fKnLrRv4pp7AS60b+bNyrrQ
vonr7xVzoX0T1/6dPx9T2jeXu8Nzb+l/7Zv1n+TP95T2zbyPy4n2zc9VOMeJ
9k3clJA/P1HaMZdbJduJ9sr+T8zXV9ol2//zzon2x/bJ/i60M/Yz/GMX2hPr
+Ndzod2wn4e6uNA+2P7MCJeupnd+cELH+tkfpeoSvOP6WRUfl2bRbfKOx5kq
3jckWXfTO45eVPH3OxJ1Vbzj3xUV778yQTfMO25dV/FZHyXoTN7x46aK9yyQ
oLvv7cfvqHjA5wm6Gt64nbsqfnF4gi71483vv//2norf35Ggu1yqlv/BrfdV
vMnNBN2LD3eXqZTzQK3jn6iroOlUeUarRyr+NjBR1/x1Zo2rSx+r+P5WibqB
rmENml59ouKt2yTqZjzNbRFS45mK12iQqAuzz+rgmpyt4tPLJer2X/f/+tsj
OSpeMzdBdzsztG9iqTwVD9yXoHt3qsawosMc6nqbnYDxSekPPDzjT3l/iRua
pMn7S9w+ZYu8v8T1RxfK+0vcNnicvL9sv3qgvL9crqd9Ku8v6/zUTN5f4saq
gS68v+zn9vx1kPL+EtcerujC+8v2k/LXQcr7y+X+Uc2F95d1DjRy4f1lf1p0
c+H9ZR4fJO8v1//2tfL+crlXbPL+crntXPL+ss7S0m783lzuzb9ydMqfWeex
5oGuinc+s0jHOu5bNl1L7zpnr4oHHk60KvbK/z06/gseYRwhbpp4Kg/tTfl7
j07bEnFWpb0xH5UdZ1XaG/Pc4/FWpb0xn7rDbFXaG/Og6QlWpb0xL/tVolVp
b8xXVUyyKu1NxR8kWZX2xnxiTLJVaW/Myxt2WpX2xvxKYYtVaW/MT/ezYD7E
fGmYBfMe5jUuWjC/YX75tQXzGOZPi6RgvsL80L8WzEuYmy9ZMP9g/tVcC+YZ
zBu5dmI+wbzetGSrMm9g3nJlIsYb5t++SMKfiRveD3CgHRK3G446dOHedbKN
ud5/owPtVRnHPPqmcqJPXDtxoBv2yvjmsQ+OTYQ9cVOBfmKvjHse+9qZybAn
bvurk9gr46HH/oXNAnvi+smNxF4ZJz32DQpJfRHX16sq9sr46Xnfq1fYBXvi
+o4lxV4ZVz36L5+KPfPXGrFXxlsPj5iZBnvmHV+5YK+Mwx4ed0Lsidve5Im9
Mj577C+dF3vixrwnYq+M2x77+A1iz/zZA7FXxnNve64o9sT1affEXhnnPfYD
h0r9ENdXJntl/Pe+dwb5vZhnk70yL/Dwn2vLfJu41kX+K/MFj337STthz1xD
9aPMIzy44WfSnokbXdlir8wvPPalJ8j6kfkWp9gr8w4P3zEkCvbM77wQe2U+
4uFpd3fAnrht41uX7pqPW6f73nvvPOHuDAc4z8N/PZ2ns/n6Aavy957nSi3j
wrqFuO39WadO0WX7TmWE8/jY85qUS/bar0bLeMr6X3XOgT2Pm7OGPdFFePcP
d6jG058qpuLfF1/oHTe9+qU2P4UdcVtx7X3o0zireaC5qFPsyN7QrLgd4zFx
Y/OPLuPPPI7POXodfhI3phTIQT+r/L2n3LZdnLpU3+/B/bB2yy2Zdyp/77Ff
1t1kVf49cZN2Tx7+PXHDljgnyuN9lev/hELH77S3/fjmsedD0a6Y3+4aA3ve
h6liEp2Hvnbr5ZnjRYd52fuiw/s2W9uIzlHf++LlqwqLDnPX1FipB9rnCTq/
ATzC9556efnQDdBhXkUTB3veF1o1WHSMvv7Byw9WER3mqxaKDu8jzbm9Htzg
65e8/MXm9dBhHvKv6PC+k38/0Wnv6w99v2MJ0WH+fmo87HmfynRsHXhVXz/s
5QNnroMO87aPRIf3tYz1ROedr//38qFZIdIvEZ/T2wx73geb+HsI+G3fuOPl
Br3oMH9oFR3eN7O716If2O8b77zv6cDBDrR/4poXUWulfyZua5wAfd5/swwW
/aa+8dfD7fN/kfkScW3uTTf6GdqX09ebLP6QvWZVefGHuSZZ/OH9vSqXg+HP
c9/8wevP3JniD3HjtdviD+37GX82ij9kr5mzJRj+MF/UNhH+8P7h7bHij8U3
//E+7+0l4g9x08s74g/vKx5bJf6QvSbga/GH+eEn4g/rtGwl/oz3zd+85RYL
EX+I2/LIH9633BYq/pC9Jr21+MO8yaEk+MM6A/uIP/V8809vuYYw8Yd5V/q9
aF9U336b+EP2mvQl4g/zMxnJ8If3V29fE3+yffNnL/9sh/hDXD/0uvhD+662
D0ziD+uU7ibtmXnLshb4w/u3GZfl/Yrzzf+97fkO+cO8/gXxh/d1r293YBwk
e83Auxbon/GtR7ztQb9N9InrXxwTfdoHtiVtEX2y11SLSYF+F9/6yKtTaIvo
E7c33Sn6tG9sbLdV9Mle485Iwb4xz+sq13dhnCZuSqgj+1HEtV0CxZ73LZPz
7ZVxmuw1Tz+X/Svixg2fiT3vj/2Uz5Vxmuxt31ST/S72v+ynYs/z0t5VXBin
yd7woIrsj7Gff1QSe/Zn/kcujNNsnxog+2nsT2oFsWedf0u6ME6zzonysv/G
3FlW7Fnnrr8L4zQ/V6Mysl/Hv9fqUmJPOvZWBV0Yp8ne7l9S9vf4ueKKiz37
M+KdE+M0/14Tisl+ID/XqKIu2PO++p2/nBin2X5tEdk/ZP03+fWg2JOOYXCe
E+Mx10O8v+w38vN6uGLP/ox/5sQ4yu+FfxHZn2Q/L+dzxZ7fi5tPnRj/uP1X
KSb7maz/Mr+eFXv+nhKa68S4xfUwtZTsf/Lzpua3H8We/bn20onxhuvhVAXZ
L2U/r1Z2wZ7fr2L57UcZJ1S/SzXZX+X206u22LPO/Hz/lf6d7V83lv1Y9vOD
tmLPv5c2v1ylv+b3YnxX2b9V1X9fsed6/ralC/0y+5M0QvZ7+Xn7TRB7/r5j
7+NC/8vlrpktnMs9Pk7W3cp62sNL0/hF3NhvnvT/9H3QVmybrJf5npdXITLO
kk5+RzYX4yzz0M93Ypzl74/Bc6ZgHUjrblOHi06MC7yuX33ciXGEuL7APrHn
7w6PbTIukL0mKtGJcYR1fjU5Yc/fEdJiZVxgP43rnRhHWP/kMifsef9/2u8y
LnC5PX9zYhxhnc8nO2HP31kMM2RcYPtvRjsxjrD+xaFO2HP9HPhBxgXeD7H1
dmIc4ef9rLsT9qRjyvpWxgX2p6jeiXGEdRa2cMKedVq1k3GB92HCGzoxjjCf
GeiEPT9XvwYyLrC9trp8F+b6sVSRcYf3c25Ul3GBdToFyHdkft635WXc4d99
ZWUZF7jcF2XluzNxQ7+yMu7w796voowLrNO1nHynZv78Ixl3WKf5JzIusP3C
SvJdm9+7wGoy7vB+WptAGRdYp2wd+Q7O9TO+mYw77M+wNjIucLm/dJLv5tx+
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
mA9svQj1wLxtmQ2oBz4v+eyIvL/Etboz8v4y//gH8d/su1faqx+8fqrE5dJ5
ycBGG+A/8z0DIuA/84mJ8+A/826ZIfCfz0UWyBT/iWvrZon/qnORY8X/5b77
tX3vnXkO/Gd7+z+h8J/5qAqR8J+5tumv8J956ahg+M/nH4tmif/Maz4X//nc
ZYfp4n+Q755xr33PNgvgP+ts2r8J/jMP+FP8Z64vPh7+MzdVWA3/6Vyk/m2O
+M/nKysWdsB/Pr/5eJ7439V3r7rvd/9gCfznc5eJQWHwn/n+OVHwX3UO1DAU
/jPXF14O//k85pk34j+fu8yuKP4Tt3+9XPyv6btH3qufmbwc/vO5zoxiW+G/
6rxnrWiMU3zucndBWTfxuc5Z9cUfPnc5M0T8KeRdp/v28SZ+K98T+RxoYvw2
+MM87pz4w+cofywq/vB5zCi9+MPnPadtEX8eeuOtfOc0X/waDH/4/GbTr3bA
H+b+v8bAH75f6W5pF8rlc5qdoqTcP7z7Bj770n1DUC7rZMw2oVzmBT6PRbl8
jrLUx1Iu3990O1HKjfDGqfn26zTd16Ncvo/p8fBwlMvc766US+coDZerSLnE
tQ12S7kFvPsVWb72HxSKcvmc5g+DI1Au8+CkOJRL5yjtmupSLp/TLHNIyrV5
43Fu+d6v05tQLtufmh6Jcpnv2RKPcvn+o+9rSrl87rLjMSl3rnf95LN/vXQL
ymWdrD+iUC7z7XvlXgQ6R2mMri3lEjcMPyPltvV+H/bt1x08IXmt+Vznit4x
KFd1v1KZRJTL5zG315VyiRuvnZNy33rXKZd89dY7HOXyeczHjeJQLvN66Uko
l85RGnvUk3L5POZfmVJuunc95bv/qHVIJMrle5EKDJD1M/OeUTtRLp/H3Ezl
8v1H585LuTnedVKGr5+/J/lA2N7+s+TnZL7cZkG5fL6yYCOXzvteaqwHR3nH
jZPefuybAxJ3xPcltX+SAz/5XGf8afGTdDRvm8bCT9Z5VyoJfjLv6JcCP/n8
5sv24qdyns/zp6RSco6A7E0HqubCTz432iq/f1DK5bju9guSsK7jeOmiTWXf
j+9PqTxQ9htpn0pbMN4BP/mekVanxU+OS6+nFz95P+rGl9TeKF7MNWgp6pPt
Na1Woj6ZL8rejPgb3k/bdE/ywzA/VjkK+wXM115K0XX1/a6quC9D8HycI+P9
t8MNEsBZ55cuqboMXztW6Wj8PkdcNOu0niLx0qwzJMaii/O9hyod7ctZyFPJ
OsteRCJemnVyqyTrsn39iEqnp2YJ8kuyTktTOOKlWWf98wRdPV8/qNIZ2G0F
8kKyzutBJsRLs076IbNuvK8fV/tzaSXyObJOVJjkZ2Sdkc3MOotvHFLp+N9f
iTyMrDNjsORVZJ3pH5l1z71xUFnqeL++K5E/kXUsCyQfIussqmvWhfnmASqd
1/tXIO8h62SeljyGrNO7v1l3wDePUem4Rq1AvkLWSfzAhHhp1hk136y77ZuH
qXQyF65AnkHWGVrMhHhp1nlvMuv+8cZ9PVTpnKq+EvkBVed5X0u+P9aps9Os
q+qbN6vfry9XIa+f6rmiJE8f6wyNN+t0vvWDup6frkY+PlU7rCz59Vin/e9m
ncG3jlLptNQEI48e6/QYsR3x0qwza4RZN9+3nlTpxOnXYj+RdZ7O2IZ4adYZ
XM2si/Ctq1U6Qy0h2H9kndujtiJemnU6Z8br/vDtL6h0HubPS5X9SlX8asMt
iJdWvacT4nUPffs1Kh2bfyj2N1U6VzcjXpp1Sn8Qryvk2/9S6aQ/3Yj9UFX9
DNuEeGnWWbA4DvHSqnMTLaOxH8h8WQf53sE6xd/Hqvbj/ountWfmvz9KXBef
pz5aNA+cvo8YVi5yYx+Tv3fMuOdS73P59I3j39oRp8Xn6D9NzgVXxT8Pc6v2
if7TsU2MsyPuinWu9skFJx1T99Zu1X7NfzqG3oPsiItinZnvcsBJR1vkY7dq
30Txx1zCjrgl/k50JC4HnL8rTXvpUu1fKHndJ6+6i7gi9mfDoBxw0jG+ueJS
7SMo/lz98C7ifvj8fqXSOeCko6+6z6Vazyu/1/XfsxCXw/6k/5kNTjq2lTtc
qnW48lzDa2XhPizWabo+G5zruewKl2r9rPjjd/EO7sPi7257fsoGZ3+SZrpU
62ElDr/5+ju4D4t17nbOBmedFRNc6vXtf/U8dMod3IfF78uFptngrOM3zqVa
ryr+ZE+7g/uwuP00a5UNzjrbprhU60+lfqZG3sF9WKRjr9M/G5zf35xFLtV6
UtFZ75eF+7C4fj4JzgZnf0ZHuFTrQ0UnLCIL92Hx7/5TTjY4t8N6f7pU6z2l
nq8suYv7sPh++S1jcsD5vRhdyK1avynv++ahdtyHxf58WzYXnHXGdHer1mPK
cz2teg/nbNmfFbdzwbn/WbPOrVovKb97N//7OH/Lv7v7YB441/O+y24dr4uU
+llb4gHiG/i5bq9wgHP/E/RQvvdxu711QuIxuB7m93RjHcQ6lZJkn5bzrsz9
JBfnH/iczpP2F3Begse7h5qDWK8xv0z313O5i/alqM7tK/Xg+Og+vrPyc2U2
OAbOOqE3IqzKuQDW6ZW/3lTWR9z+W7Y6Cs46Ne5sxX0APA726BZlVdZTrF+p
rx3rJvbz5RkrOOv3d0bgngDWr1oj3qqss1j/35i7WE+x/pDMA+Csf/9RHNZT
rL9Mn2RV1l/cbi/8m4V1Fuvvd6WDs/7byCSss1T183inVVmXsf9Ft2Rh/cX6
LwL2grP+kiEWrL9Yf1yMxaqs19j/0B+zsC5j/YNF9oCz/sJmKViXsX5zh8Wq
rONYP7BbFtZrrG827gZn/V6bUrBeY/1Try1WZX1H+pqrbbKwjmP92V13g7N+
8d0pWMex/o4nFquy7uP6j2qWhfWd6j1qvhuc9cN2pmB9x/rJmRarsh4kfeOR
hllY97F+96a7wVn/1I4UrPtY/73NYlXWiey/uWYW1oOs/1vD3eCs/9H6FKwH
VefXrBarsn5k/ycEZGGdyPoPqu4GZ31bvr6yHmT96ectVmVdye2nTv74q9iz
/vJ/0sBZf1N0CtaPKn23xaqsN1l/3bM7WFey/rTTaeCs//xkCtaVrJ9TI8Wq
rEO5/k+cuoP1Juv3XZAGrmo/f6dgvcn6a4NSrMr6lP33j7iDdSjrnw1MA2f9
tbpUrENZ/8H+FKuybmX/9+TPxxR71v/70C5w1p8ekor1Keu3rJRqVdaz3H6a
d76DdSvrN+m0C1yVN+x5KtatrF9zcapVWedy/TwocQfrWdZP2JcKzvojh+/C
epb1v32balXWv6xf5tJtrHNZP7J6KjjrH7y6C+tc1XnbGbusyrqY9Uuuv431
L+s3mpcCzvp/DkhD3A/zzffSsP9J5zHta2c7MB+g85umBg3dGN/JXlPuXR44
2Rsd/d0Yr/m85+rQPHCytx0b68b4y/580S8P+6V8LnJNFxfsOa7vdVfR4Txs
i41ujL+kb1jXIA/7qKSvz/rFBXuOJxw1XnS4fn4JcWP85fOwqyrlYX+Vz2/u
XuqCPedDC1olOlyfB8PdGH+5PsuXzcO+K58DtWxxwZ707Tmkw+eCE5LcGH/Z
/5H57VUZx1m/YawL9qzfbqfocP2v2e3G+Mvnl+uWzMM+Leu/Mrtgz/Gff6WJ
DtdP0X1ujL9cP0uK5WH/ln/f1/n+K/Zc/xd2iQ7pa8unuzH+cv2kF8rDvi77
3zR/va/Yc36/1ETR4fq5nerG+Mv6t/7OxX4vt5/ItS7Yc/ufbBId1t8f78b4
y/phebnYB+b363OjC/Zc/w9+Fx1u/wHb3Bh/SV/7981c7A+z/twxLtiz/8dm
iw7Xf9BqN8Zf1m96LBf7xvz7Dujrgj2fW983UnT4fHq5/HKV8Zf7tw3xudhP
5vpv28YFe24/330tOty/zRnlxvjL9T91ZS72mbn97NC6YM/6/zYUHX5///7O
jfGX9PWBv+Ri/5n0tVl+Ltjz71urnOiw/9dauDH+sv77LrnYlyZ9w8JMJ+xZ
v9JLFzj736eq5L3k+mn3aS44+2Mq6MZ4yuPFp69ywFk/94nkyWT762dywFl/
wFnJo8i8QLIL+8Ocb23O52E4D8znuKv/Eg7O8eTJm6PxvZXzA0wfFYv4S9av
8iYM53tV90LmhYOzflqHGMQvsk7UuS04r8s6pyZFgLPOgmcxVmV/mHVeRG/F
eVrWaf0qApx1bgbHWpX9YdaZOHcbzruyzolZkeCs061FnFXZH2adjAHbcR6V
dWr8GwnOOqNux1mV/WHW6dFYzpGyztMFUeCsEzov3qrsD7NOhUImnOdknbGF
osFZx09rtir7w6rfa6IJ5y1Zp/SSaHCVPwfNVmV/mHVibppwTpJ1bAVjwFW/
V58Eq7I/zDpfdgzH+UbWGfxbDDjrPH2QYFX2h1lnekw4ziWq8o665V5j1hn/
S6JV2R9mnQKFI3DOkHV6fB8LzjodHyZalf1h1hk1PALnBlmnpVXuNWYd4zdJ
VmV/mHX2WCJwDpB19peLA2edgPAkq7I/zDp9/xeBc32sk9Y/Dlz1vl9Psir7
w6yzrEEkzumxzuQFceCsMzg3yarsD7POwR6ROHfHOkdXx4GzToULSVZlf5h1
/NrI/cWskz06Dpx1VvyaZFX2h1nnsDUC5+VYp2ReLDjrzDiRaFX2h1mnvC4c
5+JYp+OJGHDWWb9SzsexfQN/ycPI9o97xePcGq8jMi+uQdwM8/KvdmAfmblp
1HF8R+TzR7Uqn5U4ahpn31R2Id6VntcwwyB5Yzjvsb9WOOnrow85sL7j/L3W
OcLZn5hukleZuPZNR8mrzOeAvnktnM89jQuSe5D5nFGp5k5wsjf5b5B7kPkc
0+0gJzjrX6F7kNmfpNVOcLY3X5d7kPmcV9soJzj7E5kt9yDz+D4zyQnO9dPu
uQPrDvb/ntkJzr/LUpfcg0z29rrbneD8u1x4LPcg8/MWWe4E53Y79arcg8z5
akqOc4KzfoJN7kHm+tn6tROc63N9jNyDzPr3PneCs/2ny+UeZLa/8U4413/5
n+V+ZK7PXheEs//lu8q9yVyfeZHC2T7iM8kHzv40mSac7O2f/5uHeSzz3Bt5
mK8SNzRLy0NcBL2/pt+aOTBf5XN2LU9JnnBuVw3WSN5v/n3/Hi1xGNyPVW0Z
if6H+4d/J0l/yucBJ1E+BzqXp/EvuQHxHPw9qu1JOV/J9j07rIA/zG9/tAn7
YnwesPTydKvG+5/1IOvv+Vj25Vkn9a5832Kdz44ewHMR1//4UPLx8new9Hvb
8Lx8fnBY/Wj4z3zgjDid4ifrtCkp+/ts36/MIfjJ/Ig+DX7y+cSYdm74yd/T
9pSOgJ98v3bo+Fj4ybxzswT4yTqvAsVPti++5yD8ZP5Jj10YX0lHu+uNnNdm
+7KfSzwq39/d8Ct5Lv6O57KE47n4nu5fUmPwXMzfLjTjuUjHlrAzC89F9sat
m/fjuZhfX56G52Idq0uei8tdFiDPRdyUSL8Xfz8s3c6E5+L7vs9VknbFfNYN
aVekY2tQVp6L7X+qlI7nYr68/x48F+tszJLnIntDciF5LuL2E3Xkufi7Zcbn
8r7wfd8TR0dKHgDiR8vE4rlIx/jlNHmv+f7xVcm78Vys82+1dDwX6eh/PCvP
xfeSH3ruwnOx/qmP5bn4e6n+/WY8F98/3vJmOJ6LeY0Z0Xgu1gl9eBvPxfYl
5uzCczF/dmAfnot07Gf2yXORvX73PXku4qbdheW5+DttbquNeC6+x3zBChOe
i/nlmlF4LtLRt/lRnovt169OwXMRN/YtfwDPRTq2ULM8F9kbql+S5+J70qu+
ln6bvw+b8tbLvUh0H3rLApIXm/miWpF4LtYZ7r4l8fZkP/XUTom3Jz6q5kE8
F+los7fJc7F9hZPyXMT1FXLlufi7dOnq6yTvB923Xm/hNsn7QfzVbxF4LtKx
fbxGnovtu/ydiOdi3t0tz8U6O9fJc/E971MPyXMxn3ef7sOl7+GBt9bKPZ50
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
Ui7z9qUk3x3zVxlSLt8rUaC8lMv3ULQeKuXyfRMb46RctjfnSLnM/Y2S747u
j7B/UEnygxE3lE4RfeKa5Bsyz2ce0Eny2tE9EZr5n4o+3yvRaJ/os/2CB5I3
j/nNTyV/Hd0Hof2mhugT1x+3iT5xjb6C5Klj/ry65KnjeyICA0Wf74OYfVL0
2d41Pxr6zLOGJECf74k4V0f0md/MEH2+D6Jvi1joM399U/Ld0T0O9gDK/8b3
PrTPFH2+J8LYLh76zG/GJkOf74MYRvp878NN0uf7wZtPSIA+8+o9JY8c3++w
pL4L81W+N9xyRc4T8v0OIX9KuWxfupzkhWP+oKjkheN7HAY1k3L5Poh376Vc
tj92VObnfO/DnJ8sVmV+Tutc7ZwJos/r69eUt4358FCZX3EeuS2/yDqC7yMw
1PkV6yW+d8Bo7o9xgde5lvMrsT5he9eILYjfYl7zRizW6cwjXiaDc/6fEasl
PonzLUwfHw+uyoO0NAXxPWz/PiQaXJV/abPEzbC9NioCnO0NjxIRj6LKo2U3
gavy17VLQJyHKh/dByZwto8JMiN+gu2No3eAs/27ymbEJbB97qgd4GwfWMWM
7/1sfzB6Bzjb39aZ8R2d7QOzd4Cz/f6xZnyfZvuRRUzgbF9hnRnffdk+4EMT
uCr/m9mM76mqfF9XdoCzfWayGfsJbJ+eXz8KZ/us7WbsM7B93DG5l5ntj84y
Y/9Bld/v+TZwtjd1MuP7DdtnvNgKrvL/bTy+c7D9pvNbwNn+Zng8vgew/fUl
YeBsX751PPbN2V5fdTM4218+Fof9X7a3bdoIzvZNO8Uh3z3vdzW4nQvO+Vs2
5s//lbzwfA9vrDEXnPfBJvRwI38654+y1coF57w0MwPdyFfO+VIqX8wB5zw/
BQu7kR9cld/AmAPOeYrGPnIhHzf7X7xpDjjnj2pw0oX815yfJzcvG5z9v5vg
Qn5q3t87sDMbnPXbrXchfzTn2xk3Oxuc9evOdyG/Mz/v6D7Z4Py81iku5GVm
/aWts8FZv+04F/Ips32zptngXP/l88c7JQ8yP+/Aztng3B6uzHIhfzHbt5uQ
Dc7trWSIC3mH2b7/vmxwft4Ke1zIF8z26TVzwNk+5okLeX65vTXYnwPOz1u7
phv772w/fUouOOdr6j/ejX159mfJ13ngqjx1e9zYr+ff91odBzj/Xk2eyH2y
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
   "], {{
     {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[Polygon3DBox[CompressedData["
1:eJxMnXm8VdP7x89wnXPucUP3dnFvvuZ5jChCI5EoQ2nQpLkoQ0UZogwRUZQm
JFOZxwhRplAi8zzP8xAy5vd5ez77tX9/rNfzPHuvtfbea733uafovrfqf9LR
I3OZTOaffTKZvOJrlZkM9d5qzTJxrEKtueN6ai3V1lerUtOw//rTb1+fL6jt
51hUO0BN02bKagc6Mr6Fz5fUWnm+Bmr7+xhjWvvYBmqn1GQy26l4Uyfaqt5Q
bSO1do4N1Q5yrFY72FHDMoeoNVKrVTtTB3bSPB9qntHKt1f+tvLTle+g/F3l
2yq+obix+rfx9bnejjr+vo7XKx+v/jur/lj1UK8Fa3aU2uZqW6gd7bilWg+1
7dV2UPu8MvocqXaMz2+l1sVxa7VuatuqbafW3ZHxXX1+G7Wenm9HteMcd1Lr
5biz2gTd51e63pdqfVTvorarWl/H3dSOV9tdbQ+13h5Hv/ZeP9aun/vSb7AO
7KJn/1RzDlbd1MwMcWQtBqg1UdtTrb/npr5ObYTaSLVhXjP4OsEMwc6Jji3c
t4W5GOkIUyc5wtTJjrB5iiNMneoIR6Mc2c/RjnA0xhGOTnOEo9Md4WisI+sx
zhGmdtMafK01OFT5RC3U7qq/UX2+8j2Uf6v8PO8zXOypY9/r2OHKbxSoe6n+
QfV7ArOp8h+V7634k2Jn9fm5MsZOVDvfc8DUsd5/+LjAx+Bodib2g32YZJ7g
5SJHxl3sCF+THeHrEkc4vdQRvqY4wtdljvB1uSO8THWEr2mO8HWFI+xc6Qhr
0x3hYoYjvFzlOFBtltogP89wMwIfc/x8vHNzHeHoakf6XuMIU9c6wtSFXifW
ZZ6Pwdf8TLAFUw2y+jxQfIc9ygRPcHSTIxztoz1ao705Q/kNmeCPfjf7PHwt
cISvW80THN3mCEcLfR7uJomZZpr3F817sfLmyn9V/onY2Ff5b8ofNAfs+QLx
00LHf+fdVp/9lf+h/K/K4OV+tf10bK3q8cpv8XW4jwN0/E8dn6D8EfMBF4s9
N+v0kCMcPZAJjrn2okzMT32914znf9h9met1rwvrt9Q8wdEyRzh6xhyw/49l
gj/6Pe7z8PWEI3w9bZ7gaLkj45/0ebh71vPB0Qq1meZopSPvxyuZ+Axiz1eZ
Jzh6wRGOVpsh2Hne4+i3xOvEe/Oi+9LvUR/jGV713KzNa46sxcuZYI5rv+S5
qd/U3jXRfnyn/XjDawZrf6s95+d4x6ywh+86wtStYqCtxmbLwewC93vP52Ht
QJ3/W3Pfrvx7Xau16n9Vt+EHq8bdzbqLt5aq/9HxNerTTnlO5w5SzCvepz4V
5WDqc+YxN6zHl2YCRr5yhNNvMsETHH2RibH0u0zXaqV51+laX7sv/X42KzDy
g+dmXX90hJHvMsEZ1/7Wc1O/lYl3j+f/yX2Z602vJed+MytPqa11hKl/vcew
8GsmmKPf7z4Pa384wuw/3hOYWufI+D99HgYz2ZgPprLZiPCSy0aEr3I29pt7
rMgGEzCyXjYinBazwRMc5bMxjn5rvE68K4Vs9KXfLz7GM6yfjblZm6psRBip
zMb7ybVL2Zib+mvlD6otVtsgG8zB2sHaq/W09+8rn6a9a6+6oPpK5YcoLyqf
ofxQ5SXlHRQrFT9W/zvE52Gqy6r/Elcdla+v/HDFKsXP1KdBOZjaVNesy0YO
L/XZiPDVOBsRvjbLRoSd/2Ujwtrm2YhwsUU2IrxsmY0Is1tlI8LXjtnYb7jY
Jhucwc622YjwuF02Iuu9fTYia7xDNiLjd8rGHDC1dTbmZq6ds3EMjlpmYz/Y
h12zwRO87K78r0y863tkI8JXk2xE+NozGxFO98pGhK+m2YjwtbcjfO3jCC/N
HOGruSN87esIO/s5wloLR7jY3xFeDnCE2QMdeZ452vfO2suNtIet/Hz8/Gzt
CEdtHDdUO0J9N1DfjZTP0thOqjdUvUs21ol16aVjm8ORjm2heJjiWWp3i6Wj
da5Gx/L6Yn6M8kbKuyjWKm6iPhuXgyPGdMymTB3uCFNHOMJUJ0eY6uwIU0c6
wtRRjjB1tCNMHeMIU10c2f+ujjB1rCNMdXOEqe6OMNVPbbdssNAzG2zB5nGO
8NXLEaZ6O7JmfRxh6njPAUdXa22P1Lo01Hr09zGYmqfjx+r4pjo+MBtswdQg
R5ga7AhTQxxhaqgjTA1zhKnhjjB1giNMnegIUyMcYWqkI0yd5AhTJzvyrpzi
CFOnOsLUKEeY6qrn2ETP0ZY9Ul6tvJHy+XrGbqrrVN+gvLvyeuU9FBsrtlef
+8RST9WbqV5fLB2n/H/KB3idWBd+PvCdgu8cZ/8/pp5Vm6F2ldo5ZgumznWE
qQmOMDXREabOc4Sp8x1h6gJHmLrQEaYmOcLURY4wdbEjTE12hKlLHHuoXeoI
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
qf3tyFr8kYuftVz7d89N/Y3vnWdb5zWDtW3y8Tw8B2sMK+wha73aTM3V3g7i
u7fybD6Yo98MHe+r4y9Ti6urVPdTPVtxgOLrOv6a2JijeqDql9RnpvLjlV+t
OFjxLfUZUg5GqjR3g3zk8FWbD25Yjw3zwQSMbJSPCKfV+eAJjjbIxzj6vazr
ztI1+vPdKx996VeXD1ZgZON8zM26bpKPCCONzBnXrsnH3NT8Dx28ezz/pvno
y1z/ei059798sMJ6b56PCFPb52OPYWGzfDBHvy3ycR7WtsxHhNlt87EnMLVd
PiLjt1b+gxnk8+MXM8XnyK/mZad8RPjaMx/7zT3ukg8mYGTXfEQ43T0fPMHR
zvkYR7/6fKwT78pu+ehLv8b5OMYz7JWPuVmbpvmIMNIkH+8n194jH3P/Y075
Ocpn2d7uC3ewPMPn3tTeXae9O0F7N1/xRMWS+rTJxx7DwutiaZ7ODde5d9T/
euUj+LtNxZF8b1efVvmUqdaOjL9RfU7i7ziVt/V8MNXOEV4OcoSvw/PBDevR
Ph9MwMghjnDaIR88wdHBHke/k8txDy3VDnVf+h2ZD1Zg5AjPzbp2coSRjvng
jGsf5rmpX9WzX6tnGKa5O7svc72vdVio46P53p4PVni/j3WEqd752GNY6KK2
lft183lY6+4Is8flgy2Y6uXI+B4+D4N9PB9M9XWEl36O8HWT7usU3Vcz5f3z
wQSMDHCE00H54AmOjvc4+h3ldeJdGei+9Dvax3hv3tKa3KxrnAoPyhcoH6V8
SD4442fIYM9NfY3OD9X5CuW3KB/DnxeVT/Pz8BzjyrFv/D3OKd5DmBrrPYaF
2zV2rPodqPxUn4e1UY4we1o+2IKp0x0ZP9rnYXCc54OpMxzh5UxH+DrP3LAe
Z5sJGBnvCKfnmic4Osvj6DfG1+E+znFf+l2UD1Zg5HzPzbpeqHaMGZmYD864
9gTPTX2bnv10/syifJL7MtdH4vBWnTtN5y41K3zfmeIIU9O9x7BwST6Yo99l
Pg9rlzvC7BXeE5i60pHxU32ePZvh+WDqKkd4mekIX1/o3u7VvZ3DzykzASN3
6NgZOjZU+Yfi5y7VZ6me5XH0u9jrxLvyvvrcqT5nqs9kH+MZ7tOxc/lOrvx+
5ROUn6T8HuXjlZ+o/FPdw92qz+ZcI33WKv+Fz67/x9pN5gmObnaElwWO7OdC
R/i6xRG+bnWE09sc4et2R/i6wxG+7nSEl7sc4etuR/i6xxF27nWEtfsc4eJ+
R3hZ5AizDzjC12Peb7h4yJzBzsOO8PiII+u9xJE1ftSR8Us9B0wtVrvAcy3z
MTh6ROs6mZ8hyp8wT/DypCPv+lOO8PW0I3wtd4TTZxzh61lH+HrOEb5WOMLL
Skf4WqR7OE/3MEf5J2LmAdXn89/4lT+o/ALlX4uHxcovhD/xMEnxWvX/Vscf
0vGLVD+seDHf53X8LTMBC5eU4++YX1V7LR85HL3ueKPaG44w9aYj4x/3OrEu
G1XoO5Xi+2oNKyJ+oPau2YKp9xxvc7/bzNQHjjD1oSNMfeQIUx87wtQnjjD1
qSNMfeYIU587wtQXjjD1pSNMfa32oPf/G0eY+tYRpr5zhKnvHWHqVzMBCz+a
Ldj8yRG+fnaEqTWOrNkvjoz/zXPA0dveE97LtT4GU+WK2APW/o98sAVTfzrC
1F+OMPW3I0z94whTS8TApfy5jXUQP4+qngI/yh9Tfpny78XMUuWX83dZYmkq
fybjGXV8mY5PU/244hV8b+cZlF+p/BXl08vBUUH3W6xImSpVRISpyoqIPM87
flb4WL8ing82qyoish4NKiLSd4OKiDC1YUVEmPrd68S6/OD9YT+qK4ItmPpC
97aL6t5qjSqCLZiqrYgIUxtXRISpTSoiwtSmFRFhqq4iIkzVV0SEqc2Uf2Wm
/lcREaY2r4gIU1tURISpLSsiwtRWFRG5960rIsLUNhURYWrbiogwtV1FRJja
tSKYgIUdKoIt2NyxIiJ87VQREaZ2rojImrEev5up3SpiDjjaviLmZq7dK+IY
TN1TjnVvo/ak9n2G6nU8j/h5SvVVqn9Q/rTymcp/FjPLlc/i55ZYmq2Y4x51
/Bkdn6P6WcW5fI/S8RXKr1a+nvJry8HRvmrzy8HTfmo3lIOnFmo3lYOn/dUW
lOM9OUDtlnLwdKDabeXgqaXaHeXgqZXaXeXgqbXao+Xg4BC1+8rxWdZWbVE5
PsvaqT1YDp4OUntIeY3iwWqPlIOn9mp7VMQ68c6t49nUDq+IvjAIc0+Wg6fD
1J4uB08dOa9nf6YcTD1XDp46qa0sB0+d1VaVg6cj1V4sB09Hqb1UDp6OVnul
HDwdwztXDp668PlRDp668m6Vg6djeZ/KwVM3Pr/LsffdeW/KwVMP3pVy8NST
96McPB3HO1EOnnrBZk18D/lZx74qB5d9YL8cbPWF93Lw1A/Gy7Fex8Omxv2k
ugncaZ4//X1maTneyUPV9qoWhzr+G/020jtejjVvxnHlf6r9rXYNf0bQ8Uyd
vueIuX9YA/W/rhwsbaP8+nKwtK3yG8vB0nbKby4HS9srX1gOlnZQfms5WNpR
+e3lYGkn5XeWg6Wdld9dDpZ2UX5vOd6RXZXfXw6WdlP+QDlY2l354nKwtIfy
h8vB0uPl+NzpoLanjj9WDib3Ur6sHOvQVPkT5eizt/KnysHS8nJwdDYMap1+
V7238pc3ER9qL64vHhRfVVut/E+9g801/gX1+0f5vspXK+cfd+yn/GXleeUt
lL/Ku6h8f+Wv884pP0D5m7xbyg9U/jafDcpbKn+Xd0V5K+Xv824pb638Q9hX
3kb5x8obK2+r/FO4Vt5O+efwq/wg5V/CqfKDlX8Nj8rbK/8W7pQfovx7+FJ+
qPIflS/Qvt+sVruBvmNq/9eKp431vOcp/0P5psqn1eqZlVerT41avY4N1lpd
qePjNFcjHZulfKbaJsorNN84jW+kfkXlHXStrZQ/rWO9lB+q/ArlHZVvr3yG
8sOV76h8lvIjlO+sfK7yTsp3VX6t8s7Kd1c+X/mRypsov1H5Ucr3Ur5A+dHK
91Z+q/JjlDdTfofyLsr3VX638q7KWyi/T/mxyg9Q/oDybspbKn9IeXflrZUv
Ud5DeVvlS5X3VH6Q8ieUH6e8vfJ2WoPjlVcov05rME9tN63DvjreW8f/5Z1R
3kd5Vn0OVN5XeU55a+X9lOeVX645D1O+rfJnN9bnm9qxylcqrlDrpvxw9R+o
PkXlnZUPUl5SfrTywcorlXdVPkR5WXl35UOVr6/8OOXDlFcp76N8uPIGyo9X
foLyDZQPVH6i8g2VD1E+QvlGyocrH6m8ofIRyk9SXq38ZOUnK69RvkL3P4q1
UL5K+eV6TwYof0H53+JnkPIrdWyI4nOV+kzTMw1jnPLTlI9R20n1G+qfVxuh
fD3FkxS35ro6f6LaNlxX8SS17ZSPUjxVbQfl4xTHqu2ivL3upb/ubT3lZ+nY
mWq7sdeKi9SOVD5RcYLansovUDxfranyixQnqe2j/BLFyWrNlV+mOEVtP94L
xalq+yufrnil2oHKZypepdZK+RzF2WptlF+jeLVaOzhRnKd2sPIbFK9XO0T5
zYo3qXXg3dGzX6DYUe12HbtN7XAYVrxLrRMMK96r1ll5Bz3vAD1vAYZ1bLHa
UTCs+Ija0TCs+Bj/3yoMKz6u1oV3U/Epta7Kz1Ecr7aH8l+1X/tozhVi+AUd
W6XWHR70uThM7Xblr+rYK2o92TvF1/l/GZW/rfiWWi/l7ym+q9Zb+YeKH6j1
Uf6J4sdqfZV/rviZWj/lXyl+qdZf+TeKL2otBipvoHiK7mcwcyqfqfu7lnXm
7zDhTixV6/ipfFYr/0Vj16iN1Lm1ir+pnaz8L8U/1U5R/q/iOhhS3ljPVK82
jvVXLKiNVr6+YlltjPINFTdQO015jWK12unKN1HcWG2s8i0UN1c7Q3leMac2
Svk2ilurnan8Fu3XmbrPqcp30bGd1c5Wvofi7mrjlTdV3EvtHOXNFZupnat8
f8UWahOUt1JsqTaRzyLFtmrnKT9Esb3a+co31po8pHghn7267ihddxLcKh+t
/GK4VT5G+WTWU/lpyi+BW+WnK78UbpWPVT4FbpWPU34Z3Co/Q/nlyh9RPkH5
VXCr/Czl05Tfpfxs5Vcov1f5eOVXKl+k/Bzl05UvVn6u8hnKd9C9b692Fnun
/W2m48+Lw5e0V6vVeuj4U+p/vo7PVv6M8guUz+EzRfmFyufChPJJyq9Wvlr5
RcqvUf611uQrtVeU/6C4rdpryj/gs11tvvI31f8aXftN5T/rWJ3aWzCv45P5
PqS8XscuUX4Tn8O636PUblZ+rGJXtQXKeyr2UFvIZ69ib7VblPdXPF7tVuWD
FQep3cbnEnurdq/ykYoj1O5QfqriKWp3Kj8NHtXuUn4GzKrdrXw8HKndw34r
XqB2n/LHdM8TdZ8zlU/WsYvV7le+THGp2nPwr2e5lO9eyjdTPkX5g8r/p/wy
vocp31L5j4oPq83SuJlqjyi/WnGu2qPK5yleq/aY8usV53MN5Tcp3qi2TPlC
1kbtceW3sQZqTyi/k2dVe1L5PTyT2lPK7+c51J5W/qDiA2rLuQ/Fh9SeUf6o
4hK1Z5U/ruc9T/c8S/mTzK22Qvly5lBbqfw5+qo9r/x5jqmtUv6i4gs0PvMV
p6gtWj/+ezv/jwb/D8cb7KPW4iUdP7+gfVc7Wm0HHStX6XOQd1b5+srfUD5f
HFUpf0WfSx9o7Ptqb+v4R4q/qt87ynfm5ybfCflM4O8TlL+n/B09yzS+H/K5
p/wK5R/AqvIr+a7IPMqnK/+Iz1XlM/jeqPwz5Vcp/0T5F8pn8h2Sz1jls5R/
xmes8tl8n1T+nfI5yr9Q3oT3gO+Nyn/S8auVf8W7wHvB90zla5Rfq/wb5buq
/zy+cyrfXfl1yr/js3RTfZaq/cC7pv5z+b6qfG/12Uhr8pPy9RR7rif+1H5R
3UHxTLVflR+meJbab8o7Kp6ttlb54Yrj1X5XfoTiOWp/KO+keK7an8o7K05Q
+0v5kYoT1f5WfpTieWr/8N4qnq+2Tvkxiheo/au8i+KF/INy3VtXxUlqWeXH
Kl6kllPeTfFitbzy7oqT1SqU91C8RG0n5Tuq9VNeUDxOcYra9XyPU91L+faK
JbXeyhtonT7X98dXxUlD5V8o30Hnftb9HKrzZ6jtqXqm4nNqTZXPUlyh9rX6
bqh6gPKbNf9uygcqX8D3ZeWDlC/k+7Lywcpv4fuy8iHKb+X7svKhym/j+7Ly
Ycpv5/uy8uHK7+D7svITlN/J92XlJyq/i+/Lykcov5vvy8pHKr+H78vKT1J+
L9+XlZ+s/D7+HKD8FOX3Kz9M+anKFyk/XPko5Q8o76R8tPKaqtj/O9UW6/jR
qk9T/pDyLspPZ4821L4oH8s9q43zWlVXBUd3qDWqCnbuUqvi36uKv511rLYq
OLobrsTnepqrp45tUhUc3au2aVVwdJ9aXVVwdL9afVVwtEitcVVw9IDaZlXB
0YNq/6sKjharbV4VHD2ktkVVcPSw2pZVwdEjaltVBUdL1LauCo4eVdumKt6P
x9S2rQqOlsKh7nc71ZfBofLuyi9X3q2xnkEMVejYTXzH1/H+Ot4LDtWuUH6g
1qC38l3U+qjtqjZdx/sq7q42Q/keilcpPqu2cVW8Z/fwbJrzSNVjlO+jOFtx
JX30OfiJ4qdq++n4XMVVavsrv1rxBa6r/BrFF9VaKb9WcbVaG+XzFF9Sa6f8
OsWX1Q5WPl/xFbVDlF+v+KpaB+U3KL6m1lH5jYqvqx2h/CbFN9Q6K79Z8U21
o5QvUHxL7RjlCxXfVuuq/BbFd9T68V6r3ar8fd4HM/WZWYCBD80UTH7kCFcf
O8LSJ473eC3u8fjPPQf8fOC5mesLH4OlYVWx3n+qfWWmYOlrR1j6xhGWvnWE
pe8cYel7R1j6wRGWfnSEpZ8cYakgVo7XtZcpLyrvr/xx5d3F0uZiqaRjf+od
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
v8MpPqv4tfpsW4r9/lltoI6v4Duz8kHKV/IdXvlWpZSjVppngM49p3MblGKd
eFeer4o+W+rYhqU4xjNsV4q516htX4rIWmxTip+1XHvrUsxNvXEp7p1n29HM
wVpbXXeYrru6Ktb4D+8ha/2nmdq7FHsMC7uUgjn67V6K87C2RykizO5VCrZg
qmkpIuOblOI8DDZTni8FU80d4WVfR/hqXQpuWI8WpWACRvZ3hNMDS8ETHO3n
cfTbsxTX4T4OcF/6HVQKVmCkjedmXds6wkgrc8a1W3pu6p1L8e7x/O3cl7l2
KsVacu7QUrDCendwhKkTtcav8N1b+SGlYI5+g3V8FX/+Uz5E+QvK65QPV/4S
f7et/GDt0QmqX1Y9UOxNFntD+e8raq/yHZ73pioY4TPlmFLk8HVcKfabe+xa
CiZg5FhHOO1eCp7gqIvH0e9grxPvSjf3pV97H+MZenlu1qa3I4z0LMX7ybV7
eO4dzOkyf5b1cd9dzfJSnxtgVtjDgY4wdaL3GBb6l4I5+g3yeVgb7Aizw80W
TJ3gyPihavuUgsERng+mRjrCy0mO8HW6uWE9TjETMHKqI5yONk9wdLLH0W+Y
r8N9jHJf+p1ZClZgZKznZl3HOcLIaaXgjGuP8dzUx5fi3eP5z3Bf5prhdWH9
DhUzp4iPt8TFqYpvK3bS8UneY1iYKY5O1rk3da6j+o9S/o7y0Yrv8r1dfS4o
pUxd6Mj4MerzHn9mV36R54Opix3hZbIjfF1Ris/xfmqXmgkYmeIIp5ebJzi6
xOPoN1LXel3XOkz5Ze5Lv0F6F2boGU7i78g8N2sz3ZG1mFYKzrj2VM/dx313
8zpe5TWDtUf8PDzHXLPCHl7tCFM3eI9hYY7aEPe7xudh7VpHmJ1fCrZg6npH
xs/zeRi80fPB1E2O8HKzI3ydpuf8QOtwlvKFZgJGbnGE09vMExwt8Dj6Xefr
cB+3ui/9ztCcn2jOc5UP1nper/U8nT/HK45V/Ejn7jBnMHu756aeVYp3j3eu
k/gZp/4fq/9MryXnvqiK7zgPqD1YihymHvMew8LZGvc53+GVL/Z5WHvIEWaX
eE9g6lFHxj/s8+zZUs8HU8sc4eVxR/h6zvvNPT5pJmDkKUc4XV4KnuDoCY+j
31F6xjN1r5/qXp92X/qdpWOf8ecO5Ss8N2vzvNpsM/JsKd5Prv2M56Ze5t8D
zZ+ZV7kv3L1YCuZg6mWzwh6+4ghTb3uPYeGlUjBHv1d9HtZec4TZN80WTL3l
yPjXfR4G3/F8MPWuI7y85whf3bQO5+mZv9Mzf2AmYGS8jn2pY3cqv0v8nKv6
a9Xvexz93vB1uI9WjfRnPfX5Sn2++v+M6Nj3fCeHBeU/8B1e+UTl3yq/V3kX
3cME1d+onqe4Af9evlLfdapini/VKipjXVi/78wK7/f3jjD1q/cYFr41c/T7
wedh7UdHmF1jtmDqF0fG/+TzMPib54OptY7w8rsjfGV1by94n/80EzDylyOc
rlNbaY7+8Dj6fe114l35233h7hsf4xlylTH3arV8ZUTWAgEOnHHtfz039c++
d55tvcpYM1jbqTKeh+eorAxW2MNyZUSYalgZewwLpcpgjn7rV8Z5WKuqjAiz
G1YGWzC1UWVExjeojPMweKH29Cft5YfKW/NvulX/zJ+vxNVFytfw3agyuGE9
JuvYrzr2qfLeYuMS1b+pnqL4O9//dbynjl+s+he+Y1fGdbiPS3VsLd/zlW9Z
GazAyP8qY27WdfPKiDDSuDL44tp/VEVer2PFynj3eP4tKqMvcxUqYy05t21l
sMJ6b1cZEaZ2rYw9hoVtKoM5+m1fGedhbYfKiDC7c2XsCUztUhmR8TtWxnn2
bLfKmA+mdq+MCC9NlP9jvvatjP3mHveqDCZgpGllRDjdpzJ4gqM9K2Mc/baq
jHXiXdnbfem3dWUc4xn289ysTQtHGGleGe8n127muakP4v8x1n5syO+PdF+4
O7AymIOp1pXBCnvYxhGmrtC4ddqPjZW3qgzm6NfW52GtnSPMPi2WpmrM3xrT
T2xMU/4P/71W8U/FavUZoONXqv5X9fQNM/+JozbV8RnKs/w+cOXHVAY3rMcR
lcECjHRyhNMjK4MnOMo1iD6Hc//8/+Ga6y/N39l96XeKWks/RxfPzbp2dYSR
oyuDM659lOemPtXjWKdj3RfuulcGczDVszJ4gpfjHHnXeznCV29H+OrjCKd9
HeGrnyN89VfbozL4GuAILwMd4auHr8+1B/kYrA2pDIZgbZiZgJHhjnA62H3p
N9R96dfNz8ezneC+cDeiMpiDo5GOB6id5AhTJzuy1id6XAufhzuYG+W1hLWZ
fh7u/SrtW57fO6m8Lf92SXWF6vUbxN6OVxtTGfzB3WrxNkt91uN3d4mr2coL
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
FrQ3T4vz/Mj8SKbrgg7nM95Wo/0dUsWCJufpUf9jM6+NPiPn8rzjQ5+Tc/7D
MbIPo0FKDHMdI/swmov3ZXq/uS6b+/OX7xePV/SeoWv8FDoJJek/PpkpFrQf
14+4XjDvnCoWdCDPiPP81PxspnjQhHzF2w3Rm0oVC/qQZ0b9z8wzM8WDVuTr
3qIVyTmjG0lMG5kbupFoSPL/jc3o/6FTiaYeenqHmtEb/MT3E///MJO+4FHB
L2aKBR3CTSOu/5n3TBULmoRnxXl+bn41Uzwcv3eq8+/q1+N9of2zo/4XLi/G
NdwgvvNUyXXJpF94jM+51TEeY25oGOYc47FmtOjQ90PnD93Iq4vi8S7Lu5w4
0cgj7lJefHOLxpKir8NSrKmL80n8f+qhqfd2ptjR4ls//l/Oi9HZS9zOvqmu
Azp7H7pf0B/R8aP+LehEZbq+aO7x3Y7t5ChfuiadPq7D/qmuD1pzb2R6v7ku
/L6MPzpzj59lul5o9JHffHteOc7L1qRVV/f16vD1XDQvRrtvuZo0/hbxtevm
uovlxXf5OI65w/9fzMeirYguHto6Q+M6LJ7XPn8wenlos6HVNr812NBlq5qX
yksrDD22pVy+fE26bEuTD1eRFhu8ak36aMuTC1eR/toywSvXpL+2LPlwFWmu
wWitLZeX3hr6ajA6crMr0lOjnRVr0nejndVr0lZbIS+dsJ556Wiho7ZivlMv
DUY/rRbHnZhKLw39s5Xz0r/62kxcPWrSQVuF3LmKdNDgnjXpoK1KDlxFOmjw
mjXpoK1GrltFOmgw+mer5zs10FZ3XL1r0izrQW5bRTpocN+adNDW4DpUpIMG
D6hJp2ytvPTPejoudM565aUT9ouZWPrVpHe2Zux/UJHeGfxKRTqHXKuta9KK
2oL3uCqtKPjTivTOeuelc9Yn36l11sexrFuT3lnf2P+8Ir0zeHBNemf9gr+s
SO8MRuesf75T26y/3yP0zAbkpff1j5lY1qtJ12wg71FFumbwkJp0zdYO/rYi
XTN4/Zp0zdYJ/r4ifTQYLa5189LjQntsPZ/DhjXpmg3ielakawZvVJOu2eDg
XyrSNYMX8LGfWbdsSF5aVR9XpBnH+7Kgy4lly5r0vIbH/q8V6Zetz3tfk37Z
BsG/VaRfBm9Sk37ZhlzzivTLYHTLhuY7tcuGOpbhNekDbsS1rUi/DN68Jv2y
jYP/rki/DEa3bFi+U/NsmGNBn2yTvPS9imbi2qImnbJNY/+finTK4LVr0sWj
b/xbkU4ZMY6oSadss+B5FemUweiTbZ7v1Cjb3LFsXJO+G9cEDbF13ce2qUmn
bMvYX6IqPaPD89InG5Hv1CQb4VjQIdsqL52uzEws29akR7Z17DdXpUcGb1eT
HtlI3q+q9Mjg7WvSI9smeKGqtPBgdHe2zUt7B/2TbR3LjjXpkW0X+61V6ZHB
O9ekR7Y917wqPTIYHbId8tLpKlSlF7ZzXnpjO+alN7W4mVh2qUl3bKfYz1el
OwbvWpPuGMfuVpPW2C556Znt4OtTrEp3jPJ9a9Lh2icvzbFdHcseNWmE7cZ7
VJXuGLxXTbpju/M+VaU7BqM3tke+U6tsD8eCrtieeelyrWAmllE16YvtxXtX
lb4YvHdN+mKjgqtV6YvBo2vSF9ub97UqfTEYXbHR+U5tMfhWa4Dtn5cuVr0q
fTFiRFds37x0t1YzTzbvl+/UEtvPsaDHtqvbPKYmDaYzYr+pKo08+mFHVTpi
BwTvX5OO2IHBi1SlIwYfUJOO2EHB3arSI4PRvjo4L/0rtKEOdiwH1aQjNoY+
UJWOGIx+2CF56Wv1MRMLPDbfqRk21rGgE3ZoXjpR/c1ck4Nr0gs7LPYXr0ov
DB5Tk14Y99QyVel8HRV8SE16YUcEL1mVXhiMTtiR+U6tsCMdy6E16TVzLNpg
R+elnbWG3xf6wyCXl6yPdWpe+lHohB3jWNADOzYvPa0hZmI5rCZdsOPoe1Xp
gsGH16QLdnzwE6l0weAjatIFOyF4uap0wWD0wE7Md2qCnehYjqpJF+yk2F+x
Kl0wGD2wk/PSy9rYPMh8Sr5TAwxGE2y/mvTm6BubOkZiObom/a/TYn+lqvS/
4N0q0v86PfjZVPpf8CBfE9rkt2e+H/JbMd/t+G7I9ze0v850LMfVpMF0Vuyv
VpX+F4zu19l56WKNMI81j8t3an2Ncyzoe52Tl77TSDPv0fE16XydG/urV6Xz
BY+qSOfrvOAXUul8wSfUpPN1fnCPqnS+YPS9Lsh3anzBaOidVJMm14V56Utd
7HNA3+uivPSvdjTfaB6f79QGG+9Ydvax6GCdXJOG14TY71WVdhjtr1mVnhfl
Z9Skb3UNr5dKz+uS4FNq0vO6NHitqvS8YHS8Lst3anld5lhOq0nP6/LY71uV
nheMjtcVeelc7WUmFvjKfKd215WOBb2uq/LSsxptJpbTa9Ltujr2+1Wl2wUf
XJFu18TgN1PpdsHobF2Xlw5V/6r0v4gRralJeelNocU0ybGcVZNu17Xc41Xp
dsH7VaR3xjU5tSINo0eDv06lYQSj0XW9Y0GX64a8nlnGmInl7Jr0uW7kfqtK
nws+rCJ9rpsYB1Ppc8HjatLnupnxpCp9LhhdrlvyndpctziWc2vSv7s19ter
Sp8LRpfrtrx0q44w9zdPzndqesEDrL/FMxf6VetXpZ91V+yfV5MO1x3BQ6rS
4YKPrkiH687gj1LpcMHn16TDxbFobt2dl+7WgX5fWq3BdbdjQXdqWl66TEOr
0uG6Jy/9rXvz0qc60XyAeUq+U3NrimNBZ+u+vHSoTjETy0U16W3dz5hWld4W
fEJFelsPBM9JpbcFj69Jb+vB4I2r8viEJ9S0xuUhxreqdLVg9LSm5qU3dZb5
Gsd7va/t2Y5xknWzHs5LN+kcM+d8SU36WY/E/vCq9LPgC2vSKeOarFyVFief
y5fVpJ/1WF6aK2itoNNyRU2aVtMZA6vSyYLRx3o8L/2oi8ycM/xEvlNb6wm/
F+hgPZmXvsQEM+d8ZU16WE/F/oiq9LDgMyvSw3o6+IdUeljw1TXpYc0IHlmV
HhY8sSbdq2cYG6vSvYLRu3o2L22HsWVpXaG9cFZFOle9mqQF8ZzroIP1vOtc
bW52+UzXoXyW61zp9rkO17gcLSx0ktBIQh8JHSa0rtCqQqPoRfP1ZjSp0Kl6
yXyjGe0p9KheNt9sRmMK3anZ5lvNaEmhL/WKebIZzSh0pF4132FGJwrtqNfM
d5nRgEID6XXzPWZiQW8J3SU0mqY4RjSd0Hl603y/Ge0m9JzeMj9o5thJviZc
K/Rf+fzl82uzqrTb6IdoMqHThOYSGmDvmB81o62E3tK75ulmNJTQVXrP/IQZ
rST0k943P2VGEwmdpA/MM8xoH6Fd9GFe+kXwRy5/1kw5GkhoH21CzmybGE0k
tI4+Mf/eJuaeQkMI7SB0h/5s072GxhHaRZ+Z/2kTo2WERtEcc5dEzLELWIMI
PaKpfl/Qs0Jz6AuXL24dGzRt0BZCYwg9ohbrFG1lnZivzAtbRwhNIbSCvjYX
rReEdhCaQN+YE+sCoRGE9s+35or1f9ACQuPnO3NmnR80f9Dy+d7cYT0ftH3Q
7/nBvKg1fNACQofmR/M09w3iRYPnJ8e4lHV40ORBa+dn87LW20F7B02dX8wL
WpeJa4JXHJ5MeDStbF0gtHQOrUoDAv0H9HJ+d/mRZTF6INfWpGnzV146Or95
rBtXkZbOH8RTVa4+fF5Fmjl/Bv+SSh8HPqci7Rza3KkqHRza/D1VOTo5aOH8
nZcezjrWRTk5+LdUujTHB/dOxCdQv01aNHBf69KcGDzAujQnkftsPZlTg+ez
5gxtDjafEvxvm16L+ujtcA5oDzb5WOosZP0Z2tnfWisXBg+z/szpwXlrzsDb
WDfm7OBW1zkteLjrnBFcshYNvJX1Z84KrvpYeAvXOTO4Zi0d2tzePC54EWvO
wMtZH+b84MWsOXNO8K7mc4P3sHbNebwXPpY6f7XpunENl3Ad6g917Jz/Pm7/
guAVfR3gUdYh4XWXNtP+i9F/zkmk0bCKtWi4bqtZZ+ai4EPMaMhcV5OXSsLa
5qp0YWD0YNKCNGHQfoHpJ9fXpCFTjv29q9KCgdF+qRSUh47GC4wm0gTm1irS
dtkn6i5QFqP70l5QnjUaLzBaSVcw51aRtsu+3C9l8a3xupdVpO1yQJTvXxXf
E+XHJ9JMOTjKDqpKz+UOvl8l0m0ZG2WHVMV3RflxiTRZDo+yw6rio2J7ZFXt
pO4b9IEpUf+ERBorl8b/L6lKv+P+KD8xkZbKCVF2fFX8IN+XEmmmnMwza1U8
NcpPTqSNclqUnVoVPxzlpyTSLjkzys6oih+N8lMTaZ2Mi7Kzq+LpfM9JpNlx
XpSdWxU/EeWnJ9IuuTDKLqiKn4ryMxJplFwcZeOr4hlRfmaiWA5yP6FvPBvl
ZyXSHLmCZ6aq+PkoPzuRtsjVUXZVVTwryscl0hM5NsqOqepaTWJOr6ry62N7
XVV9sqGpgc7G1RVpf6wc+69EO+cl0v6YEnXvrUqz46bY3liVhsitsV3IWiGT
4tiu1gS5m3mqqrQ/3mD+M9GxtzM/VlWdt6J83UR6Og8wL1QVv80cXSK9j4+Z
m02kzfEu82OJ9D4eYZ6zKp4e28eq0g2Zynftqo59jXnLROfwfvBGierMCd46
kX7HjKj7dFXtf8r8TyK9jyej7ImqtEI+ZL4iEb8cfG6i2J+L/z9bVf1/o/yo
RJoRXwXvkEjv45X4/+yq+Kco3zuRTsdLPO9XpRXyDfMeiXRAXo+y16riH5hX
TKT38Q7Pg1Xxd1G+WyJ9kPd57quqzV+ifN9Eeh8fRdmHVfE3sf26Kt2NT2P7
SVXaH3/wuZZI7+PP4LGJ8jZ/4zk6UZ1ZzGNUda0+j+2cqup/wVxTovP/J/iC
Nml0fBv/z5fFf0f5zLJe9yueU6pqf3KUH5NoTPg1yn6p6rr1j8/hftbH+ZvP
xqo0L5rrMUZZ52Lh+H/OOjjzR9n1FdXpEmXzqqrTNcoXtP5F1yhfyBpPhShb
2DoXTVG2gLWi2qKsaJ2LUpQVrdlUjrLEOhfdY7uoNSnaY1uxzkUWddutwbRI
bDusr1SObWotp1zUbbHuRj22mbUwlontUtatWCrqLmkNpiWjbHFrNHSPssWs
wdQtyjqsl/FHxPp7VVohy8X/l7WOEj/6HZ2ofKXgFaxz0TP+v4a1jXpH2ZrW
p1gtyla1RtKqUbay9S96R9la1jbqFWVrWOdinShb23o6PaJsNetirBdlg609
1C/K+ljnYsMo28AaQ5ck0rJA52dolFWtJdTQD/qkqVMnCB2hgdFGf2thrBT1
V7T204WJ6lNn+fj/stb4QCtoF7d/eSJmTGtoDKE7ND5R+zC5UOREkXN3VaIx
EE2haxJpXKAjhIbQ7ubrEjGaQuji7GG+MRGjk9PQD4JvScToCDX0g+DJiRgd
oYZ+EHxnIkZHqKEfBN+TiNERaugHwfclYnSEGvpB8IOJGB2hhn4Q/FQifQD0
fxr6QWgKPZqI0RFCP2h/8+OJGH2khn4Q3NAMop1pidqnnWcSlaMjtAn93VoM
zyfSuEBbkpzwg80vJGL0ghp6QPDLiRhdoCvapEeBZsUH1qZAs2KdaHvtujQm
Nol+8VoiHsR68rq0KoZHeb0sXi/KBtelMbEl95m1cjaIsiHWmBjJ/WGtnI3Q
27HGxPb0a2vlbM39am2InaNsJ2vlbMY4YY2J3aNsN2vlbMn9ao2JUVG2l7Vy
0Fc6yNdqfPz/oUT5/I/H/6e3iw+M7QHWytmB+9UaE4dE2Rhr5ewcZTtaY+Jw
YrLmzm5Rtos1Jo7mXKyBsmeU7W6NieNpw1o5e0fZXtaYOBmdHGvl7Btlo62P
cDr6NtbKOSDK9rPGxNlRdpa1cg6OsgOtMXFelJ1rrZyxUTbGGhMToqy79VMO
472qS2PioihfpCw+gvekLo2Ji6O8W1l8FH2qrmNvjbF/8bK0JPaNOvtYR+my
2F7arvJzo+5diTQXroqyK9ulK3EcOgmJtFquibKJ7eIT0D1IpCVxXZRd2y4+
CR2DRFoSN6K/0S4+JconJdKkuAW9kXbxaXw2JdKSmIx+SLv4jCi/KZGWxJ3o
nLSLz4ryWxNpSdyDTki7eFyU355IS+K+KJvSLt6WcbquvvFglD3QrhjPj7J7
E2lJTIuyqe3iC6P8/kRaEo9G2SPt4mPQnUh0Td6Kz5M3q/peMSHKH06kJUHu
OPnk5IxfGuWPJdKSeCbamNEuvjzKn0ikJfF8lD3XLr4yyp9OrCURZbPaxVdH
+bOJtCRejrKX2sXXRPnMRLnTr0bZK+3ia6P8xURaEm9E2evt4uujfHYiLYm3
ouzNdvFt0Te+sNbDu3w+mr+zzsPKEcsnUb6C9Wgm87tBm7QbPozyD9rFN0b7
P5el3fBxlH3ULr6J96WiY+9ibrsivYa13D6aOZ/xmVVW+bSoP7VujYMofyeR
jsNtvO91aTd8GeXvJeLbo2xyXdoNX3M+ifjOKLujLu2GbzmfRHw3/bwu7Ybv
o/yTRHxvlN1Tl3bDj1H+WSK+L8qm1KXd8HOUf56IH6Cf1KXd8GuUf5mIH4qy
B+vSbvg9yr9OxI9H2fS69ALmRvm3iWJ8hP5Tl3bDX1H+fSJ+LMoerUu74Z8o
/zER30KsdV2ThpYfn8VPRZ0n29UP52O9ZCIdh6ej7lN1aTcsEOUrlcXPRNmM
urQbmqJ8FWvZPEtZRdoNzVG+mrVsnovyByrSbujK2r1MPJMxuSK9hpYo62n9
moZmDbntP5nRZGjo1MC/mNGrQZ9mmvlXM5oMDZ0aeK51FtBSaOjUcK/9bkbb
Aa2aR81/mNFkeMLHwg1tGtqZF9fsp0Tvy58uR5OhoeeCjgHaDOg1oMnQ0KmB
/zajydDQqYH/MaPJ0NCpgf81o8nQ0KmB55nRZGjo1MBoM8BoMjR0amC0GWA0
GdCpedaMTgOMJkNDpwZGm+E5x/Ik409dfQNtBmJEkwGdmplmdBpg9EDIiZ9l
RpsBJi++oePDtWpo1lDe0KnhuyLrA/EDZk1gv7K0E3aN8paKNBNg9AzQOEAP
YaGK6pDPjo4CddBPaGjBwOgioJVwtPvJq2b0FahD3jrj8GtuE40E+Fj3k9fN
vKdoGZzofoI+AtoI6CLA6CGghYA+AhoI6AS87jr0W87hKPfJN12f9x29A7QO
0EWg/ZPcT942o6Pwll+X/vaW23+lrnzapqK0E952O49WlLt/ofsJ+ghoI6CL
AJ/m9xddAzQN0FF413XoP++7zqLm091P0EdAG6G7+Uz3qw9cZ3G3SS4//eRj
8xJm9BBKmfQL5hSki4BWwjj3k0/NPDugiXCO+9UnPhYdCK4V+g9Luf45vkfe
dflLdWkifB775UyaCPALdfn+8rpLu31ybBfz+RPXgLKu20XNymkmD5ycbvQM
vnI/oc+ga0AeMboCaA1c6nLqkEe8iutc7GO/MaNbQN4+Ofs9fCy8quugb4Am
wfdus5cZnQG0B34wk8dPDj/5+2gMoC+AtkAfM7oBaAagI8Ca3rV8LHVW8znw
Wn1dh/rk7pO3T87+2m6ffH80AH41swbkZ79ufzPtk2f9pa/Juq5PO7mKyrme
5O6TY09+/QZm8vHJiScfnlx48v5/dx1y9+e6zlAz+fjk3P/l92UTM8du5PeL
OsPdJvny5ND/Y97cTF48fWD+ovK4yY8nZ578d/Lj55nJd+9SVM77Fq7DsYN9
rdAr2Mr1yYVfz+dP+TZu/1zzAkXlOJNjPp/b3NrMsWh9MAai70GuPPXR/dgm
U25kn6Jy0BcsduY3L+jzJ4e8tag89I5M+fPNRdVZqKg8aHLTF/I5vFVXLnoL
XqGZctHhN+rKXe9aVE46bZJr/3Zdueg5/Dsz5VrD5IUX3T555wsXlYcO54vK
0Sa/vFBU/vUo1yGne7FMufG81mjXJ1d9xUw55G2x/25dOeel4OUy5ZzD5Kbz
uks7T73ga/JaXToCxP5+XXnptEMe86JF5eCukimXPi0q17xcVC42ueDtbvPD
unLUqXOw63DOcKWoHG1yeauOC+bYkc5Hrzj2j+vKLc9if/VMueXwp3XllteK
yv/uVlR+NDnl9WJnXjlM7vxamfLJO2K/Z6ZcdI4ltz5xnTl15Z9Th1z7xP3h
aLe/onPHuQ5nOO98Ecd+pJnc7SyTLkOTr9tiReVk/1ZXHvLqsf9VXTnkiwcP
yJRDDpPzvXRROdF9M+Wcdy8qt3yJovLTyTFfwjGSI71UsTNffCmfwzd15Zwv
WVS++NK+PuSIL1PszAtfxrGQ072C2ydHfFmf83d15YovF/s/1JUfvnxRx1KH
XNt1MuVs81qDM+WTU58875V8bj/VlSu+YuwPzZQDD5NTzuuSV75+ppxz2v+i
rtx7Yj/b7ZBnTV7+Yu4n5Piu4ljgVYvKpSaPu4fbPNd1yH0mR3xVn/MvdeWK
rxb7wzPlhPO+kAvOseSDD8uUQ06dP+rKCV8Df8RMOeEwueA9i8qV/rOuPO3e
ReWC9yp25n/DjzvPe02fz8U+tpETv7LrXOI65E2f43L6w1aZcr9p/++6cr8Z
08gRX6vYmUcOk3t9AfO9Zc1pkBPet6i8cvLQTioql43c5v7Fzjzv/o6lS4dy
s9eJ/e0z5UL3K6rOgGJn/vcAx0hu99pF5WOR2722z4Fc8IFF5WftlCnHmzbn
71CO97qMyZlyvGFyr4e4ffK7B/mcmzqU4z24qHzu9YrKdyYXnDojnF8+0Ndt
j0z57dQnJ3sDnxs5i+sXO/O21/e53eTXHWlez9dk2Q7lZB5UVH3aOdm5yCOK
yk3eJ1Mu99Cicrg3KiqPm3zrTdxm1w7lflOH/O6NfM6tHcrx3riovO1hjusu
H0uO8/6Zcr+pQ672psXOXOpNHQs8vKhc51KH8qu3jP2FO5SzvRljdaacbfiQ
THnamxeV2z3ccS3Yodz1DWO/0KG8buqMypTHTvlhmXKSaf9BXwdymcn13sKx
k/sNkz9+p+M6w9dtq6JynMnxHVWUtyM52SOLylUlJ3ukY6l2KKd6+6LqbO3Y
kw7lbG8T+0dmytmGycnertiZl72dz6HcoVzubekPmXLOaZOc7B2KnXnYOziW
kzLlS+9SVB72jj5n8oZ3KnbmW+9cVL7yE65DjvMxmXLFea2nXZ/cW/Kpd/O5
1TuUg71r7J+aKQcbzjqUs83rksO9s6/JNMdOO+Rn0w452lN9Pc907vUejgXe
s6jc5LMz5UjvXVSuNnUWdR72nj5ncq/3Kip3mRzrUY5r0Q7lWnPsi65D7N07
lGs9mvE9U641TK71PkXla5P3fEBRuc9LdCjXet/YvyBTLjFMLvV+Ph9ytPdx
XIt0KOd896LyjalDnvIZmfLPKSeX+gCf89Idyqk+sKg87P2LnXnbMLnM/9al
f8E4NiFT3jX10cro6zGfXOoxxc586jGOhTz7w4rKBb4iUw72wbG/YodyrQ9h
bMyUQw6TS31osTN/+lCfA7nXY4vKTSZn+jBfn5U7lL96eOxflyl3Gr4tU57z
0cE3ZMqdPiJ49Q7lTh9ZVJ70UUXlSq/aoVzrI3wOY33dbs6UX0198p6P9bmR
M31MsTNP+hif2xodyrXmdcm/PsrXZPkO5aIT+xy3Q94xOb9nFfWZckemHOnj
Y3+tDuVInxB8f6bc3ZODe3Uo/5k6d2XKnaZOnw7lTp9YVK70SY6rX4dypDn2
3kw51dQhB/iUYmc+9CmOBT61qNzhdTuUt3xmUTnQpxWV+/mTmTzohzLlP59e
VP70qY6LXPDjXGdAh/KlqfOly+kPj2bKhaZ9cqC5DuRBT8uUO31G7K/doZxq
+NJMuf18pgzuUI702UXl0V5VVL4nOdDnFDvzns9xLEM7lKt8QVF1xjl28nfP
LSqH9y8zMW7QoZzn82N/RqacZ3hIh3Kkzwt+LlPOM22S63xhsTPf+ULHQv7x
BLc/K1PO80VF5TqPL3bmN19cVP7vxh3KkabOU5lysHmt+VyfnOjZmXKVL439
TTqkHXBJ8EuZcpvhBfy6hzlP+mJfk98dO+0M71D+M+08nil/nutJjvPljmXL
DuU2X1FU7vDEovKCyYWmDvnUb2bK6aUOOb1XFpWfm/P7Qlwz4hwHl5XH3Oo6
xF50m5zniA7lKV8T++9kyk+G52TKDb4++P1MOcmTuP4V5VlfW1TO8XVF5R0/
W1E+M3U271Au92XBH2fKVab+a5nyuiknp+SGovJKOsyc//MVadfwuuQvX+d4
WZuKvw/eoN08Z0jfeyv+bi4qZ/akVDw0uBLt3GI+JRVvxNKGKL+V69NFubHw
sOBr43xvM19v3gS596g/mXG1i3J74eHO1b29qFzX01Px0XwVZc2++cxUfExw
N37X4Jy7KKcVJo/1hnitu8w3mY8PXiLqTwm+s4tyV+8uKl+VHNt7ispRHZeK
bw/uHvXvNZ+biu/oovxT2iG3cdGK2jkh+OZ4rftcfnnUf5R7cL74XGJen3Gs
i3JO4XudG/tAUbmlF6TiD4KXZl7ffFEq/jB42Sh/yHxxKv6IHO0on2omtxQm
n/Q29ADNt5s/CV4h6j/MWN1FOaTwZ12U6/pIUbmil6bituCVKooFvgvdOfpp
8CpR/phjvDIVp+TlRfl0M7miMPmhd/hY+FZfq7vjdafFse8GL8wa7Dj2PTO5
q08Wlfs5MRUPDl6DNfvmSal4veBerNk3X5eKhwSvFeUzzOR+wuR73s2affO9
5g2Ce0f9Z+n/8ynHEx7qXNTnisrlvDEVHxrcN+o/b745FR8W3D/KZ5pvTcWH
Oyf0paJyKslVnFVU/uYUNKzM95uPDF472nmR+2I+5WzC5Gnenqqdm8h/jDpP
MFYHr8s8v8sfRgcm+L3gwVE+m3GP2FPxLcFDovwVM7mZMLmTD6BlZH7IfFvw
+lH/tWJnDiZ8u3NFXy8qT/DeVPy/4A2j/hvm+1Lx28EbRfmb5gdS8TvBw6L8
LTO5ljD5lVMdC0zuMPG2+xzeLnbmVMLkUZK3+E5RuZMPpeJc8KYV9Tf4zlTX
imsysKL3gvfokVT9MB91xkT5/KVoewHlTr5fVL7kI2i2mB8zF53j+WFROZKD
zG3O5fyoqFzIx1LxAPL4ov2PzY+n4oHk8UX5J+YnU/HawdtE+admciFh8h+n
s27f/KR5XZ/DnGJnziNMTuJO0c5XwQcHPx3tfx58YPB2/PZhfiYVH0QeH3PR
5hltYo4lh4J2xjjfk3bIl3wq6nzt8tnRzi/Br/kcvil25jDC5C2Sa/ltUbmK
z6fiScG7xOt+Z56Viq/l3KL9782zzNcF7x71fzCTqwiT3/F81PnR/JL5Bp/D
T8XOnET4JudO/lxUDuNLqfjV4D0rigV+Pdr5PfjN4BeCf3WMr5hfJx8w6v9m
JvcQJt/wZR8LP+drdUjwV8w9Rn97MfrbFhX1N/ohOZVzi8olfC0VNwfvE3X+
NL+RihcMfjXa/Mv8lnmh4P2j/t9mcglh8gffiDr/mN8xtzjn8d+i8t0ONOec
2zivqNzA/6XitagT7Xcpid9Jxb2pE23OZ37f3Mc5hs0l5RuSG8i9Rj7gu1Fn
AfNH5n4+h6ZSZw4gTG7a+6naGb2A3sc/isrTHMuaYZd/E+0UgycGfxC8EHn0
wZ+a9w0+nHXCZvL+YPL7Pma+3/y5eX+fQ2upM6cPJo8P7ZdcSbl7n6TiK8hV
jPYXNn+Wiq+Eo828+SvzVcHHRP2C+fRWMXmIXziWq/0eES/5p5xDqaTcvbPM
k5xL2FZSjt4XqfgFYqyov8EfprpWXBM8qo4raS0f3lvHBy/RHO1H/XLwS1Hn
/Fbxy/SHsnSz4R/axLN9DtVSZ44e/KpzBttLysX7NhXPI/+Rtfzm71NxlziH
75nvN/9kni94X3QZg+cP/qVNvECTXqujpPy4K83k05EDiOf0f37UqXj14LUS
+dWSs/BzKl/LHnCb/KPhHol4DXJMyvJ9Jg9lzURMTt+RbmdU8OkVtUP7eD3j
Y0uOA3ltK5SU40bu3hJc8ybl68G9zUvSD5uUrwc3cveWoh82KV8PbuTuLU2f
bFK+HtzI3VuG/tmkfD24kbu3LH21Sfl6cCN3b7ngg5qUrwc3cveWDz64Sfl6
cCN3j1jGNCnPbuWScu6IccXgQ5qUrweva14peGyT8vXgRu4exx4afElF14r8
DjzoNywp7wk/36HcI03KO1s1+PAm5evBQ8yrBR/RpHw9uJG7t3pJ/vXTzY3c
vR4lPQc9YW7k7q0RfHST8vXgRu5ez+BjmpSvB5O71zXOrVdJuU6/mcm/awle
s6ScnblmcvFag9cqKafpbzP5dwXmqErK5ZkX3Luk/LuFme8vKddp/kRMLl4+
yvuWlPfUnIjJv+uaqJ0Rfl9WCT6sSX70/UvKgcILfkhJeWqlKB9QUq5TIRGT
f9cW5QNLym1pS8T/5d9F+dol5UCVEzH5d2mUr1NSDlR7Iib/rsx8f0k5UPVE
TP5dJcoHlZTf1C0Rk39XZb6/pPym7omY/Lv2KF+vpNylJRMx+XdZm2I5332D
eMn3xON+/ZJyoPCyh8m/w8t+g5JynVZKxOj/41lPfyO3JZfoWpGf+DW/Z5b0
uYw39FDfs3h8HxD8ZJM8oDfyPYsH9MaMz03yet7Y9yxez8OCJzbJT3yY71n8
xDdh3G6Sd/Mmvmfxbt6UMbxJHs2b+p7Fo3l48LVN8mIe7nsWL+bNgq9rkufy
Zr5n8VzePPj6Jnkrb+57Fh/kLYJvaJKH8ha+Z/Es3jr4lib5Jm/pexav5BHB
NzXJE3mE71k8kbcKvrlJ3sdbub/ha7y171N8mWnnxiZ5HI8MvrVJXvO7lJT3
h5fxNsG3NcmLeRvfs3gWbxs8uUnexNv6nsWbeLvg25vkLbud71k8iLcPvqNJ
XsPb+57Fa3iH4Dub5CcMHxu8WpTvGHxPcJ9EzL28epTvFHxvcP9EzL3cI8p3
Dp7SJI/4nX0vr9GmWO4L3pg1+b6XezLfH3x/8JBEzL3cK8p3C34geMNEzL28
ZpuOfbBJXs8jPaZ9537I5y++5PS3q6K8d/CewVODN0/E3Mt9onyv4GnBIxIx
93LfKB8V/HDwyETMvdwvyvcOfiR4u0TMvdw/ykcHPxq8YyLmXh4Q5fsEPxa8
SyLmXh4Y5fsGTw/ePRFzL+P/vl/w403yRt/P9/I6Ub5/8BPBoxMx9zK+ugcH
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
7ZjLm9UqHSOYeQDm7ZjLe7FV2jww8wDM2+WCX26VdhHM/AbzdszlvdIqfSOY
eQDm7ZjLe61VmkYw8wDM4TEn+EarNH5g5hOYl2Iu761WaRfBPN8x38Yc3Iet
0jHiWYx5AObtmMt7t1V6RTDzAMzbMZf3fqs0bGDmAdA3oh2e/dGzQ+Pu8lbN
2zGX93Gr9HOYg2D+gXk75vI+bZVeEcw8APN2zOXNaZW+Ecw8APN2zOV90Sod
I5h5AObwmMv7qlUaRTDzAMzbMZf3Tav0jWDmAZi3Yy7vu1ZpHcHMAzCHx1ze
D63SqoGZB2DejnnkxXPSBYKZT2YehViWymkun3iZz2fejrm8ZXLSBYKZ02Pe
jrm85XLSBYKZ02Pejv62Qk76T1wr5knQUkdf/Y8W6d7QD5nTGx311qe/tUgX
iHk95vSYt2Mub7WcdIFg5vSYt2Mur0dOukAwc3rM2zGX1zMnXSCYOT3m25h3
WzMnXSCY+Tfm7ZjL652TLhDMnB7zdszl9c1JFwhmTo85POYE++ekCwQzN8i8
FHN5A3PSO4KZ02O+jTm49XPSBWJejzk95u2YyxuUky4QzJwe83bM5a2XkxYQ
zJweWkC0wzwec4G0s05O83bM5W2Yk04O81/MfTFvx1zevFbp+cDM6TFvx1ze
fDnp/8DM6TFvx1ze/DnpCMHM6TGHx1zeAjnp/8DM6TFvx1xeU056PjBzeszb
MZfXnJP+D8ycHnN4zOUtmJMWEMycHvMxzEMtlJOeD8x8FPN2xNI1Jx0e5uOY
i2Pejrm8lpy0fWDm9Ji3Yy6vNSc9HJg5PebtODaXkyYS14o5T9bd0A/v7qI5
Y/rbKjnN2zGXl89J5wdmTo95O+byCjnl4MPM6TFvx1xeMSf9H5g5PebtmMsr
5aT/AzOnx7wdc+VtOen/wMyZM2/HXF6Sk/4PzJwe83bM5aU5afvAzOm9iGZP
8LMt0vP5j7kOUW9I8HNRvneDmzRfxRzfi6zTK/tei/I3gzcI7p6Tzg88K8qv
if0Ng19okZ4HjKZHVlY7zBMy98l86MI5zQsyV3h6ThoIzK8xt8a8IHOFZ+ak
7QAzZ8i8IHOFZ+Wk7QAzZ8i8IHOFZ+ek7QAzZ8i8IHOF43LSdoCZM2RekLnC
c3LSdoCZM2RekLnCc3PSdoCZM2RekLnC83LSdoCZM2SOkLnC83PSdoCZM2Re
kFguyEkniniZ+2VekLnCC3PSdoCZM2SOkLnCi3LSdoCZM2RekN+Px+ekfcG1
Yk4VnQfK+U2Z74Z8R7w4J40RmO+KzAUyP3hJTnoOMPOEzOExr3dFTjn4zC0y
r8gcIfOGl+ak8wAzf8hcIPODl+ek5wAzT8jcIfOJl+Wk50CbzBMyF8j84JU5
6TnAzBOivbAbY3Kz9ByYK2Se8KvoG7sEv8I9wtx+8MstmjukzlU56UvwWsxb
Lun6KzXb27ZNz+bMHTKfeH1Oeg4w84o/lfW6s1s0X0j7zD2exJxh8IQm5ezR
Dv6/PJuSr8TzKc/r5CryzE7OIXmI+OHyzE0OHc/d5C5SB19dnr+pw7M8uX/k
AOJLy/M6OX08s5M7x7H4uvJ8Tx2e8cmdI4cO/1aeR2GeScltI98Nv1TyrMiD
w4uTnDHy1PBF5Xkd5pmdZ3RyzXhO5/meY3nGx5MYn2K81MkTow5epcxhUM48
Bs/rtM8zOzlaXAd8PHm+JweNZ3xyz2B8S8lRJC68dMmnIq8KP03Wl7MWHQ8v
cpPIV8KPkmd3mLkIcmPIkcH3kOd78gt4xifviHwl/Ch5jod5lieHh3wf/Bx5
dod59icviPwgfCF5DqNNnsXIsSGXB59Entdhntl5tiY/gudrntfJbeGZnZwW
8mXwHySfhBwTPP7IRaEOPobMH/BazCHwTE99nut5/iZHg2dwcjnI78BHj+d1
mGd28i54XXwAee6nfZ79yakgdnxFyeugHTz1mAvhejIf8t/zepue2clDIH8B
3zeem1nbz7MzuRPUwbeO53Xq8MxOHgL5CPi+8XzJ+8IzJvkAHItvGs/x1OFZ
nrX4rPnHp4znbJhnbdaFs94ePzLWebMmHK8r1r6zrh7/L56nYZ6peYZmHTvP
0TyXcyzP5uQ/kAeBHx9r3KmDFxhzFZQzX8FzM+3z7NwTLR/uryY9c7OWmzkE
1m3D+HORl8p8GffRoa4/o0X+Bvgc8LyZi/v9PMbJaKc9J34m6nwX4/NFjJNR
PovfC1x+SvD5rn9+IuZz8zDm+T1uXGDmc3P3nLTynonywxO1SfmeUT6+TZ+z
e5spn8h3vuBZwW/Ea10cPNOfvxNcvz3KL2nTZzHfdanD5++BqV6L8+F3uQlu
Z5+oc3mbPn9nx7GX+dhXEvELrs/r/unzucTHck2Ifbw/xy/3azEnxlpwvnu/
iq5Pm74PvId+T5s+03Px/l0T/GqLjqUOn/sflVWH8fzNRDo8jL3fRvlE+rnH
ZI7ldxx0ea72WL1wpt+KqE+dSW4f/yvWx7M2nnPDh4n16syrXOdyfKXg7z3f
cv3/Y45lHubdsjTI0B/Dc4o6zMnwveUKXyv8nW507Pg6cR2O9+ve4DZ5rRt8
Dqf7M2WGj2Vd+11d5NPCGlzW3+KvxBruu7vo+yTMfA5eRqzzZo03/j+3uBxm
PTpr0Znzuc3l+ByxNv0Tl8Otnhea7PrMBd3R1jkvdKfbx3cIbswLsYZ7Ede5
y+XUYZ03a7ypc48ZbyzqML/EOU92+9S528fiIYO/DvNIeASxPpu12cw1TfFr
4RPE6zIfRZ17XM41ucXXjfr3+VjKb270w6LWWDfmqfDCYa01fjL4yqzlc3jA
5Vx/6jB/hT8Oa7KZ12Iua2pb57zWNL9HtPmQy/GjYS34e67/sNvntVjHzBpm
1hfjvcJ6Y+bBHnU5/jDwOp4fe+z/8SNuB78h1qwz/4YHDXWYQyP2+x0jni60
v4Hn0xjTWKsMT3ebvNZ0l7dmur/4joSfC2uamX9DI5x1OazJYQ0yfiusScZz
BWauDP8U1tQyL8cc3VMeP/EdYO0y65Y5dobrUwcvFtYqowcPM1+HtwvrjK91
O8+5nDqsJ2YtMXN6z7scLxQ8UZgDxEMFLxXm9/BPYY0y84H4rbBWmHXCzBPO
dPvwMz4feJaPZT7wZbeJBwprl2/w677kcvhFnw9ziS/4WPTdWXPGejPOjXZY
b4w/Bz4dYz33yHpl5hXxCmHdMGuGmUtkTTDzivinUIf5SebWXnV9zu01twm/
7vr/eaq0aS0x/JrLOfZNt/+f30mb5if/8zdp03wdfias/WXdL94orBtmzTBz
mP9zfergfbK/23zL5cQy29eW83/b54D3yWyfM3Oe7/pY2nzP7VP/HZfjnwIz
j4oXDHExH4uPCWuXmUfFk4J1rszB0uaHPmf8TGDmS/EfYW0x86jMqX7ga46/
CWua+/nYj1yfOviPsP4WDxKY+VXaZP3xfm7nU5fjXcK6YdYMMwf7mcvx/8AH
hLlW/EnwKWE+Fl8S1i4zf0s5a4hZP8y87hy3D3/c1jnf+7mPZc72a7eJnwhr
lK/y637lcvhLnw9zv1/4WDxiPnBc+JXQzot+T9/3NcGHBj8a5nvxYmCdE/PD
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
kp8drtMFG8F3ettwYHyoEzvBb4vvdEIn2vJ5v5Rz57Ubz4XyM32hHXbnP1Mn
+sd/a+x9Bsbj9tL/wo0+r+rC2f+aOYZiEiZ1YtxWmxh7UPTURuXrlHtysRzD
y0s/i+exBot9qYKfK/YfNcPHvTF5MHyeKfYlS7lEI3K95XwvmfjHzWgrnkGf
S6T/oqVc2ne49NGkK+q3pfjc0ww8NBichbgLcRl+qfwt2wg+15mL/3KN0H+n
A7984t8Nh49+HMc5yF+/vxn+3kHjHcQ/iEeQviF+Q9yGOA5hPIW0Gh0XXyJu
Df3Tor9zOM77bwOh36cfHIauY9EcTxp4tPAGh0LnDrcgXsHXOqFn96OCn+2E
z7mTgneQD608enirJn65E5/L9ZNC005b+4EvdMLnukmhXUfDzp7eW53AN0wK
bkEcg7MNxX2/biO4bffsledGI+Jb3m4E9v39S2k7ZG+6/P/nTrR9aFJoDuJY
xK+4ey/q6cjjXGTHoYg7V/9T+XIb8ZsG49ddJ4+7dy/wzhMjd/OVnEP+s9jW
z9/Ai0t5YSM4/D8t5YaNPl8ujCP336XctBE8t/h1N0iff5Vyo0afRxfGnft5
KTdp9PlyN8m2n5Vy4/TBl6tPHLn/KeVmjT5fLowjF4fSVo3gIsOXu3kjuH+n
KffVFom/XfCWjZgP/LcRPtri7904zwGnLv8DkvcAz7V4Hr+JW+f35U+NwDgW
9LdV9vl+K/43bxE7jY+gl+22ybYXlmf5Po3I37GPu30j9nX/z29rwaYI9krt
jf4p95W3a8Qe7xeHwufZ9N0xsX3WnRux/2k/dZdG7Ivqn4++j8o+Xyl4/tLP
bgXPUnx2bwS2//lZuZf2aoQODps6+7Hm5XukXblnYnulu2fb35fr3DbvvX91
wk9+7ruNsItl0jfNG3o3clFhua7m9HulXQ6s/uWZ2rPZqRH7Np93Ytz4nFLK
YxsxnzQX3a+R+U3l892/EfNS+UbyjuQ6mSvzMU/+dyd8/pFz2AOyH34HNmIe
pdRWvtKn6fPPnN+aa5pnmnMdnP3/27kWvMSEmC8f3og5sw/k642+fg5MF2a6
Yj+0Efo5vxmKtnw+G4pjO+5jQ+GjzwnF/8hG5Hkd1oj+p/EcLH9HFLzThLAd
lseV2wuvOyFyuOj9yPkVV3xE9mMs98378FP77dnPxG5gawFjfHyOzwmlPCrt
x5XymMR4S2BzS2uI49LOBrdK/Qzd6IuPMT8+7XxOSP+jEuuPr8+4OxDfI1xR
1iw+i5PyfPicnH1aZ/CxdpBrYKy+m/aTsq2xOirt5sPmx+bG5sin5rH4n5L9
8zk57Z804ncMZ7j1xWl5D+DQXj/t5sXWLV8YiDn+mY1YU5xdym82Qlfl9PS5
IPGZ6a+tNYm58YxlrL7R6GsqfTPxtOnDn+1baZf7AMtfkPtwdh6LptK5jdBt
obv07bSf0wjMzp/uy9zZ59nZz7R5Du5Vvt/JtvJTzmuE5ovy3MTK72af/M9p
9HMuzkm7az09x4Sdv/wLGkxXNELn5fxG6Mrsm8eC5bPIp/Ds8dy5oBF+9GXk
aFyQmO2C9PeMuuh/fGD5CHSjLky78uK00436fvZ/aSMwPRr5HfRpFs5zoGFT
531c2ujrTF2WWLtLsh9jcl5eI/ul2Zam1fl5jfJBLs9r18fleSz4B9kn22Xp
I6fm9Lx/rmrEuNHBub2UtzZCY4VNnfwROlZXp8/1pfxhI3RwpmrppP3aRvjQ
zVFek3ZYnfwUulc/TB9tr0k723Vpl8MCy3+Rt3J9Hot+042N0Nmhk/WjtN/Q
CMzOn07Pktnn9dmPPq/N/vn+ONvKc7m5ERo9yhsTK2/KPvnf0Ojny9yQ9qn6
Qjk+7Pzlwhi3K3Ocb2mEDtCheSxYHo08l9tznH/aCD/aQHJnfpqY7afp7zO5
7X98YDk4dL5uTbvy9rTT+boj+7+rEZh+kBwfekIr5TnQ1JF3w35Xo68Ldndi
7e7MfozJzXmN7HdlWzpTt+Q1yuu5pxGaRPq4J48F/yz7ZLs7fe5rhP4yrSLl
z9OuH1i+jxyi+/7H57600yC7P+0PNgLTNlI+kHZtYTk18mge/B+fB9NOv+wX
aX+4EZgWkvKhtGsLyyGSc/Tw//g8nPZHvNNK+2XNwMdOiPJXabevYN/Bvoo9
sUcasZ/2aCOw/Rn7NI8mfiTxugOxJ6Ot/Qrtf9OIPQrno397RKsMh92ezED5
7f1jI/Zk7As9lse1P/N4+tibgXfOPTO8oo9kjAFsL22X8vdEI9YRVzQD28+Z
XPr/XSP2Le3dwObMyt+n3d4mrN6+izw9ey9y7+C9B+J5ZE/HM2s0MTsf+z72
fOz9PJX2i2njNmI/DUeZa/xttn06+8GvBtsHst/2TPaD3xTeN8fvsRyHFcQz
N2K/ZbwbWHz+5eVYzzViD+30gcDrlPLFUj7fCL41exqwPQrlC4nlCMD2f+wF
vZj+fF5MO/42eyvWZfY/4Mtynv9yI9YF9kBg64bhbqwZ2D/pBLamUL6S2P4J
bO1vT+zVRuyN2HeC9yvlG6V80/dzIPZF7KFcmftDrzdib0ceHL/XJoQvbG9n
9mwLW1O+lffGYDc+F3to8g7Y5TvIa7D/Yu/Fvs2fG7HX8Vw71qWufbOyyPi/
/B/+S6OfNwE/ORDt3sm2cyRmH+3G2sC6YI9eYHx0yr8mtscF22saK/7vNWKv
wx7Fezm29qXez/7nTvzHgaj/IH3mSsxu/+//GrE3aAxdo5wL+3Z/z+vFVwrb
z/P3YSN4U68cDuwem9KNa7PH8mp+Fj6v50vdR41YR4vrqJoR/2Cfytrbutv6
G65zNKyxra/NJeE6p8O809zS3BOWyyB/wdrbmtqaG5ZzIRfDGtv62toalnMh
z8Ja2jraGheucy6sva15rbnhOrfCGt4a3JoblvsgJ8La27qbvsy0zdCUEc9v
LW0dbT0Ni+2X12Dtbd1tPQ3LWWh2o631dcsefvZjHa9/+RR0atjpGU2mOduM
vSUaSdM3Q5vG3tiEZuznXF/Kic3Y8/xwIPDPBmKvbIZm3Ev2T+Dtis+s5bgz
FrxDwXc3A+M2tIc2U+InhgPbp5qt+E9KbP8Kts/mvJyffbA/Dwe2xzV78R9o
9ve+YHti9swG03+4lCPlr1WeJ5eV+2So4B+W436xG9j+0iPN8LO/NJLY/pJ9
ppHE7W6MibESPzN/M+JkbmzGfYiDV0zaaPn/x6WfsWZg+1H2osYSs8FVwb/W
dzP2qWYeCtwdiliyRjP2HMRWweKF5ivn0EwsjggWMyaurJWYHV6r+Hy5+Leb
ESslbgoWP7ZIsXeaERMlPgq2tyBWq9uM2C3xSL5T72Ts0yzNiKf6Smnby++a
+ChYzNJC3qslZofFUC3ejbbippYu+AvNiJV61PuLZuwBiqFiF38l7mvegv+b
MVSzNiPGaZnSdrbEYp9gcVlLFP/ZE7PD4rK+VvznaEbclBgqWPzVysU+ZzPi
o8RKweK1xFZ9sRnxWuKgYLFAqxT/uRKLg4LFX32t+M+dmB0W+7Rq8Z8nsZio
efJaOkNxvc2hsLtGMVSrFf/5EovFgsW8rWXvvRlxU2KoYDFIYt6MiRi29nDo
4Fo/2veAvf8S17RAM+K1xEp9OTE7LPZpndL/gonFRMHiqcRuLZSYHRYHtW7x
Xzix+ChYfNeGxb5IM+KIxBTB4rvEZX2lGTFd4qZgMVEbFf+vJhbvBIu/Eg+2
aGJ2WKzUxsV/scRin5ZsRmySWK/FmxHTJf4KFiu1SfFfIrEYKlg82BbdaLtG
xmUt1Yw4Lm0Xy37ETbGLg9qx+K/cjDgi8U5LNyMuS+zWMonZYbFPWxX/ZROL
fYLFd4ndWi4xOyyGauviv3xiMZCw+K7ti/1rzYj/EQsEi9cSx7VCM2K6xE3B
YqJ2KP4rJhaPBIvLEru1UmL2lfJadiv+q/mNyvgo1yhGS8zMKonZYbFSOxX/
VROLoYLF1WzZjTExVmJodmxGTIhYF1hMi3iq1ZsRK7V78V8jsXgnWNyU2K01
E7PDYqL2KP5rJRYrBYvjEru1dmJ2WHzUnsV/ncTipmDxXeKy1m1GTJeYIlis
0T7Ff71mPz4KFn8lHmz9xOywWKl9i/8GicVBbdyM2CexXhs2I6ZLPBUshmq/
4r9RYrFVsHgwsVvaims6sPhskv08NRKfi5g3cVNT7QUfXny2a0bcEfumzYih
OqjYN0ssDmoqnhwxYJsnZofFRB1c/LdILF5rKp4csVhbNiOmS4wZLFbq0OK/
VWJxULB4LbFZWydmh8UIHVb8t0mMNxUWlyV2a9vE7NvmtYjlc2+I/RNb5RrF
d4kv2r4ZcW7immAxVEeV/ndo9uOpdsj7TazapjlW4kg9l8WIugd3yvtQvMep
zYjxOLr0s3Mz4qbEUMHiuMRu7dLsx1DB4qyOK/67NvvxV7A4LvFbuyVmh8VQ
KXdPjGMV5nt86WePZsRQiaeCxXeJudqzGfFaYo1gMUgnFf+9mv24KVhclvit
vROLs9qvGTFRbLhZxUrhXoX5nlz62bcZMW/i32DxYGK3tBXXdFrx2T/7cay9
m/2YK3bxWmcXnyOaEXfEfkAz4qmUBybGvQqL6Tq9+B/UjBgq8VSw+C6xWwc3
IzZM3BQsVuqs4n9IYrFSsLgs8VtfT8wOe1+mPDQx3lCY7zdKP4c1I8ZAvAEs
1kvs1uHNiNESZ3V4Xsu37cM3I85K/JJrFKMlx+nIxOywGCrlUYlxqcJ8XfMB
OVZrd+P56z7E1+s+9BspzuqYZsRKnWuvPrFYKVjclPit45r9GCpYHJTy+MS4
UWG+3y39nNCMuCkxVLD3SGK3TmxGTJc4K1jc1PeK/0mJxRTBYrTEcp2cmB0W
g6Q8JTFuVJivmC7fKbFbOE3xooqt+n7p/7RmP54KFrOk7vTE7LB4JOUZiS8r
bc9sRmyV+Defi5g3MVfsFxfcxCfTjP0N71POasZ7KOU3EnvvBIvb+rj8fbMZ
71x+0A0s7su7F/FY3ol4nwJ/mu+vcPZ5z+XdFuy91pXdeK/p/aN3j3A1EO+n
xE7VMVHwGP6V4n9OM+JzxDXBYqhwLImFmjnfX8CN4Yjlc2+I/ft+M67RXM68
7ryC9yj9/LAbmF1/52f/9n9gx/kkx+Tv+TzyzPJsMje8INt+qRV82biyzSEv
bEY8VTcx3SvvJS5qxtzyum5gdud1cY6//QxYjJXYq+9n/3y+n/brS9tLmv3Y
LXjOgYirurQZsVXXtWJP0H7gpr1ynfk/LMZrrfSHv5yxWvae7Ds9l1gM10pV
6Cvjl9irF/txYqX+0w1dantr9nxg+zzO56pmxD6tMRzYueGp0I8YmH93ox97
eqtUodMsHkkszU0FX1N8Dq1Cs1nckbgXWIzK4VXoEI9lLBAsBubIKnSaxSOJ
jYHvzr0ja2zra2tr+MzcExJrYg9kscT2iuwdiSkRTyKuBKYt4PxvaMaa9Krh
wK7l2irWq+z79AKL7RHz41rE8+A6oG2Ml4Dt5rTj0oBd9wNV6CLjScCZAOND
+EUVbfEk6POaHB/vzeUy1TlMsHfov6pCF3mljCOCxQIZw9uaEf8jhue2HM9H
qtBLZhdHBIvtMbZ3NCO2547hwMb50Sp0lNnF/8DvD8SY39WMeCFxLHfl+NuH
sE9hX2LGxPYn/P2sGfsY8w0GHsrynsT2HO5J//uaEWcjxgYnw73N4IXQ9ucF
n2N/owpc72ncl3b8D/dlW3E6+lH/cBXa0rgmdiuf3QPN0A0Wn0JHU4zKceX7
/mCzr3cKi+c5TZx8s687CovVOVvcfrOvIwqLb/meXINmXxcUFrcjTueXzYjV
2aScw6+aEXvTGAosbkqcjv0Ueyn2UeDLM2bHmt963zoYviJjduyD2AOx/wGL
5cGt4XrFkonNkIM3x1DEWsjTq/PtYHEdYhjkn9Q5drB4BnFTxkr80lvD8Vng
4hD7IQdPnIZcKPk/1vhy3eTOieuQ3ybPrc5dg+Ws2SeR5/b2pMhXk7dW52/B
9me+5P1CM/Zhnm0Gtg+jfDrt9kzgv06K3DU5bLXtmfT5v2a0r9s+m/5KdXWu
2/+lz4LluM81Q+ND+WL5+2BS4OebfT3W59NOD4QuSG17IX1eyrb2iJT+lycH
P5d2OXMvJX7bfdqMvR15dXLSpubW2ZNvxl7Qa83A9oKUr6TdHg788aTIt5OD
V9teTZ/Xm9G+bvta+ivV1Tl2r6fPEuW4bzRDx8R5vZHnpnwz7fQW4U8nheYJ
7ZPa9lb6LFv6eacZe0pv5DXyV7rmOufv7exfPp+8vjpXD7ZndVqOif0bOV7y
wewlHJX3m1xMe0rvNmO/SP6fPMPa9tc8h/dL+V4z9rXeScxfqa7Om3w/fVYo
5/9BM3RYPmwGtvel/Fva6e3C000OnRbaLbXt7+nzj2a0r9t+mP5KdXWe3D/S
5zv5nbJX+lkpP2nGXpY8QrmFdQ4fbK9MHqHcwjp3ELYntno32tJ/UX6a2PW+
k9dIF5h9oJzPhDKu07diP4rtX+n/eTPO4/Xs57P0V6qrcxM/Tx+5hnIO6/xC
2HxevqC8xDp/EbaHJr9QzmGdgwjbK1vPg64VOjLOa5o8N+W0rb5+MdyYHJoz
tGdq23Tp41rfzXtgmrxG/krXXOftTcj+5SDKRaxzEGF7bvRzjIkxu8karRVc
neZv5ofmg3IN5SXaQ9u0+MzUCv2agVZge2jKSa2+zjI8y+TQuqF5U9smp89g
K9rXbQfSX6muzk0cTB/5i3Ia6/xF2F6TXEM5h3VuImzPTa6hHMU69wu2t7ZN
Of8prdCdUY6Xv7knBx5t9fWgR9NOi4ZWTW0bS59GtrUvp/S/PEV4Strl7TUS
72WvuxV6OnIW5T3ao5MvKEexzlmE7cvJU5QDWecmwlNzIe3Vt0LHZ6HJge3d
Kbutvm41rJ6eD+2f2lalj5xFuYt1niJsL07eofzGOg8StucmT1HuYp3LCNtb
k5MnZ88+1pKT4xpfmjbKWVt9vWxYPR0h2kK1bbb0uSHHxD4QbRb6LnUeGGy/
Qg6i/EZ7bvIU5dXXOY6wvbX9y/h8sRVaQitODjxluijnavV1umH1dIfoD9W2
udNHXqNcxzo3EbYvJ6dQbmGdgwjbQzvEvn2uodaaHHil6aL8UquvAw6rp79h
zcW2cfl/wYIPmS5yGeU01nl1sD03ukO0iOpcQ9i+2RHdaEu3SLlQ4rvzcxlI
PXF2x1mylEu1QpuGbeH0ly8oR7HOWYTtrdEUokVU5yDC9sqOsW/fCl2hbSYH
vma6KBdNO31zWD3dIVpEtW2x9JGbKKexzjWE7a3RDqIhVOcswvbKTujGNTj/
XfN6np0u8lndG/b/6Ju7RvV0eOjx1Lals60cPjl+dc4ibG+NXpMxMWZX5HPZ
u4ZTynGXa4W+j3hF+WZiFNmWTzuddHi/yaEFRBOotn0tfeQyymmscxZh+2w0
bWgF1fmIsL2yM8pxV2qF7s9hkwMvO32UK6ed3jqsni4QraDatkr6yEGUi1jn
LML21ugC0RySU7hGK/R+aP18sxx39cTHTw683/RRrpH2n2Qb9TR/tGWTsyiP
0R6G/B792397Pe322eT5yf2zbyQHkT6QPbfv2LdvhQ7OGZMD/2D6KNdNO/13
WD1tHNo5tW299JG/KKexzlmE7a3R/6EVVOc1wvbKzivH3bAV2kznTA78h+mj
3CjtdORh9fSC6DnVto3Thy4QrSDa8u/lNdpbu6D0v2kr9IPEosNiqpWbpV0b
WD19JGMiR/PKfP56d+Tecs9Nnj72v7YoeMKEKLdshd4Q7XVYPd0hWkS1bav0
ke8oN7LOZYTt0V1i374VehafTA4sVlm5bdrFS8Pq6V3QwKht26UP/QqaFnVO
JGwfT5y23Ehx1PbZ5EOKSf4ksf26qXl1rdg3+zy/a2KML7dX34pYcXttMM5z
5S5p1wZWP9WWduO6eY7zf3C8tIIL/QZ73a3gLZ9qS/vV3cD1Hh3+dPtybHuk
j/06uYVfyLgs2P6bXEY5jXX+InxRzqnkLtY5iLB9sE9LuU/5+634yW5gnOrK
fRPbi4PtR9Gfp0Nf2/ZLn3+34lqeKPiibtwTPmu2A/Ia8a7Dcw2Edv2Brb7t
wPSZth3zwN8VfE03xsV+45x45DrB30gXGN59MPTt6dzjfT+4FdgccmLp5+u+
F+Izu4Fx7CsPTYwTHp5PPBVO+1bfdlj6TCr9HO77KP6zGxg/vPKIxHj44flL
P7OVfo5s9W1Hps9Q6eeogp8s+LZuYFzxyqMT41GHvzwQOufHt4J7nu2Y9Bkt
/Rxb8FNiPruBcdErj0usDbzQQJTHp3320ejHcZqlnxMK/qPYTnvdreCcZzux
FXz1U3nsfTdLP3OWtie1+raT0qdb+jm54KcL/lk3MG555SmJ8dvDXxW7JQ6/
1bedmj6zlH5OK/iZgu/tBsaNrzw9Mf58eDHxXfb5W33bGekzezuu5dmCH7DH
3grOfLaz8hrx9sNLlH7mLv18o9W3fSN95mpH2/8r+K5ujIvrtRdsT1isKGy/
2D7wPKWfs1vB2f+tVmDHna/08+2Cnyv4F93AuPqV30mMnx9eRoxf6eecVt92
Tvp8ufRzbsHPF/xwNzDefuV3E+P/h5cr/cxX+jmv1bedlz6LlH7OL/gFv9Xd
wDj8ld9LTDsA/lrpZ/7Sz8Wt4P5nuyB9Fiv9XFjwiwU/2g1Mj0B5UWJt4BUH
orw47cb1Wzk+S5V+vl/wSwX/vvRzdSs0AtguaYXuAD0CeOXSzwLlfC5t9W2X
ps9ypZ/LCn654Me7gWkZKH+QmDYBvGrp58uln8tbfdvl6bNi6eeKgv9U8BPd
wPj8lVcmxv8Pr176WbD0c1Wrb7sqfVZtx7W8MqF/Tyw1ELZr8hrpHcBrFvtC
pZ9rW33btekjXtj95r3Db7oxLq73S6PxWfisvI+QHy5PfZlif6IV+jPiX3/U
Cq2EJ7uBaS0pf5zYuwqY78Kl7Q2tvu2G9PGOQ4662Ob17MW3Qh/hj93AdJSU
Nyem5QTzXaT0eUurb7slfdYvdT9phT7CM93ANImUP01Mywnm+9XSzx2t0GWa
Wp8+G5S621qhd/B/3cB0l5S3J9YG5qu8o7aPRj+Os2Gpu7MVegSvlH4eaIXO
EdtdrdBOos0E8120tL271bfdnT4blbqftUIf4cVuYPpKynsS02aC+S5W+rm3
1bfdmz4bi51qha7By93A9JWU9yWmNwTzXbz0c3+rb7s/fTYZiGuhp/Ba6eeh
VuglsT2Y10izCea7ROnnF62+7Rfps+lAtKUp8Hw3xsX1flTwy63Qvpkx70Pv
0ZYs/fyyFfpOD7cCO+5mpZ9ftUIf4Y1uYLpLykcS02mC+S5V+nm01bc9mj6b
l7pft0If4a1uYDpKyt8kpuUE811aXH2rb3ssfbYodY+3Qh/h7W5gGljK3yb2
XYL5LouvphW6TGxPpM+Wpe53rdA7eKcbmO6S8veJtYH5Kv+QduP6cI7PVqXu
yVboEXxY+nmhFTpHbE+1QjuJNhPMd7lyPn9s9W1/TJ+tS93TrdBHeL8bmMaN
8pnEtJlgvsvjom/1bc+mzzbioVuha/C3bmD6SsrnEtNsgvl+rfTzfKtvez59
th2Ia6GnUN8Tm6btxbxGmk0w3xXE27f6tpfSZ7uBuN9oCvy1G+PiesVyr92O
vICPi22dgg8oviuKsW+FvtOfWoHdq9uXuldboY/wz25gukvK1xLTaYL5rlT6
eb3Vt72ePjuUujdaoY/waTcwrSXlm4lpOcF8V7a33+rb3kqfnUrdn1uhj/BZ
N7CcEeXbiek3wXzlffy1FdyPbH9JHzkf77TyHfFwYHkh8kdwfNS2d9MHh4d+
cH3IedGP4+BRea8VOda0mf7ZivH8oBU5z/LRxB7AckmU6mq+kA/Sx9oED4t8
kCmJrVPkgOD4qPk/YO/E1yqf24et+Bz/2w1MH0r5j8Q0oWDvzeWJfNTq2z5K
H5+/+8D792mrwI/nvfHPxBOK/V+tWPvgFME/Ul/rJ+ljHWSNZO3zeWL+67Wj
rffvcsGNlXiMTjvm1ubVe5SyVf5mnBjttPdu/7PE+rE+snayJvLyELaG2sC9
XPC0pe2MVWB25X8Trzkc+KCBaKd9bYP5WEtZU81TfCa0A1tbbVLK6fyJt68C
syunT7zWcOCDB6Kd9rVtQvpYZ81U/tYejtL/1lxblHIGfZX+h6rA7MoZE2sD
HzIQ5UxpN66f5fhYZ1mDWVu1Sj9j7Vj7bFPKyc4Dn38V2BpNOZB4neHAXx+I
Pgbbfdtg+lh/WZtZc01pB7ZG26GUw66n9D9eBWZXjiRedzjwoQPRTvvaNiV9
rMus2azFGu3Azn+XdlzLDBP798SBA2EbT5/1hgMfNhDttK9tjfSxLnG/WaO5
pkl5XX4j/5S/dd0q7kP35NKlXKYd8+31S19t69uB6MO9W9s66W8dZ41n7TZz
O7C13j6lrHxm5fxnrgKzK3uJNxgOfMRAtNO+ts2cPtZ31n7WdLO1A1sDHlDK
L7geuRtVYHblrIk3HA58pPVyKedsx7qPbbb0se6zJrTW+2I7MJ9D2tFmcul/
jiow+0bD0c9RA3Eu+nEc7bRXv3A71mPWYtYy1orm9vO2A1szHl7Kud2Lpf+5
qsDsynkSbzwc+OiBaKd9bZs3fawTrSGtDRdoB7aWPLqUX3Ifl/7nrQKzK+dP
vMlw4GMGop32tW2B9LF+dC3WjAu149pc1/GlXND3ofQ/fxWYXblQ4k2HAx87
EH1ou2mO3xdzPOvnrue2e7Bd31el/IrvWOl/wSqwNanyq4k3Gw583ECsWxdt
922Lpo/1prWoNeaS7cDWpKeXcnHf1dL/IlVgduUSiTcfDnz8QLTTvrYtmT7W
W9ao1p7LtgP77nyjHd+lKaX/RavA7N8u5fLtiL/aYji+aycMRDvta9uy6W99
au1qTbpCO7A17BJV9ANbm7t+63G2r6V99VKu0Y41pnbabzkc9Sukj3WrNa21
6irtwNa255RypXbEgy1dBWZXrpx4q+HAJw1EO+1r2yrpYz1rrWsN61xWzfP5
bilXa0dc2XJVYHbl6om3Hg588kC0057NZ7tIfr5y93CH1Zxe8Ks5HzBXMAcw
74P/k/MH/8uRrMfixIF4DtoftDe4bjvmB+YG8gFfbEceH62nddPuGeQZ7zd5
/XZgz3ql/2uur/XT7rnsme1ZvHE7sGf366XcsB1cVatVgdmVGyU+dDiw+DTt
tK9tG6eP57Jntmfx5ok9u9/0nWuH3tOaVWD2P7sX2qEPdVjpa7OCrx2IdtrX
ts3T33PZM9uzeOvEnt3rVNEPrO/N0p9tq7TvVMqd2/Gs1E77w4ejfuv08Vz2
zPYs3j6xZ/dfSrltO7SZ1q8Csyu3S3zEcODrBqKd9rVt+/TxXPbM9izeObHz
ebeUO7ZDf2qjKjC7cqfERw4Hvn4g2mnPdlT5263gH+Vz2TPbs3j3xJ7d75Vy
13boXm1aBWZX7pa4HosflrZ7FZ8T2vG7qjwxsd9G80XP4r0Tmzd+UMo926Fv
tUUVmF25V+KjhwP/eCDaaV/b9k4fz2XPbM/i/RN7dv+9lPu2Q0tr6yowu3K/
xMcMB75hINppX9v2Tx/PZc9sz+KDE3t2e6561nqeblf6PzDtyoMSHzsc+MaB
aKd9bTs4fQ7Lfjyvjb3PwOfzsXuqHRpSJ5T/jy34loGwHZr+xw0Hvmkg+tBX
bTssfTyXPbM9i49K7Nn9iTFrh27XLlVgduWRiY8fDnzzQLTTvrYdlT6ey57Z
nsXHJfbs/hdbO/S2dq8CsyuPTbxbXq97STvt62s9Ln08lz2zPYtPSuy++rwd
95n42B2rGBfX+492fAb0zk4cjvvwJ6XtKeKH26HFyXZS9uO57JntWXxaYs/u
/5TylHbE2e5bBWZXnpr4pOHAPx2IdtrXttPSx3PZM9uz+KzEnt0CJ89oR6zp
AVVgduWZiU8eDnzrQLTTvradlT6e12c71+Eo/e/ZPV3p/5vtiPs9uArMrvxW
Ym3g2waiPDvtS2c/J+Rz2bPfs+aCUl7YDq1Ytu+0+1yPsLmB56xnsGfruYk9
i5X+rzkjz02756ZnqmfleYk9W5X+rzkpz0s7fgDckTVPJIwrQI709wpeo+Cj
qsDOU3lBYnHeMN+1RuNa2NYu+JJ26OWKD8c7iZfg3vJ3ccFrum+rwPRtld9P
rA3M9zs5VsZhk9Lnne3QPj0+7zf343Gln0vboYGrvCwx3V7456WfdUrbH7T7
th+kz32l7vKC1/abUAWme6u8IjF9SZjvuqWfK9t925Xpc3+pu6rgddzDVWB6
uMqrE9PMhfmuV/q5pt23XZM+DwzEd2rdgk8r/VzfDh1bth/md43GLsx3/dLP
de2+7br0eXAg2q43McofZT/G9ZIcZ3q77Hw3Lv3c1g59WrYfp/8vSt0NBa/v
e1QFpoervDEx/VyY74aln5vafdtN6fNQqbu54A18vlVgerjKWxLT2IX5blT6
+Um7b/tJ+jxc6n5a8IY+lyowfVvlrYldA8zXZ++eWGti2G5Ln18W++0Fb2Q8
q8D0bZV3JHafwXw3GI0xMWb1+2P7JOaG5oH0P79T+rmrHZqtyrsT0+2Ff1X8
Ny39/Kzdt/0sfR4pdfcUvInzrwLTvVXem5hWLMx3s9LPz9t928/T59FSd1/B
mzpuFZgervL+xDRzYb6bl34eaPdtD6TPr0vdgwVvVvCFpZ+H26Fjy/aLduje
0tiF+eIFf6jdtz2UPr8ZiLabT4zyl9nP96roiw+9XXa+25R+ftcOfVq2X6X/
Y6XukYK38FtRBaaHq3w0Mf1cmO9WpZ9ft/u2X6fP46XuNwVvWfAlVWB6uMrH
EtPYhflujVen/T+29PltqfttwVsVfFkVmL6t8onErgHmu23p58l26OWy/S59
nih1vy94a785VWD6tso/JNYG5rvlaIyJMTNvNKc053w/sbnllaWfp9qhQ6r8
Y2K6vfDvzK9w6bT7tqfTBxfjM+3gXaEJC+Nu3N6ef7tvezZ98MHgeMHr8nZi
/DEwLhhcLnMkxgmDjwV3MK6VuRLj1cHNghu35gCGcbngvbHmwsHycin/1A6u
FfwaLxW8U8FXV4HZlS8nllME88XZoi0b3otX2pFPZFyfzHHG38KOo8Va4512
6NmyvZr++IPxCMtP+lJieUbWaNZv1mVvJLaOU/q/5jB+I+3WR9Zj1llvJbYu
U/q/1ul9K+3WUNZp1gVvJ7ZeU/q/1ux9O+3WRK7BOuidxNZNPnv3xDYTQ+f2
nbRb41j/WNf8NbF1kNL/tX7vX9O+82iMyZX5G+m57DfTPehepOsrb2W8zJnm
HYw1iPWJdcffElunKP1f6/r+Le3WFNYb1hEfJrbuUPq/1uz9MO3mp+ap1gUf
JTZfVfq/1gr+KO3mttYD5vn/TGxdoPR/rd/7z7Sbw5vfm7fT1/2sHfNwtk/b
fV1f2PzfnNx83fris8T8lf6n02uubc5tLv1p9q/tv9NuHi7va4YyhodNDI3f
f6fdnNl82jz5v4nNq5X+r/V+/5t2c2DzY/PeaTuBzZOV/q91fadNuzmt+a55
7PSdwOa9Sv/XnNnTpx3vNf7rmhsblu+G9xpHds1pDctrw8+Dw1oe26+ruEZ5
bcoZE8uJg40Bnmx82bVtpvQxTsaEfrLnq+fuxhNDU9p96PdQ7uHkTuQh+m3B
IV7zXsNTOaPK/TzY6fNkw/ITpySvMl4g3MnwU5PKnK9b1iJpH+0E3n5ilCNp
f3M4sLwt7fRV26akT6MT7eu2o+k/c+l/LO2+P7A8PuV42tulbHVCN1k7fdXf
uUb6yO/DzV1zb8N4ilyDtmcX3OlEX/pZND8XvEn79cK+ZWk7Wyln74QeMa3m
Tvr/lnZtJ/IEtx4MLB9QWaV94khg9bSgaU7Xtl76yBnECV5zdcP4kRx7loIf
KPgLncD0o2ftxP/wAb3AOw9Gqa7WVZ41fZ6s4hqc/655PfSgcYi5N3BBTRqJ
a1RPe5kGc22bI9vO0Y34QrGFYgrhX+ZnYUzoWp9VzucbvchzpCNNT1ocou+s
da/voHOdu9g/dE92AtOtnrcT/8MH9QLvMxilulqPet70eab0N18nNKn3GwxM
b1r5pbSPjgRWT7OajnVtmz99/q/0s0An9KkPGAz8ycQov5z28ZHA6mlN07Rm
o0e9SCf0qZ3rQgXPReO4E5hd/cKJD+kF/vpglOroWr9ob9/1zxDHWTCPe9hg
2OlQL1PKZTuhMd3Fw9OJ+hnKOSza6dsWzX5eLn0u1glt6yMGA39phigXT3tv
JLB6Gtf0sGvbEunjXJcsePOCl+oEpje9dCf+hw/tBT52MEp1tT720unzWhXX
4PyPHwxM/3r5Un6tE5rXs4/ENaqnp01Xu7Ytl23fqKIN/xMHA28zQ4zTV/Pa
t9R3J7SqlxkJfMlgHGeFbOtcVyz4jIJX6gSmf71yJ/6HD+8FPm0wSnW1bvbK
6fN2OZ9VOqHffcZgYLrbylXTPt9IYPW0uGl+17bV0ued0s/qndCbPmsw8Ldm
iHKNtM8/Elg9bWoa1Wz0tNfphL62c12r4J8VvHYnMLv6tRMf2Qv87cEo1dHl
fr+cw7qd0N2ecyTGyxifMxh2ut6buRc6oaO9CB6eTtTTu6bbXdvWz37+Vvrc
oBOa3d8dDHz/DFFumPavjgRWT9Obzndt2yh9nOvGBf+14E06gel6b9qJ/+Gj
e4EvHIxSXa3pvWn6fFTFNTj/iwcD0/Wmte7ecN1LjcQ1qqfpTTu8tm2Rbf9Z
xX3mHnNvwX+fIcZpvbx2n9Wa+dnRAKeh7n48thM60DSgnes2Bc9a8LadwPS+
t+vE//CxvcBXDEaprtYP3y59Pivns30nNMSvGgxMI1u5Q9pXHAmsnpY43fHa
tmP6/Lv0s1MnNMSvGQz8xRmj3DntK48EVk9vnO44Gz3w3TuhJ+5cd/UZF7xb
JzC7+t0SH98L/KPBKNXRFZ+22PfohP644+ySx71hMOz0wQ8s5UGd0MVeEw9P
J+ppldMvr217ZT/Tlz737oS++U2DgTebMcp90r72SGD1tMppote2fdPHue5X
8EkF798JTN/8gE78D5/YC3zrYJTqan3vA9Jnxl5cg/O/fTAwXfJDSvn1TmiO
bzgS16ieBjgt8Np2cLad1Is2/O8cDHz6jDFOe+a1n+273gkdbb+FW+d96ziH
ZlvneljBtxV8eCcw/fQjOvE/fHIv8L2DUaqrddGPSJ+h4nNkJ7TR7xsMTPdc
eVTatxwJrJ52Oj312nZ0+oyUfo7J78gDg4HvnjHKY9O+dX6X1NM8951io4t+
Yid00p3r8QW/VfAJncDs6k9IfGov8C8Ho1RHX3282E/qhGb6xiMxXsb4kcGw
00P/hu93J7TOdyw+J3eintY6zfXadkr20yx9ntoJjfVfDwZ+d8YoT0v7ziOB
1dNap8te205PH+d6RsHdctwzO4Hpa5/Vif/h03uBnxiMUl2t035W+nR7cQ3O
//eDgemw0713b7juPUfiGtXTdafvXtu+lW17vbjP3GNPDgb+wkwxTifntcvr
+W8nco5oOyAVoe/g3vxOtv2t503BaxV8Xifw2jPFNZyb+HudwPTZld9N+/4j
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
1iry7OTRwfLs5CTihZFj6D5dK+/VNRPjJvEbvnYVPC14VWC/5+tWwf8yfeYq
wnIP1a9b9flhYO38hq9XBR8L/hTY7/kGVXC71LwusJxE9Rukff3E2vkebVgF
NwuOjw3zO7VxFRwu7PJk8a3IPVS/cdo3Sqyd3/BNquTNGA7s93yzKtqys22W
WL6k9nJvN027dn7rdqiCNwPvyeZV/J5vWQUnS83HskWOufot075FYu383m5V
BV8KfhPYb+82VXCv1LwrsJxH9dukfevE2nkWbFsFLwoeE9hzYfsqOFZqfhVY
LqT67dO+XWLt/PbuXPU5TFyj3/OdquAKcb1yKmE5kup3SvuOibXzjNs8r/eC
8qw/tgouAlwQMH4GuZb4U+ROOuauedxdEuMz8Ru+WxV8JjggYL/ne1TBjVLz
osDyK9XvkfbdE2vnN3zPKnhL8IzAfs/3roJ/p+begeVaqt877Xsl1s5v+D5V
8JPgE4H9nu9XRc4XuxxMvCRyKtXvl/Z9E2vnN3z/KnhIcInAfs8PrKItO9uB
iY2FMfJMPCDt2h1dBWcHjg58IgdV8Xt+SBXcJTVvCXz7QNQfkvaDE2tnjvT1
Kvg38IzA5kvKQ9NONxJW7zf/sCp4SPCMwH7/lYennZ4krN5v8hFV8JDgH4H9
PiuPTDudSVi9z3+XvB/wkLhGPCHnjcU1u142GI+Ie+qYqs8xAuOE8Iw7KK/X
75rfO/Pb46vgE8ENIk9aLr3894vHoo5dPYwD5MQqeENqzhAYv8elY1HHzgbj
+ji5Cn6QmhsExuNx+VjUsbPBOD1OrYJnB6cHDhAYX8dVY1HHzgbjpji9Ct4Q
3B14P2C8HNeORR07zg0cHPgxzqyC16Pm9IDxb1w/FnXsbDAujm9U0RYXxw1j
8T/sOPrH+6GeHQ/HPcXn/Co4JXB04OzAp3FzsX+rCi4ONhjfxrer4OOouThg
eb0/HYs6djYYh8Y5VfBu1JwbMH6M28eijp0NxpXx3Sr4NWpuDRgPxl1jUcfO
BuPEcO7nVX0ODRjfxUVV8GLgpmDjh/vigiq4LfBa4LeA8VrcNxZ17GwwDgfX
/c0cB89Yz1rPXJwl7jOcM47jeLgsvl8F/0XNfQHjqXh4LOrY2ab6Ff9Lq+C5
qDkuYHwUj4xFHTsbjK/iB1XwWdRcFjDeid+MRR07G4yX4ooqeCtqzgoYx8Bv
x6KOnQ3GNXFVFd8pXBN4G66pgkPg92NRx64exjWhnl/N7QDjZxCLdU3a6cTS
iMXPgGPEeOEAuTHtYrFuLuUtVXAX4Fb4YRXzJeV1VXAyPDcWWL250PVVcC/g
VoDNi5Q/SvsLY4HVm/P8uAruBZwRsPmP8oa0vzQWWL25zY1VcC/gVoDNc5Q3
pf1PY4HVm2/cnOd/fV6PuceDY3FvuA9fHYtrVG/O85Mq8t9xK8DmP8qfpv31
scDqzSF/mONgT9E+46I5N7ytirmiWOhVexHjbe5xexXcC7gVYPMQ5R1p//NY
YPXmGHdWwb2AWwE231Delfa/jAVWby5xdxXcC7gVYPMK5c/S/u5Y4JtyznBP
FfwJuBVg8wflvWl/byywenODn1fByUAHmDYwzgS2+9L+wVhg3ALmAPdXwb3A
DzYfUD5Q9TkZHqyCb+GW7MvcA7cCu7xv+f+PVZF/T3OY9rB6c4OHquBewK0A
mycoH047XVlYvWf3L6vgXsC5AHuOK3+VdrrEsHpaxHSIp2oTJ8bJQHOY3jBO
hjsT41j4TRW8DDUnA/y3gdAc/k3a2WAcDvRpn6gilx+vgGvED6B8PPE/xgIb
A76/TX9cATCeA+P0ixzDfUbLPVFFXrD8YlgeNP1hOsT0hTcv9+Pvqz5PACzf
X/mHxJ+MBZab/1QVXABy+XEAwHgJdhmNOnY2GEfBFuLDq36+PizvXvl04s/G
AuMceLaKnHw59XLwYXwCu41GHTsbjFvguSpy7+W5TztevndV5PjvPhp17Oph
HAJblvN5vurn2cNy6pUvJH6pilx6OeDG1VjjhZAbzo4HYOvSz1tV5H+zaYMT
4E9V5MzPlznysHz/PUejbr7MqYfl/m9V+nml6ufHw/Lcla8mnnE8sBz/16vI
gd8yc/lh+ft7jUbdlpkjD8vlf7OKXPetM0celqe/92jUbZ258LCc/cl5bwxl
XrtrlJ+u/HPiofHAcvPdU2/nPSZXHZZ3v8dojIkxxIHgM8D38G4VOepymeVg
ys+UC7nvaNR9M3PYYTnU25T6v1b9fHRY7rnyvcTj44Hl1H9QRf75vZlDDcuX
32806tjZYLnzf68it/y+zCWH5cXvPxp192XuOSxHfttyPh9W/TxyWD648h+J
5XDL65aH/nEVueLvZ847LM/9gNGoez9zyWE5759U0VZe7YGj8T/cHY/+5der
Z5fbfgjd2F7k58r5/rSKPG7lvxLPOh5YDvvnVeR4z5453bD89INGo272zAGH
5ar/p4pc7jkzdxuWp37waNTNmbnesJz07cu5/Lfq523DcrSVxLXhucYDyz13
7tPm+cs1huWV71DKib3Ik2bjJ8d8Qi9ysDfNnGtY/vjXR6Nu08zRhuWSb9eL
sZAffyxN0l7kS+JDcJ/hJZif/mMvcsZn6kVO9SmZGw7LBz90NOpOyZxrWG74
5F7kTp+WOdewvO/DRqPutMythuWA71jKgV4/TxqW76wcTLzIeGC53sO9yIW+
I3OfYXnch49G3R2ZKw3L6Z7Si++UvOYlSj9jvcitPmI06u7KnGhYTu5OpRzt
9fObYbnMyrHEjV7kMMu9lafuc5F7LieXXf71LqWcpRf5tWzayMVu9SJX+Z3M
TYblWR81GnXvZC4zLOd6Z5w5vX5eMiy/WNlJvNx4YLnVVS9yj+UOyzmG5U0f
PRp1vcxNhuVQz9yLHGM5wnKLYfnRx4xG3SyZgwzLlXatM+T1yud1jfJ2lV9I
vPJ4YDnR7q9Z8x6TwwvLdz5yNMbEGHpX/GK+O35zLOaH9hHl6srjlcd3XPGf
oxc5uWywvKpdSzlnr5+HCsufnasXObrHZP4sLO9Y/Vy9fg4vLGdZHvLc6cMf
llernCfxmuOB+c7Xi5zb4zLHFpY7fPxo1B2XObmw3OL5e5FbK69TzuOXe5Hz
e8Jo1J2QubewfGT1/G7KvFdY/u8DzahjlwO8YNrl52ov15k/u3zYpXqRCyqX
c/1y/gv1ot0ivcyVzdxYWF7wiaNRd0vm0sLyhr/ai5zYn2YOLCz/96TRqPtp
5szC8oMX60Xu6yuZ6wrL232wGXWvZG4sLOdXHu/i6cMflsupXCLxpuOB+Z5S
jrtML3JL5bS6Rvm8J4/GNb+WObCw3F6+S6e/3FVYPpRxWijH6i9lDbhZr887
COMhlGcqf1W+7S/E//ciF5UNlrcr/3b59OEPy1FVfi3x1uOB+a7Yi9xUuaXy
AmF5uKeORh07Gywnd+Ve5KC2M+cUlm972mjUtTNHFZZ7a101dX2VuaWwPNmH
mlG3auZ+yguVmyhne7X0mZqT2ou8UeXqiXccD8x3zV60lRN6+mj8DxtXYy3n
TD27XNqz6Mb2Iq9tas5oL/Jkz6D32ot8STZYzuy6vcgLPSzzN2G5qA83o46d
DZYbK991vfThD8vrVK6fePfxwHw37EWe5xGZ1wnLiz1zNOrqPFBYPqxz3yjP
X34eLL/V579s3g9s/OS6yifapODrfL7NwPJVf1Dwpr2+liNMX891r5Xj4DfS
7yYuCDxg1iTWI0uU/4/qxbMbL5m1hHWEtQNsvYDXy5zefN4cHjb/x4tlbm1e
bS4Nmz/jlTJ3N283p4XNY/EymWuaZ5pbwuaTeI3M+cz3zPFgczC8QNvluZlf
wOZXeHXMgcx/zHlg8xy8NOY05jOeZZ5znl94XcwJzAfMAWDPfbwons2ey57F
sOc4XhFtf5lcHJ67nrmeU/o3h/FsYvc82rcXPHRb5rPA88PvPx6G3XrByeA3
Fvb7jL9094K3nRg5tPAfJkW5R2K5fjBfGlh7FvzphMjDheUtKvdKLG4E5os7
dG/XPzHycGF5f8p9Ett3gvlaC7sGPHvT5/VsmWvJA3vB/+aecY18rWH37wXf
3Ywjgd0zygN6fY47mC8eD2PieeoZ61nrmWv96z6ckPcYLjnHtGY8uBf8bO2R
wO4x5SG9PicbzNea7uu94D2bdSSwe095aK/PdQbzteY6rBd8YvOMBHZPKg/v
9TnEYL7WREf0gqdroZHA7lXlkb0+NxfM15rFdwr/lXsVJ9Q2aTu61+e8gvmq
O6YXvFJfGwns3lYe2+vP84/rBUfTyEh8Lr6Pq4+E3T2Pf+WMXvCx+C7gbNLO
fPKEXvAgrT8S2HdBeWKvz30E8zVnPqkX/EKbjwT2HVGe3OtzCsF8zWlP6QVv
z/YjgX13lKf2+lw9MF9zztN6wYez+0hg3y/l6b0+Bw58Rt6DB+X17jcS1+he
Up7Z63PFwMbAnA2/If6QQ0cC+w4ap+NzrHw3cabw/X8akohr
         "]]],
       Lighting->{{"Ambient", 
          RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
         "Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, 
    {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl1Edsj3EYB/BHa9SoVlVVS7VGa7S2S124cOHChUvVvhgJiXAwDiTCxd5a
o1Vq71WrFbEORGKExijBBQkOZnz+6eHT5/n2ffv+3t94WzB9wcT5LSIix48H
XSISfVlmxJO2EcP1s9jGXX5T4oapbKCBHxQlRUxhHVf5QkFyxCRWc4FP5LaM
mEByNw9qH1GeFbFCTpEnyMflU3KqvEZu0qfp6/Q7u0Z0aRWRLX+Tx+k7dYhY
qh6hkbTWEWNYRDVPadsmYhTzqOQRySkRI5nDDu7zl8HmPI3U1Ihn2RGb9Let
SUVaxGb9Frayje3sYCe72M0eKqhkL/vYzwGqqOYgNaQb45Caob401mF9pv6V
vlbf1zyz5Cb5iFwoZ8tH9UX6HP0H147J/eTu8nF9nnpC7ameVE9xmjOc5Rzn
ucBFLnGZK9RxlWtc5wY3qaeBAs/8aMxb+vvWpca6bNSXM4g/1vAe25nNCJJ4
aM0rmEspKTyxN1UsZDQdeWkPy+1prRqevURNl0udx7H6lsb8au+HyZnyO/WS
nKe+dVaeq6vlTPWkXOH+ko7W1rlaLv9rFzFefW0eOepHZ/I8q5hIPp+d3TrW
MplCvjvj9aynjGJ+ecU7bGUmn8z/sfGG6bupxcYYqh/CYAYlvh2KGcgA+tOP
IgrpSx9604sC8ulJHh+M0UP9aQ/e61d2tu9yk36ZPjfxLub+Rn7oHXLkV/ql
riU+uRmuNcqLZY+I6fILeZHs84qp8nM5K/EO3t8jwq/C5cigE+nNWxOWNdwS
HZo/5bC04U/DdoftDdsZiW20zGFZIykxp9Tm/zH/AaSpiZ8=
      "]]}},
   VertexNormals->CompressedData["
1:eJztXQuUVsWRhmh4LCygJOL6SqJRwRPJrtFVVHINIcEcXV9B0D0JoByDCSSA
imgElTVRUYxKMiIwvAQCsqAiYMQILbIoQjIo8gg4CeIIw2Nm/vGBwYC6Jn/3
/fnr5rO6+vb9H3A5ntPnL3v6VldXV1dVV1V/5drBV1z3uSZNmow5tkmTw5qE
/+7MbxuDFH5wwDe/M/XeJS9kwv+f/a24/or2R/ClLf6kmuzPjZ/9PSVod9IX
GhbU5ODPDPrX94d3W8SNHxtPX3RL4W7wdF2KCy81+vvCx5d8OPXZFh+0asyN
k/39pHj8455ce+H1rXLjZ3+vgf31d8P+5rtSOqTwFC6BG76m/Gz2h+1+NPzO
8bkvuHQ/WuIfJIW/kSu2+5quy9FHb7zzS/dtV7rVv58J8n+b//+MkT9kfmuC
414e+ul/1Srb1unfzzvLYcQ/tvRp33zV8sW/rlbZtk63c1k+NPLS0JOTn1J+
Rv3jztd1fCn+Kbw4cN9yqVzhSP4g/Qr1l8qlUtNviwVP+bA04drvEfKn8XuU
Gp5SuGc7TrrfrfkcyRnUXyqvpPNN4eUFT8+XFF4KcF/6lWe9KyKH0/1yaMMP
Vrs1rj9BqrcQ/0/o53HFH/mjklqvfP9Odejn0XDjBwoMXCpPfNMnabgvPxKz
jtbj+/I7MX6t2OOg/sauovZUXH5O9fwsvFz8CUj/kY6D5iu9H2T0K2t6MvIw
9rqkeloKL0f4oca3aL7Ir4jkA4q/ksYtIHh6bqbwYsBLzd70rA/H1udpf85u
8nzfHXB6C4lnCOMcLvtiy+Ev78n1v2n4uX0HPfy4jl+o0/EM1WE8gyv9QdxF
BB/f9EFwaVxN0vEDSc/XFz6lJgdS+MEJl9qJSetFB6vedbDOC8HLzN8S2gtp
3HI+vNTWUeqn8vVdZG8mPd9iwQ81v0Sx4b70PRpXXOx5IXhS+u35Y4/84d4J
21V++9vE5Z7Uv438VL78V/nfKx17xxcc8bmjnyGxe71i3T+WGrzc8S8XuRoX
juIZfMklV3+dLf8gvSXfv2b8bc/b8m1sv6UvPxjqn/Q4jt8t2/2ewssDjvxU
yN+Oxkntnc+Gl5ofIGm463ylebK+4L6+e7DaC6UCR/JqdW3NxA37G3Rbpdsn
4DjjNg3sccTpNUFWru0MOPlmfkv1Kwr/7fGtNu/52rrg1rntXh7y7QaV/b2w
7Pit0PHD5rc0zvNQsTtSeBZeLD0ExV/d3r5T3ba9OXnV89pjLxx/2czE86B9
wcvlfudQ069SeAq3gUv96knHmafw8oKXqvwvNf9YofEp1f2YlD2C4jCJv53N
KzTjFrpemW84ojOyj6TjSNdR6j9Jyi7j9GTbuF9f+BxqcWscHPFnsfx+FO7L
zpLm/fnKx+HOBc9x4CV/z+4YPxBbHkrHj9ufy1OQ4ukLTvd1ek/02XAdd0Va
efyVFI7klaXeFTvOgdZf9S3H4u7fMq0vUTJyOIUfnHAkz131cDB+RA6snT7z
7NMv3E7al2A95HntV9dum1cfLG17/t2XL92o21nwu6gusVROcvRMap/69g8k
fc/oaG/Gth/T+3o3eLnTTeoHoHDpfpf6ARh7MDION77UrnHUr6z7J+1/c/SD
JaYvOdp9idE/abjn/AIUDxx5rwH1N/fw5v7d9/hJz4uOY2kfOeNJ9Ctl9CvT
z8gns7+OeurhNotHZ4LFq1r1va3ZCt3OZPP+bOWwb78BHR+9i0HWxVpeof5J
y4FC32u43g8iPBHcV51DKZyO7+qfQfhL50Xh+f6Xusg9l2ycsD6n9Th0vhx9
bMeR2i8onkrHWyoab/lcx9YXn7Noa9Ch65E3rHtwl8r+ng/1ByQPkb3pan+h
/U73haufTRo/ifpLx0HrTs8RNF+uvy09OyzquXr981vUTSfsOuK8FbtV9vcU
Vm+h43P8g/Ax72GadzANHOknCC4dR6oPoPGRvEL9gd0UeceKwyep+2JOfqJ5
UTg3DqUbyacL9Y1rD+v97rEdN6lJnds1Dru6Pqib+/YHA1Y8BeNLD3t64ojv
VVbrtk63lbb0ZOO39fhKj6/o+IjOjBywhqN113yuKJ8jfKT844vffOHvmZ6J
3bOXu18IwdM8guxvei53qdzX66GGN1S23a1/rzb+dqX97cr426V14Dl8GHs/
sr+k/W3p49vfzszXel979pNby2dH/1W4LqUad2qL/8GOT6ncvyC/N/I7nXHv
5gUX7K9Xwz9fO/zOj14Psu1y8btslv63pO71QjwL9V3fePr6bqnpP6UOdz1n
yx1eavKZwpEcu/If/7aRdn3Q4ksjGpc1z6hsu0b/nsJ+N9VjiwtP6Z/97Ws/
lpo9Wy7ri/C0pSeSVyhuStdbULTegq96g+UGd/RHHbJ6S7nAfb0/xcGLXCen
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
z1vbX0nrD3HhWbm1Rf3h1cZZcxp3ByPfbdO8fv1sVo8y8TvmHEHxPFouKyOn
jXwm40foT/l8yTl3337mlO2kfcRZ30DzkurPtuPk26tRO1TKV+i7UjpI/SRS
PdNWDzdwJPeSitN29c+Xix877n0TN365vjuA9Em0T4kfKfTjIf7RcQWhPDRx
Beg89XWvx8kZuo84v7TjeRfb7yqF0+9y8eRoHHquuc7Xl/9Wik9ScO5d41K7
Zyw1eJnkGUXk/4hVk2+qumW7Mu1l/W+feP0HS4J57VfXbptXr5a2Pf/uy5du
DLLtLDhfNL70Xiz/7w++e9IC4V/0feoal2ULX37Fzg1N9+4IzurW88iJH9bo
drr2I2a0X3FNxK/o6z4Cwam+hPYFgqP8Td94Ujgn/5PWA5Fdk9R8ObjUT57C
iwsv9fMXwZGcfLGiw+R7z6tXJ/xy7+zm+zfpdrz4fpmDF5puyK+O3jkttn/S
el4gX+OwpyeO+F5lncq21fp3JbQrifyPxJPQ73L2YFLz0nEL4bqYuAVXP0Ns
PD3lWTB8mPi8qP6G8gel80XrhfoXqz4PzEMUyo1Sqy8kzZcs93khf5fx/5r+
xg9cLLkhzS9G9Df3cyGc3NMlhb8UruuEhP/f6A9IziA+lH5XagdJx0d1D665
9OMzTp2vdJtR2Rb7b9H4Se87Ru5F9pd+vyaEm/dr0P7yhaeveaH+Haf9/KPR
D+XmO2Tg/tnNWq0ouXkhOIkPCUx8SJfKfb0eanhDZdvdul0dHN/06Km7rmpQ
7Xtd98Ue561Tg4+/57iFH07wVn8m/+/d/VrS/LtyWS+pHiWVGwheKLuG2nco
fmn+D7v26TEloyo+3rB80bDlQbb9tTc5T/Dx7kdC3zXxNwYeieeJ+V1f5wLi
Q3Qu/6FT2ytGHDCvkdd3H3XxU78uWv2opOHSeUn1bSSveo+uHTbxtSrdNuh2
KRznzf8ZeO3qVRl13PaF227r9rxusZ3li86FqpNTKvEAKM8Irm+R3lP2NS8k
Z6T1atB3pXwojeeX5rknLceYOq7WdJbWhUh6Xgh/ZPdJv+sLjvBHcR2+6z/Y
wqXjI/ojOOKHYs0LyR/EPwWqC2otl6T8j/BP+jxl6rBZ65NJ8wnjt4nwrZT/
pfj48vNL6zkgPRzRwZecl9LNUX+w1ot86atSfyDCn+gVbH66L7g0zhPRGelR
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
IrgrP9vacQhPqZyXrgvSE6TfRX4haby3a/1tW384io/l6tjTcRi/YmReaF28
fRfEuaH4dlIHPsyz4+gcoSfaLyAuBe0jaR1X6T5K+hx0zfuOS2e0f7m4HXof
xNlftnqyVK7m/4Z1VKRxqrHjdtD4SM6guD6KP6qPgfQHRDeirwZGX+Xyx+l8
v3BDs2PbDl+sxrdZuXXtuozK/h5vSzfr+1DbeuyHPT1xxPcq61S2rdat+/sd
vu550fqiOjO297Y6f8zkkwUmjwytu7lv0/dv4b3b648f+ecz/rZLdXrliTGb
T9sa9Fz28tSnJk+ndmvolyb3dKE9a+aTP78pBatXKb3Pla4jHV96/4u+u/yK
nRua7t0RnNWt55ETP6xR2XZ68Ln60Y++XrtL/XbOVTfVXLQ1OHXapAv+qCbD
93f+5Qfrfnr/93ao07cOarzitbfV9g3n7V6+bKJ4vtJ3xoulz/uCS+1r33mX
SccFJQ13jINyrivF1bug4yB5NWRNp2MrrqsP+m04qeqOMzYFF7zd4cwr/zDV
6JkhHxo9k6vzIJUzScGRfED7VGo3SfO18/vl9BlLeyTUP6X9XelJ9QGpX0j6
3aT1/2LBpec+qheH4FJ7GX0X2Ttc/TpqdxD9WXH+Cm7dqTwp8DsvseWY1C5z
1NMKPi8pXIpnueDjSP+A8HPEb8PxedzvGrivd76k/OyLD33ZNYy94yuPsmz5
X0pnZO/b2pVIv0X6j+U5FfLncdsXbrut2/Pqzf8ZeO3qVRn9u9LUPQto3bMR
F3191dhzM8G4wWra7H0rVbZ9NljWrXLJxW12BD9+bsfJd7Xepn/PpvsrzFMm
cS/hfdbE1ns++dW1a1Xvnzw659szGtStv//ulT++69Hgjvl33b63vkZtmfTV
yTfv3KF/L4DriM5Zzj9M83eWbDpj5I8nVqtsWxds6v3kQ1VXTQ1avvTzlZ98
5U+q1XvzmnaYXB80f2jI8R0emEbvL0I/ABN/GMINfcz9cb5/bqbY7uD8ElK/
k61/DOlRUr+uNE4e4fnU0Eu3DHm6Xr1w6qZt7y3bqP53y81nfGfeFEifx1c8
3K7HdzLq4XdHTJ3zx1VBv4u//8LQv0yDej6qL4TWy9U/KYWXih1aKDzROJTP
pX4tBPcVtyYdXzqONE8E1a/2NS8EF9trjnFBQnwi+x3hie4lpf4BaX/p/S+C
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
    "]],
  Axes->True,
  AxesLabel->{None, None, None},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGridsStyle->Automatic,
  ImageSize->{616.4476542870267, 529.3333333333334},
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], "RotationControl" -> "Globe"},
  PlotRange->{{-1, 1}, {-1, 1}, {-0.2336248755455017, 1.1194581985473633`}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic},
  ViewAngle->0.4277368403354277,
  ViewCenter->{{0.5, 0.5, 0.5}, {0.47654957480075033`, 0.5649830380651297}},
  ViewPoint->{-2.422694176975927, 1.311531067628668, 1.9648000365156495`},
  ViewVertical->{0., 0., 1.}]], "Output",
 CellChangeTimes->{{3.6804509250131807`*^9, 3.6804509297789345`*^9}, 
   3.6804510142546864`*^9, 3.6804510767099495`*^9, 3.6804512176141224`*^9, 
   3.6804514877764874`*^9, {3.6804515233176336`*^9, 3.6804515337227573`*^9}, 
   3.6804515693191414`*^9, 3.680451621840664*^9, 3.680451742628253*^9, {
   3.6804518567635612`*^9, 3.6804518600697737`*^9}, 3.6804519783103304`*^9, 
   3.6804522561498814`*^9, {3.6804523825747976`*^9, 3.6804524066313763`*^9}, 
   3.6804530003436546`*^9, 3.6804533637123585`*^9, 3.680460234042656*^9}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Learning \[OpenCurlyDoubleQuote]Sin[3 x y]>0\[CloseCurlyDoubleQuote]", \
"Subsubsection",
 CellChangeTimes->{{3.6804507867252703`*^9, 3.6804508078216476`*^9}, {
  3.680450965765478*^9, 3.6804509705495915`*^9}, {3.6804510395973988`*^9, 
  3.6804510410773745`*^9}, {3.680451762444683*^9, 3.6804517909650903`*^9}, {
  3.680452041620799*^9, 3.680452051260621*^9}, {3.6804524641635017`*^9, 
  3.6804524798673635`*^9}, {3.6804532225854025`*^9, 3.680453227881425*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetChain", "[", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"DotPlusLayer", "[", 
       RowBox[{"40", ",", 
        RowBox[{"\"\<Input\>\"", "\[Rule]", "2"}]}], "]"}], ",", 
      "\[IndentingNewLine]", "Ramp", ",", "\[IndentingNewLine]", "40", ",", 
      "\[IndentingNewLine]", "Ramp", ",", "\[IndentingNewLine]", 
      RowBox[{"DotPlusLayer", "[", 
       RowBox[{"1", ",", 
        RowBox[{"\"\<Output\>\"", "\[Rule]", "\"\<Scalar\>\""}]}], "]"}]}], 
     "\[IndentingNewLine]", "}"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6803580407480574`*^9, 3.680358081136017*^9}, 
   3.680358318545034*^9, {3.680358450833645*^9, 3.680358454922589*^9}, {
   3.680358520949281*^9, 3.6803585273934994`*^9}, {3.680450694661951*^9, 
   3.680450695821642*^9}, 3.680450816894287*^9, {3.680451119407272*^9, 
   3.6804512049501567`*^9}, 3.68045125579736*^9, {3.680451324085854*^9, 
   3.680451472030263*^9}, {3.680451504061485*^9, 3.6804515104773593`*^9}, {
   3.6804516629410973`*^9, 3.680451677661211*^9}, {3.6804518693813314`*^9, 
   3.680451873732929*^9}, 3.6804520552372437`*^9, 3.6804532350025897`*^9, {
   3.6804534406898193`*^9, 3.680453446132022*^9}, {3.680453591945838*^9, 
   3.680453599810475*^9}, {3.680453884385683*^9, 3.680453897274111*^9}, {
   3.680460321184224*^9, 3.6804603216295996`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetInitialize", "[", "net", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.680358433289722*^9, 3.6803584364737926`*^9}, 
   3.6804508183659563`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"x", "\[Rule]", 
      RowBox[{"Boole", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"First", "[", "x", "]"}], " ", 
         RowBox[{"Last", "[", "x", "]"}]}], ">", "0"}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"RandomReal", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"10000", ",", "2"}], "}"}]}], "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.680358323212538*^9, 3.6803584031626587`*^9}, {
   3.68035846091537*^9, 3.68035846465798*^9}, {3.680358535081916*^9, 
   3.6803585378656015`*^9}, 3.6804507086856833`*^9, {3.6804509096300173`*^9, 
   3.6804509097505503`*^9}, {3.680450994789851*^9, 3.680450996390175*^9}, {
   3.6804510501735764`*^9, 3.68045105076607*^9}, {3.680451687591172*^9, 
   3.680451688462194*^9}, {3.680451800068883*^9, 3.680451800605103*^9}, {
   3.6804520685672483`*^9, 3.6804520945170126`*^9}, {3.6804528804025493`*^9, 
   3.680452893386714*^9}, {3.6804532421383505`*^9, 3.6804532487150755`*^9}, 
   3.680460382584705*^9}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomSample", "[", 
   RowBox[{"data", ",", "5"}], "]"}], "//", "Column"}]], "Input",
 CellChangeTimes->{{3.6804603858121996`*^9, 3.680460392567562*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "0.4475658098028741`"}], ",", "0.938667625695282`"}], 
       "}"}], "\[Rule]", "0"}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0.44928525521699747`", ",", 
        RowBox[{"-", "0.9674091214621829`"}]}], "}"}], "\[Rule]", "0"}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "0.9441308570881204`"}], ",", 
        RowBox[{"-", "0.6720855195792481`"}]}], "}"}], "\[Rule]", "1"}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0.4428404796921299`", ",", "0.775714853298183`"}], "}"}], 
      "\[Rule]", "1"}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0.7953189351048224`", ",", 
        RowBox[{"-", "0.017081551171236775`"}]}], "}"}], "\[Rule]", "0"}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{3.6804603928868265`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"result", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", "data", ",", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "250"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6803583683570848`*^9, 3.6803583753528333`*^9}, 
   3.680358427497135*^9, 3.6804508205499535`*^9, 3.6804511683417273`*^9, {
   3.680451541565759*^9, 3.6804515462452507`*^9}, {3.680451576949438*^9, 
   3.680451577173006*^9}, {3.6804518818292227`*^9, 3.680451882277031*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"2"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Inputs", "Input"}, "Mouse"], 
            "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"40"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "2"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"40"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["3", 
              GrayLevel[0.5]], {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"40"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "3"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["4", 
              GrayLevel[0.5]], {"Layers", "4"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "4"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"40"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "4"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["5", 
              GrayLevel[0.5]], {"Layers", "5"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "5"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "5"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"decoded", " ", 
               Row[{"vector", " ", 
                 Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                   Row[{"1"}, "\[Times]"], "\[VeryThinSpace]", ")"}, 
                  BaseStyle -> GrayLevel[0.5]]}]}], {"Outputs", "Output"}, 
             "Mouse"], "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {40, 2}], "Biases" -> 
               NeuralNetworks`TensorT[1, {40}]], "Parameters" -> 
             Association["Size" -> 40, "$InputSize" -> 2], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {2}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {40}]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Ramp, "$Dimensions" -> {40}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {40}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {40}]]], "3" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {40, 40}], "Biases" -> 
               NeuralNetworks`TensorT[1, {40}]], "Parameters" -> 
             Association["Size" -> 40, "$InputSize" -> 40], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {40}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {40}]]], "4" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Ramp, "$Dimensions" -> {40}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {40}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {40}]]], "5" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {1, 40}], "Biases" -> 
               NeuralNetworks`TensorT[1, {1}]], "Parameters" -> 
             Association["Size" -> 1, "$InputSize" -> 40], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {40}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {1}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Layers", "3", "Inputs", "Input"] -> 
           NetPort["Layers", "2", "Outputs", "Output"], 
           NetPort["Layers", "4", "Inputs", "Input"] -> 
           NetPort["Layers", "3", "Outputs", "Output"], 
           NetPort["Layers", "5", "Inputs", "Input"] -> 
           NetPort["Layers", "4", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "5", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`TensorT[1, {2}]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`DecodedType[
             NetDecoder["Scalar", 
              Association[
              "Parameters" -> Association[], "Input" -> 
               NeuralNetworks`TensorT[1, {1}]]], 
             NeuralNetworks`TensorT[1, {1}]]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{379., {80., 89.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.68045116906149*^9, 3.680451213600884*^9, 
  3.6804514859343963`*^9, 3.6804515211315565`*^9, 3.6804515673887005`*^9, 
  3.6804516191834087`*^9, 3.680451739665532*^9, 3.6804518478376617`*^9, 
  3.6804519750166707`*^9, 3.680452224380748*^9, 3.6804529904914856`*^9, 
  3.680453351218804*^9, 3.6804535409698677`*^9, 3.6804536972960014`*^9, 
  3.6804540112843637`*^9, 3.680460447058075*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot3D", "[", 
  RowBox[{
   RowBox[{"result", "[", 
    RowBox[{"{", 
     RowBox[{"x", ",", "y"}], "}"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"Mesh", "\[Rule]", "None"}], ",", 
   RowBox[{"PlotPoints", "\[Rule]", "50"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.6803583789252787`*^9, 3.6803584162012367`*^9}, {
   3.6803584735966024`*^9, 3.6803584917210913`*^9}, {3.680358552786993*^9, 
   3.6803585569379997`*^9}, {3.6804507381376443`*^9, 3.6804507479426928`*^9}, 
   3.680450929230296*^9, {3.680451013709833*^9, 3.6804510138222623`*^9}, 
   3.680451076397651*^9, {3.680451527751148*^9, 3.6804515330462055`*^9}, {
   3.6804517309652963`*^9, 3.680451733757086*^9}, {3.680451851701318*^9, 
   3.6804518594453087`*^9}, {3.6804522299407773`*^9, 
   3.6804522526524506`*^9}, {3.680452378628501*^9, 3.6804524026444826`*^9}}],

Cell[BoxData[
 Graphics3DBox[GraphicsComplex3DBox[CompressedData["
1:eJxcnXd8FNX6/5ceeuhFhFVUQFFQUFGBXYp0JPTQl4ReQ++49BYgBBBU1FVR
EfkqICoimhVEAREjTZC2AtIhG0VBRPyRcOf5vOd3/7kv3ve5z3nOmZn3zDln
MntfwvB2fXN6PJ4xpT2eXHf++zFf6Yv//ZeR5vz3HeS/2jbTV7jp3MibG66S
ezs3z/RdfuHmoUaJV1zxaf5M3/edhvzwW8nL5IEqdTJ9a3ue2D7n24vkkcU1
Mn3z+sVtqTb+giv+xkOZvgHDtq3/vtp5V7u9K2b6mo6t/d7Qo2dd8btKZfoe
mvrua0UX/kYefrxwpi/P7LLLNtQ/48rzSu5M35mF8+e3j54iD+W8FfVtX34r
+Oebv5J7Bv8R9b312rBxK9pHXHn2X4z6crb8+ujIAifIg8+divrCXd/Z+enQ
o67xKVIs0zd10LxPbqYfdsWndsz01Z049K36tQ+58p8vm+m7Oa/t4ukr9rvi
a+2O+ja//OTkb2+mu/o7/82o71K7WvtKbt3j4q+8H/X1G/nPB6umf+fq1wcb
or5fl2yf9UDzba46v/j8Tv6EMmnxlba48nz/ddTXvVGb39LjP3KN29FdUV/K
9JMrI78tc+W5PDfqWzktm/vY7s1qC9IiDbPzuPim36akTbzbrotHfx/k23a3
Thev3iXJ1/Ruv1w8dk+HtD13x8HF06ePSltzd9zcvP6YtIt3x9nFc380Kq36
3ePi4psrjUwbdvc4uutcnJS2/u5xd/GgZ1ja7y2yzxMXH/DroLRX7p5X7viv
+6d9cfc8dPE1b/VJO3b3vHXxmBm90/6dlX2eu3jou+5pFe9eFy6eMrdTmu/u
deTi65vHpQXuXncuHinROG3a3evUXWf3x9Leuntdu9s92yBt+10PuPjOyb3T
ztz1hov7jz/uy3PXMy4eeKq1828Xr5nRy/7t+CmrnG9by1fg/hrPy1eMX1FX
vgIP/1dLvgL3DHhEvgIPpd8vX4FH6pSXr8C9bxaTr5i/QH75ivWM8MhX4IFf
rstXbLdhhnzF/B+cla+Yv8QJ+YrjVuLXqPmK+TtVlK+Yv1EH+Yp1tvhRvmKe
6SvlK47P0pB8xeP19hr5ivzj9fIV+fbN8hXrPBCWr1hnm3nyFeMvHpllviK/
9uUI8xX5YX9/8xV57KeDzFfkZRMC5ivyCvePNl+R34oZbb4ibzVhpPmKfNOF
JPOVq55Nw8xX5PHLBpuvyL1jBpivXNdFx77mK/LNTyWYr8g9j/U0X7l4tLP5
ijy6vq35ijx4uon5ijz8Q23zlYsfeMp85aq/QIL5ijzuVrz5yjUOVxqnOb5y
5e9e13xFXnNovPnK8VCWN15vLl+BR/I2kK8YP7yOfAUe/LmGfMU8viryFfOs
qShfgXuKlZavGD+hsHzF/L/mlq/Im995jnJ8xTwb/5CvyMtfkq/A/TNOyVfg
4UtH5Cu22/4n+Yrx3a5GzVfggR215Stwb+8D8hXH+eul8hXbnb9CvmL8q2/I
V+QfvCdfkX/xkXzF47LnM/mK8RvhK8b/Mi9oviKv2amT+Yq87IOTzFfkO7f0
MV+Rx/bsZ74in5wgX7ni9480X5E3bjTCfOWqs/9w8xX5+KZDzFfkdaoONF+R
b47pZ74iP3whwXxFHl3ay3xFHtepi/nKVWeZ9uYr8sDG5uYr8nCfZ81X5J7d
lc1XruOSI8F8RZ4UCZivXHlKJZivyFO2tTVfueLnxJqvXPn7dTJfOb7J4mOf
l6/AvSfrylfgwaa15Svyjx6Rr5inbGX5ivHB8vIV67lQTL4ib5tfviLf4pGv
yO+/IV+BB+ZnyFeM/+OsfMX6u52Qr8BD2w/KV+D+6j/IV8zT+yv5inlW/xM1
X4GHpx6Vr5jnMJ6vyGcskq+Yf+lL8hX526/LV+CRj9+Vrzg+33woX7G/pefL
V4xPGTXWfEXu9z5lviIPXppsviKPTu5hviIf0Heg+Yp8VXXNB8lvrRphviLv
UDjJfEU+/p8h5itXv44ONF+56vyin/mKPLwq0Xzlqn9KwHxFHtra1XxFHje1
g/mKPDK5lfmK3Ovxm6/IPWUrmK/I06/3Nl+RHz4UMF+54t9ONF+5xq1MX/MV
eexPHcxXrnrW5jBfkQcudzRfOV7JGs4XGshX4JFP68hX4B5vTfkKPDSninzF
+GhF+Yr540vLV+ThwvIVuLdaHvmK+VPvPEc5vmKev/+Qr8CDCZfkK+b5/pR8
BR6o9Yt8xf6++pN8Be7PvUu+YrtDwvIV87z/vXzFPDdKZJqvWGfGa/IV80ya
JV/x+C5YKF8xz6rl8hXHed1r8hXHYes78hX5BPiK+T3v9TdfkYd+bm6+Il93
ZYL5ypVndlvzFXnk7UHmK/KUv0aYr8gP9EsyX5HX+XCo+Yr8xqJB5ivyNcP7
m6/I4+P6mK/IB9Tsbb5yjcP93c1X5OtPdzRfufrbvI35ijz8Q0PzFXmwXjXz
lav+K73NV+RxPwTMV+RlX9fzFXlsch/zFXnNDvKVq7/NO5qvXMc3eqC+4yvy
wEj5yvFHVpqH6slX4OFFteUrcP/1R+Qr5ulVWb4CD+wsL1+Be2sWl6/Agyvz
y1fkOXLIV6xz4A35CjzyU4Z8xTzPnpOvmOetE/IV6yx4SL5inlE/yFcch6Pf
yFcch8Zb5Su2u/hd+Yrt/n5Yz1fMn+dt+Yp81GT5ivlnzJSvyJcmy1dsd/Uy
+Yr1b1olX/F8OAZfgXv8T9YyX5Gnt+lgviJPyRhrviIPP/mU+Yo8eGqw+Yp8
cjjJfEW+ufcw8xV5s4aDzVfkcZUHmK/IB+Tqa74ijznT23xFHjuvh/nKNQ4t
OpuvyGsWamu+cvX35efNV67xefYJ8xV54E49jq9c7W4PmK/I1+zS8xX5je2J
5ivy+NPDzVeu475EvnKNwzfyFbmn8d9fOb5y9evvDuYrxxNZ6W/Xka/AQ/1q
ylfgwR+ryFeMf7qSfAUefqO0fAXuiSkiXzFPUh75ivFH7jxHOb5iPQ2uyVfM
8/4l+Qo8UPy0fMU6J/4iX5Gf+km+Yp6Wu+QrcO+msHxFXmGzfMU6Z34kX7G/
19fIV2y3whr5iuMweJR8xfonTZKvmD95hnzF/KsWyFfk65bKV6zft0C+Yv6k
v9uar8jTN3UzX5FvyhxlviL3r3kmzfEVec37hpqvyGNLDTdfkYf+HGy+Ii97
aID5ijzl077mK/K4FQnmK/JgRk/zlau/6+PNVy4+sp35ijzQv5n5ijy8/2nz
FfnOX3qbr8ib3ZnHOb4iH5BTz1eu/P8kmK/I4zcONF+Rz62fZL5yjdsP8pXr
eNXrZL4i95wq6Ow3u/j6qfKV44Osw3iotnwFHq5fXb4C979XWb4CDxS9R74C
j4wrLl8xPpJfvmK7zXLIV2x3ww35ivHlovIVuHf6OfmK7V48IV8xT7tD8hXz
fPGDfAUerLxDvgL3JG+Vrxh/7WP5ivE9PpCv2O7uxfIV6/R9Kl+RLx0iXzH/
6JHyFcdz5kT5inUumy5f8TxZPV++4vF9C75iu8EpvcxXLp7c23xFvuyPJPMV
ebh3O/MVuTcwzHxFPnfNEPOVi88baL4i9w/qZ74ij2mZaL4ijzwSMF+Rp5fp
ar4ir3mkvfmKPFS7pfnKVU9SPfOVq/7Dep/BlaeAfEU+vp58Rd6sdoL5inzA
Y33MV+Tr8o4yX5Gf6S5fkacU6Ge+Io9+Kl+RexaVMl+5xqGBfOVc91nX74c1
5SvwcOmq8hXjX6wkXzH+XGn5CtwfV0S+It+cR75iHu+/UasbPDTvmnwF7vn9
knwF7u16Wr5iu9t+ka+Y55F98hXjl+6Sr8CD/4TlK/BI4mb5ivF7PpKvGF/7
PfmK9Qx/Vb7iODSeLV+Rrx0hX3EchgyUr9ivySPkK+ZJniBf8bismiZfsf7W
eP+K9QeD/cxX5Dvr9zVfufilweYr8pSZ3c1X5HW66/mKfGXdQeYr8tC9/c1X
5FVvJ5qvyMMnAuYr8sjUbuYrV399Hc1Xrjw5XzBfkftnNjBfkZctpPcZXONQ
X75y9eufnuYrcu8QzQfJz/dNNF+Rxxwfbr4iX7NvjPnKVf8k+Yr8cFP5ijy9
ZmfzFbmnT1Fbb3eN8+Fu5ivn+s7q1uzq8hV45Gpl+Yrxne+Rr8ADacXlK/Bg
lQLyFfOk5JCvwMM3bshX4P7eUfmK+Xedk69Y/+Mn5SvGv3JIvmK7OffKV+Ce
wTvkK+bZv1W+YnzdTfIV61/9gXzFdgu9LV+x/tGvyFdsN/cE+Yrtfj1WvmK7
fQLyFY/X6AHyFXhoZpJ8xXqWjZev2G6OyfIV+cqGQ81X5OnRAeYr8vMZfc1X
5HE5e5mvyKtGtd7uyp/e33xFXnZDH/MVebPU3uYr8pq/dTdfkae828l8RR7q
H2e+Ivf83tB85arTr/cZXPGjepuvyAPpPcxX5OtXB8xXrvF/PcF85ervuoHm
K/IOFcaar1zjkClfkd96Wb5y5Z8pX5FHWrQzX5H7H2pgvnKN8+be5ivnOs4a
5p5V5Svw8LeV5CvyGmXkK/IVReQr8Mh/eeQrcP+AO89Rjq+YJ/2afAUefOay
fMX8b56Wr8jzH5WvwL0j98lXbPeXXfIV4xt9LV+xng82y1dst8R6+Qo8MPk9
+YrtnnldvmKeVi/JV+Ce92fKVzyOqYnyFce5e2f5ivUP6SVfsd3J/eUrtrtw
uHzFfm0aLl8x3p9zpPmKPObtIeYr8vRzvcxX5OvTAuYr8qozB5ivyDf36Wu+
Io9/PsF8RR5t2dN8RV6zcLz5itw7pK35ijxyo5H5inxu24D5ivzwu73NV+Qp
z/U0X5GHPu9lviJfeUjzQVed6YnmK/LzuUaZr8jX9Z9kvnL1q+hY8xV5oQry
Fblnl96/cp0PA543X7n4I3HmK/JmM/uar5zrNSv8qQfkK/Dw6/fIV+CefCXk
K8YPLyBfgUd+ziFfgQf8f8tXzLMmKl+x3WLn5Svw4IST8hXb/fWQfMV2W+yV
r9juxh3yFbj3ni/lK7Y7Y5N8xTovfyBfMb7D2/IV+dZX5Cu2+2CqfMX4hfPk
K/a3foJ8xf52eEG+Ag/16SRfcRxG95SveJ58nShfsZ7+ifIVx6Fu4hjzFbl/
Z32f4yvyaEZ78xV58u3e5ivyB8rqfVHyDjcSzFfk4Y29zFfk63t1MV+R78xo
a74iD/7X2HxFfmN6d/OVq86jep+BPO69nuYr8poPy1fk44toPki+JibRfOWq
89Bw85VrPB+fYL4ivzVLviIfcmW0+Yo8dsgQ85Xr+P7dw3zlqudwVfOVi2/r
bL4inxs30HzlXJdZ522Ne+Ur8MjYMvIVuP9kEfkKPNg0r3wF7ll/5znK8RV4
oOyf8hV4OHhZvmL8hdPyFetse1S+Yrtb9slXrP/+3fIV253/tXwF7v1js3zF
/nZbL18x/pv35CvWX/0N+Yrjv+wl+Yp5/l0oX7H+vrPkK+Y/PVS+Yv4ZcfIV
x617a/mK4za0o3zF+NGd5Svy8p3lK+YZ8s148xV5+fnjzFfknl995ivymHqJ
5ivyyx8kmq/IA8kB8xV50uku5ivyZqPama/Ig3mbmK/IIwnx5ivy8UUTzFfk
oRK9zFfksa/o/SvyaJOA+Yo85c780fEV+fl3BpqvyAuVG2u+Ii9eYbL5irxC
2gTzlWvc8mm9nbxsaID5itzfu5P5ynV8M/T3g67x7Gp/J+jicysMNV8511/W
dfrEHZ84vgIP1colX4EHa+eXrxhfKad8BR6Z87d8xTzRqHzF+Pjz8hV44OuT
8hXbrfazfMU8S/bKV+D+mzvkK+ZJ+FK+Avd+v0m+Yv211slX4J5Vb8tXrD/3
q/IVx39IqnzFPAfnyVfMU2+afMX+vjNevmJ/J7SUr9ivjo3lK7Y7vaV8xfiq
LeUr5t/bQr5intW9JpmvyJsljzZfkYdv1khzfOWK79XHfEVe55L+fpDc07+r
+Yp8/F/tzFfkwcJNzVfkNxp2MF+RD2mk9xnIIy/2Ml+5eIFu5ivyuNt6viIv
O0HrV+RVxySar8jXekaZr8iL/zvafOXq7ztjzFfky1pr/Yo8+b4R5ivX8dqv
90XJ/Utbm69cvFoz8xX53AmJ5ivy2qOTzFfOdZbVbJ+L8hV45Kk7zzOOr8CD
T1+Imq+Yp05G1HwFHnjmT/kKPLTzsnwF7nn8jHwF7n/5qHzFenLsl6+YZ9Bu
+Yp59n0tX7GeZz+Xr5jn7fXyFftVcI18xXEb9YZ8Be499pJ8xfobL5KvOJ7r
ZslXbLfUFPmK8VNGy1fs171Yv2L8wRfkK47Pkz75iu0erS9fsf5p9eUrjtv5
U1PMV+StFo0wX5F7tvnNVy7+qOaD5JELXc1X5OsntDdfkftLNjNfkXsrx5mv
yMePSzBfkSdd6mW+ctU5qYv5ijx+mN4XJa+9QX+PQ17yA+0PkscNHmS+csVv
HWy+Ir9caKj5ytWvHsPMV+STP9T+oOt4jRtmviKPjeltviIPf1PXfOUa/3Xt
zVeuep7vb74iXz12pPnKuZ6yzue61+Qr8PDOC/IVeYeT8hXzRA7IV+D+ugfl
K/BAvaPyFfPEROQrcO+In+Ur8OCRvfIV62zwrXzFetZ+KV+x3eKfyFfgkYnr
5CvWf/pt+Qrc0+pV+YrtbkqVr1h/hfnyFdudOU2+Yp4r4+Ur9rdjknzFcduW
IF8xvsSL8hXrOf+EfMX4RU/IV+zvk0/IV+SFcunvncn94aHmK/JwagPzFXn8
0G7mK/Lgv+3NV+Tryzc3X5GH8spX5Jvv+MHxFfnKR/Q+A3ngemfzFXncyW7m
K/KY/ZoPktc9rfV2V7+6xpuvXP261dV8RZ7+Wg/zlStPJb1/Rd4hSe+Lknu/
1vui5GuK9TFfueoZ19V8Re556e/6jq9c+Rt3M1+RV33c5n0uvqzTGPOVc91k
pSl1W74CD4f+kK/APY/i+Qo8svmEfMX45w/IV+Q/7ZKvWE+Dr+UrcH/D7+Qr
8NCG3fIV6y+3Tb5inumfy1fMc3G9fMU626+Rrxj/xRvyFeMfWCFfgQeSF8lX
4MFrs+Qr5ukxRb5i/I7R8hXreRTvizLPS4nyFXmlbvIV+Vy/fOUa/4fkKx6v
DyvKV8zT5uY08xX5yr0DzFfksX0bmq/I1wc7mK/Iw94W5ivyULLPfEW+86T2
B8nH9w6Yr8ij4zuZr8gPt+lqviL3N9L77eRlP+pivnLVOb2mz/EVuefPMj7H
Vy5eobj5ijxY5jHzlaue1GfMV652CzY0X7ni2zQ1X5F7U1uZr1ztXogzX5FH
Xm7gc3zl4ssTzVeudlcPMV+R9zmi5yvn+si6jq7k03o7uH/Cv/IVeZ4/5Ctw
75Lz8hW4594T8hV4ZM1++Yp5ntwlXzE+/JV8xXpab5Kv2G7Tj+Ur9rfrJ/IV
829bJ18xzyOr5SvmWfqqfMX4W6nyFevsM1++Ag/umSZfgYdrT5Cv2O5rSfIV
eCjPAPmK4zmsl3xFHuwuX7HOC2PlK9Z5oaB8xTr755SvOA6zM2eYr8ijxxLN
V+TepxqZr8jDVVqar1zxS+qYr8gjJRLNV+TLVgTMV+Qrb3YwX5HHhPU+g4tv
6m6+Ig/k95uvyMdP7eRzfEV++J8e5ivyuK7dzFfk6ZvjfY6vyINlOvkcX5HX
Gdve5/jK1d8DcT7HV+Sefq18jq/I/ZWb+hxfucahczuf4yvy5GsJ5ivyPpMG
mq9ced7WfNA1nrv1PoNzHWThHcXkK3B/23xabwf3Hr8lX4F7Bv4uX5H/eU6+
Yp5px+UrxhfeL1+xnpd3ylfM8+BX8hX5BviK+eu9L1+Bh1u+IV8xPldIvuK4
DV4hX4FH9i+Sr1hP3dnyFXhw9RT5inkKjZGvmGfMEPkKPHQc718xvkQX+Yr5
j2H9ivFZ71k5vmKdLxWTr3hcGu3JMF9x3L47r+/1kc891MN8Re6JaWy+Ive/
8az5ivxYU+0PuvL/oP1BV55J7c1X5HVqdjZfueJPaL2dPNyikc/xFXlMyT4+
x1fkm58bar4iP3BxsPmKvPErg8xXrnabDzRfkd+40d98RR63pp/5inx9577m
K/LDB3qYr1ztro03X5FHbnYwX5EPaNHWfOXK83hL85VrnOs1Nl+5+Ln25ivn
fM86D1+7R74ir1ZMvgIPfJJX+4PkDW7JV+Q/ZMpX5F3OyVfg3t+OyVfkI/bJ
V+T/fidfMf+8L+UrcH+pj+Ur5nlzjXwF7nn0dfmK/POl8hV45IP58hXbLTld
vuI4T54gXzHPmST5iu1WHCBfsb97OstX5GWaylfMc+pJ+Yp1vt1CvmL89afl
K9b/6VL5ivGeyBzzFXlS+c7mK/LA2rrmK3LvZL3PQD4+V2/zFfnKW23NV+Tn
Qx3NV+Th1dXMV+TRF7r5HF+RN74wxHxFfnbrGPMV+dySY8xX5E8NGW2+It+2
fZT5ivzw2SHmKxc/38t8Re4vVsd8RR5s8KTNB13xORvafNA1/onNbT7oOl6R
FjYfdB33ho/aerur3WAd85Ur/7425ivXeZIYMF8553VWs6W2af2K/NQuzQfB
g4V/1vMVeZ0z8hW4PxG+Yv7HM+Ur8i/PylfM3/yYfMX8B3+Sr5in93fyFeOv
bJWvwL0TNspX5HmwfkW+5DX5ivzepfIV+ftz5SvyWmPlK9a5p598BR6a2Em+
Yny1JvIV4+95Ur5i/NnK8hXHeWpd+Yp8U4J8xXH2fyJfgXtqFdF6O/mADZ3M
V+SB9YnmK/Lxz2h/kDxudlvzFXmwcJz5ijx8qZXP8RX5msn9fI6vyL0nR5qv
yLs/ONF8RV4hZqz5inzdvcPNV+StHkkwX7nG4Uxj8xW5/7cXbP2K/IF39X67
a5yn6v128qpB/b2zazyf7ma+co3DsLbmK9d4Lq9vvnKNf6n77PnKledQU/OV
K89M85KLp28fYb5yzt8s3vmofAUeaX5AvgIP1f1BvgL31vhWvgIP35cmXzFP
yc3yFdvNu0G+Ag9mfiRfMU+FL+Ur8EBTvM8A7t/xrXxF3narfMU8xzfIV+zv
wPfkK/I/V8lXrH891ts5Pnsny1fMc2WQfMU6/3tBvmL+jrXlKx5fb2X5iuN2
sZh8xfwDK8tXPC6b68hXjM93Vb5iuykbE81X5Ot/6Wh/j0M+d3hv8xV53O9t
zVfknh3lfI6vyANr4n2Or1ztnutlviK/sTTRfEV+plZ/8xV53YQ+5itXPeHW
5isXz9/E1tvJw6P194Pkdb4aZvuD5GuaDjNfufqbqPdFyc9P7WO+cp0PT/Yy
X7nGeUhH85Urf5Om5itXvz6513xF7v/MZ74i3/xOwHxF3uqAeck9Ph0naf3q
f+dp1nm7AO9fgQfrnpWvwANXfsX6lbj39eNYv0KexMNYv0KeTj9h/Qp5mu/G
+pV45LntWL9Cnse2Yv0K8d5PsH6F/pb4EOtXyJP3PaxfiXv+fgPrV8jfletX
4uF9L2P9Cu2mLsD6FfJvwHyQ9fzYH+tXyHOlI9avOJ5NsX6F/JurYP0KecrF
YP0K4/9efqxfgU/B/iC4//dKWm9nuyMrjvbZ+hX44dg+5isX3zhI61fg3kS9
L0qevk3vi5IHn9f7oq74PFi/Avck631R8lC3Z7V+BX6snr4nQ9645lBbbyeP
NB1pviIfv3yk+cqVp3KS+Yo8JmGw+cp1fKf0M1+R13lZ32cgTxrYxXzlqrNh
G/OVazwDT5uvXOP2Yg2tXzHPtwGtX4FHz4zQ+hX722+S1q/AD42abr5yzses
0yE1Q74CD4Quylfg/rZn5SvwcI5T8hXzbDwuXzFP4hH5ivWUPChfMf836fIV
eHDMHvmK+R/aKV+Be37eLl8x/4w0+Qo8UuVj+Yq80LvyFXnmSvmK+Q/BV+Ch
L6bKV+xXaIR8xfGc1Ue+4rj1HyhfsZ5jHeQrtnvkMfmKeWL+zTBfsZ5rxzPM
V8zfBfuDHOfkZ0aZr8jXzxhnviKv+fV48xX5gctjzVfkuyuMMV+RH26l77e7
+GR9v5088OBw8xV59yn6fRzy+itHma/ICzUaY74iP7RslPmKfO79I8xX5DsD
Q81XrvjJA8xX5LEr9feD5NH+PcxX5N432puvXOOwrpH5itwT3v2V4yvy+HMB
8xV5hT9HmK/It46dZL4iLz3ZvOTiv9SdY75yzrusap7H+hW49/Y++Qrc3zci
X4EH+p6Vr5in9Cn5CtzzHfYHwUPjjshX4MGqB+Ur1nMkXb4Cj8zbI1+xv+u+
ka/IX/tCvmL+RRvlK9b/4vvyFdsdHpKv2K/ACvmK4zZ0oXxFHo/3r1jP3i7y
FetJbiBfsV/Nq8lXzJ8P80HG572o84b5T5fS8xV59fLyFfOMeOo98xWPo+/E
67Z+RT7+s2X294PMf3voEvseMvkraQttPkj+wsiFNh8kv/XAQpsPkj8bmm/z
QfJZ22fafJC82ZtTbD5IPn7zaJsPks/MPdLWr8hrvjnM1q/IBzwz0NavyOtM
7Gvr7eSB5n1tvZ08WH2grbe76pk8zvYHycvXnmb7g+Q5a8y3/UHy68uWmK/I
M+uvNF+Rb7/9uvmKx71zgbfNV+SvffGu+co5v7KPb7uZ9nty5EUqz7LfbSLf
9scs+30U8pRvZtvvEJA3WT7HvvdNnrPfXPuuLvmnT82z71eSB/PNt+/EkaeW
XmDfYyK/WGaBffeE3F9ugX1fgHzu1Vn2d7zkx9ZNtL+XI086FLC/SyH33Hre
fOXiZ1qYr8gj37cxX5Gv6dLOfOXK80sX258j/7bQGFsHJ5/50zRbbyJ/p8I8
m9eRD8hYbM9P5JsbJpmnXMe9WsB8RT67yxXzFbi355ar5ivw4J8DM8xX4JEx
eaPmK/DQAw9GzVfMU6RJ1HwF7v+zZ9R8xfwlm0XNV8y/qX7UfMX4C09HzVfk
FR+Pmq/Y3w4PR81XrGde5aj5ivV/VSFqvmJ8n3JR8xXjb97hjq/Awyl37iOO
r8ADVe6Jmq8Y/+Ud7viK8R3u1OP4iv09fG/UfEW+tGrUfMX8L9SKmq/I898Z
Z8dXbLdhc+O2Dpp1Xj30xHR7viLfPGmsPV+Rr3motz1fkXta5LDnK/LwQr89
X5Gn54qz5yvy2Hc72PMVeeDDF+z5itxftLE9X7nqKdfInq/IQ55m9nxFHrzQ
yp6vXPVciLPnK/KU7u3t+coVn97RfOXK3zjefEVec3NX85WrXxvbm6/I67RP
NF+RX/WNN1+56hk8w3xF/k77+eYr8gUrZpqvyBt3GW2+cvWr1jN2noFH3m9w
1f4N7j3cMcN8BR4ouVO+Ag+v/ivDfAUefKeMfMU8cVXkK/LEe+Ur8oUl5Cvy
n0vIV+xvo5LyFft1pKR8xfqHl5KvGJ+3tHwFHlpVWr5ifK0y8hW4f1cZ+Yrt
9iorX7Fff5WVrxifXE6+Yn8rl5evGP95efmKx8V3r3zFPDeryFfknzwhX7nG
rZ585Zwv2dddlU72fEXuPdjKnq/I/Z88a89X5J4rseYr8siKBuYrF7/3efOV
q918LcxXLn5VvnLxS23NV646e3UwX5Gv39fJfOWqv2kX85WLf9HNfOVqt0ZP
8xV5s7YB85WLL+htviJvvCPBfEUeWvGc+Yp87ucDzVfkf42cZL4i33nmRfMV
+bWeI81X5MEC5cxX5NEGw8xX5HmfnmPPW+Ch1rl0/jE+nCJfgfs7fiFfkVf/
Wb4CD+T2yFfgwXuKy1fg4YHF5Svyz4rLV+CRPPAV6+9QQr5injdLyFfg3mgJ
+Yr9ql9SvmK/kkvKV8yTs5R8xfiVpeQr1vNYafmK7e4oLV/xeHUrI1+xv7+X
ka/Y7tyy8hXzVCwnX/G4vFNBvmKeQBX5inXeI4/Zumb29Tung/mK3FOxtvmK
PBBtbM9X5OkT4sxX5LFX25mvyFN6dzRfkXsPdjZfueKbdzVfueK/7G6+crX7
eC/zlau/+wLmK/LNhRLMV+R7miSar1x5gn3MV+Rzt/Q1X7n4tX7mK9e41Rxg
vnKN88Un7T1yV7ufDDdfkR8rkWC+cudpa+tXrvFcOczWr8j9ux42X5EneCeb
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
cspX4N7pOeQrtrs6t3wFHmiTV75i/N/55Ctw/+r88hX7+yB8RT6qoHxF/nVB
+Yr1F4WvWGePQvIV+QeF5CvyvwvJV+DBpoXlK/DQ8sLyFfnpwvIV+eNF5CuO
T7CIfMX+7i0iXzHPp1hvJz+kfUBXnr8qy1fOOGVfd39ONV+Rr1v3ovmKfO3j
QfMV+b0Lg+Yr8pTOc8xX5LmHzjZfkVddPMN8Rf78hqD5itw/cJr5irz89Znm
K/Lji+aar8iP/qP1K/Bw/01LzFeMX/GpfOXK/43Wr8g/W6b5IHnq9JnmK/K5
SbPMV+Sje842X5H3aTXHfEXe/tm55ivyR6vOM1+5jmPp+eYr8rpxC81X5PPO
az4IHqqfR74CD+7KJV+Rd8gpX5Gf9MhXPC4Hb+t9HfBIsVzyFbh3a275ivX3
zytfsd1iMfIV83+RX74CD7xZQL5inowC8hXHp15B+Yr5FxSUr8iPFJSvyKvA
V+zv2ELyFev8ppB8xXEoDl+B+wOF5Svm/7CwfMV+3SosXzFPIbwvyvof0T6g
K77lg/KVMx5Zdc6+HTRfkRfqOs18RT79k2nmK/KvSsw2X5HnfWqG+Yo8Jl7P
V+RxfV80X5Ev8M8wX5EP2DvbfEXefvJ88xV5iwuLzVfg/nzlUs1XjJ/za4r5
irzhT7PNV+R9S84yX7l4Ts0Hyf3R2eYrFz8xx3xF/vCeueYr8oJb5pmvyC+9
N998RX5k+QLzFfnYofIVea8di8xX5PWm6vkK3Fsll3wFHtyYQ74CD9XzyFfg
4ZR/9d4zj9d7N+Ur5l+TU75ifLVc8hXz788tX7H+qXnlK/BI1Rj5iuOQnl++
Yp6K8BXrGVJAviLfUkC+Yr9i4CvGdyooX7Ge1QXlK/b394LyFfvlLyRfgQcW
FZKveLyOFZKvmL8Bnq+Yp3dp+Yr1T9M+oGvc3sTf4zj9zupX9+n6PgP5u1tm
ma/IPzs23XxFHvz3RfMVeZ0bWr8iPzZvmvmKfEeZWeYr8rXvzDVfkX84MNl8
BR584VKK+Yrx22csMV8x/p/KS8xXjN92fJ75irzEMvmKPO/0OeYr8oJJel+U
/EKPeeYr8n0t55uvyL9+ZoH5ivz/qiSbr8iTSy00X5G/2mCh+Yq86NUF5ivy
xvemmK/In41ZYr4C98bmkK/In8LftYL7W93S++08Lgl/y1fg4fF/yVfgoUV/
6L1D5n8ph3zFeH8u+Yp1XsotX7Hd5XnlK8b7Y+Qr1t8qv3xF/kp++Yr5z+eX
r1jnUwXkK/DIzALyFfPsKyBfsc774CvwwPCC8hXjvywoXzG+IHzFcV6B9SvW
+Sn+fpB1HtI+oCv/X/o7aPseYbaHZ8hX5PEtNR8kn714gvmKfMu78hV5s956
viKPzdB8kPzfO89Fjq/Iq3deZL4iP1ZtifmKfN5V+Qo82PbjFPMV45v8mGy+
Ij9fYq75ivxyDq23k4cztN5Ovvb4fPMV+YrvF5ivyKd+nmy+Ih/83kLzFXmP
5YvMV+S1Zyw2X5GfiCabr8gbFl9kviK/uk++Ag/XTZWvwP2Z/+r9K/BAvn/k
K+aveEO+4vGq9ad8Rd78d/kK3BvIkK/AQ/088hXr+b8c8hXrj88lX7G/OfPI
V+CRdXnlK8Z3jpGvmH9XjHzFcSgDX7FfffPLV+Qf55evmCcHfMX4NgXkK9b5
WgH5iuNzqYB8xfF8pqB8xeNyGfuDzF+onHzFPNW1D+gaz5bV5CunH1n98hzX
/iD51me03k7+wVrNB8mT68wyX5H3/nau+Yq8Zodk8xV4sPH9KeYr8sXLUsxX
zBPfJcV8RV6gonxFfqJAsvmK/N2l88xX5KFpev+KfMbwBeYr8oQeyeYr8pYt
F5qvyJ94ZpH5itxbZbH5inxxgRTzFfnkaSnmK/LYHfIVeamQfEU+aM5i8xW4
/0L3JeYr8PDDFVLNV+De7X/LV+RH/pKvyDP+kK/AA3ky5SvWc89V+Yrxj1+S
r1jnA1f0/jTPq/Ie+YrjsCOHfMX8w3PJV+CRcnnkK8Z/k1e+YrvX88lX4KHn
Y+Qr1rMsRr5iu7/GyFfkWX8X4Pyb4zY1v3zF/Hvyy1fk5eEr5hlQQL5ifxvi
fVH2q3d5+Yp8mvYBXXnefFi+curNvp+ef9F8RX5+2gzzFfmxonPMV+TvvDbf
fEU+8pFF5ivw4GvPppivGP9/txebr8iLzV1sviJfVWyx+Yp8ahO9f0XeYtk8
8xV5mxx6viJ/JkP7g+Slj+v9dvLY7xeZr8jPbl5sviIf3j7FfEWeuDvFfMVx
a99gifmK8a+1WmK+Im8yWr4ir9JGviLPWo9yfMV2j5yVr8D9Fd6Vrxi/7E/5
ivFrf5evwMPhDPmK/NBl+Qrce/mCfMX6c52Tr5in7Bn5irzIv3qvmvU/7pGv
wAPHcshXzDM7l3zF+MfzyFeu6yivfMXxGZ1PviLflk++Io+Frzg+PWPkK/DQ
uhj5iv29GSNfkTfLL1+BR8bh+YrxK/D3gxyfz+6Rr1jnz9oHdPHrj8hXTl1Z
4/Z0l1nmK/Kq5+aar8j/Hp1svgIP9smRYr5i/HctFpuvyJ87sMh8Rb68xyLz
FXn5cwvNV+Qtps83X5E3aaT3r8hvBxear8iPD1tkviI/0H2x+Yq874Mp5ivy
hFX6+0FXPSWWmK/I681fYr4ir5kj1XwFHq4+PtV8xfF//AH5innGVpavyPvd
1no786TXWWK+Ij+SlGq+Yj331lxqvgIP9c2Ur9ju5KvyFbg/9ZJ8xfzvnZev
wANf/SZfsd0Dp+Qr5rl4Ur5iu+XgK/a33r9635rxzT3yFft1LYd8xTyv55Kv
WGezPPIV63wrr3zFPNG88hV4pH4++Yo8OZ98Be49mk++Iq8GX5GPi5GvWM8P
WL/iOFzB9xnIC98rX3Ecqmsf0JW/1aPyldN+Vp5BX803X5E/0GqR+Yq8wE+L
zVfkl0stMl+Rr31/ofmKvHqtheYr8taZC81X5EM6zjdfkQ/LP8t8RT713mTz
FXnKVe0PkrcZlmK+Im/0m/YHyZ+8Mz9yfAUefGT/EvMVeNjbItV8xfgSX6ea
r8gL1llqvmK7cYvkK8Yf+kfzQcav3rfIfEUePLzIfEXe9w/5ivXvvSlfMf6e
LfIVeOjpK/IVeeuL8hW4P/GcfAXunXhGvmI9i3+Vr5j/nRPyFcdn61H5inl+
OixfsZ4yN+Ur1jP0X72HzfiAR74CDxTMKV+BRz7JJV8xfyCPfEVeCb5y1ZNX
vuI4fJFXvuI45IevWH/nfPIVx+edfPIV262M96/YbkN8r4/xCRXlK47PdO0D
utp98zH5ymkn63zbVizFfEXeP0W+In/lgJ6vyAcOkK/Iq4/S8xV5Xp/mg+TR
1+Qr8k3H9b4o+YPrtT8IHm7cKNV8xfhHHtP+IHiw3DvaH2R82Qqp5ivmj1ma
ar5inuv5l5qvwP3XgkvNV4w/fX2p+Yp85A35ivxGX/mKfPh++Yr1/zpNviJv
eDLFfEV+/f9SzVfku2cuNV+x3cKN9TsT4JGYC/IV4yuela84nrVPy1fkLSLy
Fbi393H5inzcL/IV2134s3zF4/L2AfkKPLQsp+aD4IEmN+Urjs+r/+r9bNY/
ziNfMf/9OeUrjtueXPIV41vnka+Y/9U88hXjL+SRr5j/6bzyFfmsvPIV88fD
V4wfj/fbOT4ry8hXPC6bK8lXzPMzvofMPNdryFdOvqxx/rbNQvMVuecr+Yp8
6cQU8xX5jf80HwQP9pm1xHzF+GdHyVfk1R7S/iD5oGLaH2T+I3+kmq/A/Y/m
Wm6+Ih+Ra6n5Cjx88ajevyK/3G6p+Yp5Tu5aar5iPbv9y8xXzPPZZ8vMV+zX
pseWm6/IY9LlK+ZZXE++YnyOD+QrF39cviL/4eUl5ivy2W2Wmq/ItxXR73Wx
v/n2ylfkv5yRr8ijv8pX4JG8J+UrjnOFY/IVx+GJI/IV8zQ7JF8xT6/98hX7
NSZdvmJ8u9N6vmK7la7LV8wz9qZ8Be7d/a/e2wYPLfbIVxyfZ3PKV2z3TC75
inXuzi1fMU9Z+Iq8Xx75CjywKY98Rf4h5oPs7178/SD7daWsfMX6C98nX7mu
U+0Duo5jq8flK+f/l9VujQF6vgIP/h5eYr5ifP8mqeYrxu/7PtV8xfhxZVLN
V+Sbh2k+SD51pNbbmX/w6qXmK/Ili1eYr8gT260wXzH/R+2Wm6/A/XuKLzNf
gYe/mrfMfMX8mz3LzVfkb41bbr5inpeuLjdfsZ5HnpWvGL/mPfmK+R8oJV8x
z1vT5SvyuhG9f8U8Azukmq84DiOPyFesZ8NK+Yp58sQvN1+x3XUR+Yp5vj4u
XzHPz7/IV6znKn5vAjyS66B8BR4ov0++Yv6aP8pXrLPJHvmK8d13yVdstx3W
r5inzXX5ivW8fVO+Yvzf/+p9bnDvex75inna5pSvWOeNXPIVx7lJbvmK47k8
t3zFfp3KLV+5xhn7g2y3Mr5/xX41Ki9fMU/C/fIV+ztD+4Cu/r6F35tw/ves
djvlW2q+Avd8lbzUfMX4J+5c146vGL/ti6XmK/LUbinmK+bZP1DPV+S3Oiwz
X4H77/OvNF8xPv7NV81XjF/85svmK/Dw0TdXmK8Y731rufmK+V8KLzdfsV/z
nn7JfMX4MR++ZL5ifJPVL5mvGL+9mHzF+HovyleM//ay9gcZ36CrfEVeZoGe
r8ivFVlqvuI49E3U7zSTf37/cvMV89z+Vb4Cj0w+Jl+Bh5Yeka/Yr/cPyVeM
T9svX4EHDqbLV6zn8g/yFXnO7+Ur5i+zU75ifx/bIV8xT9M/9HzF86raNfmK
eaZel69Y//6b8hXrqXpb73mTf+WRr8C9A3PKV8w/Jpd85TrfcslXzFMMvmK7
XfC+KMdhAr4vSv7yPfIV69lcWb7i+BzWPqCL36gV9f2afXyPpVXMPh8z0rLy
Hzsa9fXIPh9+JvdX7pPpuyf7/Dzgii96Jep7I/t8+yXtWHa+y1k8cG131OLB
vYuezLT8W7KP86Xs+Dw7FA8e7pcn03ck+7zdR+79+AvV+Up2+xez69nxWdTi
wb27w8o/Pvu8O5+WfX98S/Hg/pfPiMdnt3Mui4de/Uj8qezz+mx2fOjFO+Oc
PS4/koeHLY76Hshu95s0Z5yy2i3RJuqrlx2fRh7q8ozinf5l1f9yW8WDhx8d
IO70L2sczk+P+mpl/3sTuf+HilFfu+x/r05z+pFVT4HfMyze6UcW3ztE8eTb
9yp+TXb9u7P5/R0U7/Qjq1/HHo36DmV7bLUP3BPzY3+Ld/qR1a/kzooH9wR/
rGJxTvtZ/KPc6i944I1S4k47WeN5+U68J/s/aVvx38FvF/3k+y/bq2nWfha/
cGc+WORu/8k9Axso/5/ZfNNdT77Z39ojD/ccleb8/8Ejq+pl2L/BA4PWZVj/
nbo82ULpZ3WAB09My7DxderNij/cfaSdZ7vuHvdsvi/nQp9zPfN6X9wyU++T
i4d/aZNp1zvjN5bRde38/7LquWdGpt6LVnxw+VO6rpln+DpdR+Deom9qnMFD
bb7W+UYvBXbhvEU9pXfruLPdzqVPGEe858p/x22cmb+8f44dR8b/3nx+Wvm7
ca749Bnt9R4s+PrHutu43cq+v13N5rUfkm9d/Kb8Qz57g8aNPN9KjRt4pOlm
jQ/j48MaH/Bw1UYnbBwYf/GRaXZ+k4dqxNt5Sd7qrbHWX94XPH/q9+7Jfyil
cXCei7PS93xA5w/ig6s+1TiAe/5bpHEAj/g+0jgwPu4zjQP5reEaB/LLNcba
OJB7vo+zcSDvs3qUPZfyPlj9b9UD7m/2oeoh/3GV6gH3jC/ax+ohD/zQ0Ooh
D76bZOOM+2ak9b6ovr+B+2zW8XLGGTz0cFDnpzMvyapz3C/qF+L9/nfUL+Z/
c5f65Wr3jd7WLxcv4bV+kce2HWz14/4evhZWnc48Kau/K79TvxAfbDAr6nPu
c3x+uD5J/QIP1VmlfrHdUX+pX+Cemm37Wr/I/fOfNO+74jv2teOF55PAfyEd
L/Dw3ynqF7g3fr76xeecjJHqF3nNpeoXuOdqhZPWL/K5uQZav1y82FA7XuTp
G3vavIzPVw1fV53g3vMD1a/S2fWeyY6/kKz6Ee+pNl/18zmt6COqn/Epnwyx
+sl3PjvR6idP39LO2kU9Ie80tQse/PgptQvuuVYryZ4frmUfz9PZefKNVR5w
/2XkAffcKjTS8hzIPt9PZfd3y0DlAQ/WQB5wT4WzoyzPxuzjE8lud1gP5SEf
/aTygHuqpo2x8ST3zh5i41Y5+3iezK7nvrbKT/5ZbeUH99RZOc7yk1ed38/y
O/OerHE40Fj5wf23aik/uGfsiAmWnzx5UcDOTzzPeyoOi9q6AXm0e9TWDTgv
2DBMz//OOkdWfzvF6XxGvH9uHdXP/H7UTz6oxSSrnzzp945WD+cd5Xvpvgke
WF5d8w7nvp3tjVmqE/HB56qrTvLd1VQnuCdca4DV6eIVm9m6Cuc1LXqqXfBw
y1Jql3xRbrXLeVOdln3s+Zs8PKqe9RfzJv+n3TU+4MFiDaO2zsN5VtY+uFMP
4/89ofsCuOd221FWD7k//Tl7jsS8zD+uWKZxzMsC317H+qTivRtKZ9rzGfPk
yieOPP7M3Jk2DogPL3khqvUu8E/aanycdbWsenZM0Tiw3bnvahzAPQ8dSbJx
IPdXf9b6i3lluMb3+L0n1R+umRm1fiHee/83UXtuQLz3xUxxxAdf3B61+zHi
gwXPibOetelRu8/xuKw4Js78B4/rfOb4982jcQP3lBimcSNfFx5i40YenlvH
xofj8OneqD0Xggc6fCqO+Xiw+Y8aH87T6+7UOHBe/9jX6i/z3LdF5wnrSamj
64j1dEvQOHDcjiw7Ic//z2fZ/mkUtXVUrj8cuDna7ouoJ7Lo/ajd/7jO8Bjm
BYj3J3Q8afk5Dp7ne9n5ynWJqa313IJ1CU94hJ5zEB9Z1lAc8YFbA3S/YP7W
D4gz/5Y4eRs8/EM1jb8z3ln9Gnwhw8aT45Bxj8YBPHxfkYjFs86H8mo9h3kC
UzvaPJp1Hhsx085bxiefGG33BcZHlg6252TG95kwwjjjC309KS333fFxxdd+
Ybhxxs9MmJw2/+74u+LrfDjYOONTUifa+gvj/UUGGGf8qbjxti7D+O7D+hhn
/Mr7R6UVvHt/csV32BswznjPxyPTWt+9j7riD5QcYpzx6+eOSVt89/nAFb8m
YYRxxk9tOCYt6e717ooP9/QZZ3ww0ZuWetcbrniPt5LP4YzffD3g23jXP674
6CFxxo/+d4TvwN35tiu+0BVxxud+cZLv2t37git+5jBxxj8RnO5z1nkYn3O8
OONzNphj9ynwSN079xeuB/1vHdLbuoWt17uuo9ev6f5FvvZi1LXO4qxnrqma
YesOrKfb2ah7neJufGDW0avmedZZ8FTUtV7grJsWmnrV/I/40NbjUff8/H/x
79131e4LrH/okahrfvu/eP+mHVfsfoF4f8WDUde88X/x4R39r9h8jPXvvXP/
5TzNqadc/is276IPX9wTdc3HnPh2b122+RXrr3nnfsd5l1PP7jqX7T7C+LLb
oq75lZN/wdZLNi/ienX+z6Ou+ZKTv8NTl2yew/7+/VHUNf9xzodX11y0eQvH
8/C7Udd8xjkPV5W6aPMExn/5ctQ1f3Dq+XTsBXteZ/1vJUddz/FOPX+/dd6e
s3l+znkx6nr+dsbnr63n7DmY+YeMjLqej5160g6edT0vOufVf4d/cz0POfXc
d+CM6/ngfzzS6MfT9nzLdrO+3+K63/+vzn67T7m99r/8CaNP2X2Tx2vgnIjb
13fjQyc2n7LnCv7vr32YanmcfeOsej6u8atrf8Jpt0jCCe4r2PgU7H6S+wdW
f+sSEZ9zH+S4HTkU8Tn3O/BA31d+9XG/wYnP7HHKx/0Gp1/lSpz2Ofcp8reK
n/Y59yOO/9/PnfY59x3Wf2rBad9Pd89b9/2l5Og0hzP/90dP+0rcvS5c8d3f
GpHmcI7bpkfO+Nbeve5c8XGBYWkOZ/7XJp3x7bl7XbviYyYPTHM488/+/ozv
8l1vuJ8fVvRJczjjh9/zm6/IXS+56+nXK83hHP/4wb/5HrvrPXf8ax3THM7j
3uCL33xxd73qive+3zTN4aznQMmzPuf+Du7NM+qs3cc5Pgm/nrX7NY/j1bbn
7L7MeiZvO2f3X/Yrppb211ln1zfn2f2X58+ZReftPsvro1bv5a79G6f+8+0z
7H7K+BLnlth9k/zWkWS7P5Lv/m2W3QfJ656eYvc78rl/Drf7GnlK9252/yJf
v7ez3afIIy+2s/sRebh3C7vvuDwx22f3Fxdf0NjuI+SBkc3tfkEe7PqC3RfI
vW+2Nf+7eKkO5nly/7xO5nNXPaGqtr5APuDTYTZPdtWTOcXmjeSnG822+R55
8n0LbZ5D/mTDeWnwrHOeBH74SNe5q92r8fa7wDzPuy0+bv9GvL/rk/vN2+De
z5ZcNW+Dh8/2yjBvox3/I19kmLcRH9h/5z7leJt1bnw0at5GnsCMTlHzNut8
8U68423w0KaHouZt8MiFSlHzNtutVC5q3mZ/65WOmp+5/77/Dnd8yzyDykTN
t8zjKRs1r7LOl+5wx5OMfzTrd0z+50O2u/0Od7zHfnUpHzXvcZyjd7jjPdY5
58582fGe63y7N2reY/4mVaPmPdafo1bU9T6Qcx622HrevMf6t9bT/IL3/5oL
2tm+OOv57/dl5j3X88Jrz9v+qIsnV7V9Std7DuueMO+Re9ObmffIQz2amfdc
fE0D856LL25i3iP3j2tp3nO1WzPOvOcah9Xt7L07jkNsobZ2PfA8OXP2ir13
x/inYjXuzv+edRzfP3fV3sfj9bviI73vgXjvvHf0nh7zn/FE7XpH/aH/DmXY
dcr3Rv4uruuU8U1L6PzhdV2+kdZLOT7BgZ1sPYi8zu/DzZN8fgxur29+RHx4
5H37bTzJJ7111foPHqy0QvU545dV55hJer+F7QZ2djPP87n1xvXh9tzO+Pjp
Pey53fWc+0NR8znj55yab/0C9zcZp36Beyc11vEFDw270y/nPsV2N+8dbpzP
1wO6jbB6GB9cvcDqAQ9f3qX7COP7L8+w+ynzD6k/wTif3/u8HLR2Gf/VnlnW
Lri/wGdqFzx4fH6G3feZv1KJGcY5P7h8Yb61y/izB0ZYu+TT8+g+BO79bGOG
PYdwnjF7xgLLz3ZXLutiPiUfH1J+cG/6sQx7LmL+lNZzjHMeM6hlsrXL+M3T
Jlm74MGaVQ9au+Ch0bm0L8D8ezpMszzg4QotlAc8dLmw8nBe9fnaWZaHPG6w
8oAHDhZUHs63NnrmWx7w8KyHlQfc/1V+5eE8rH5GsuUBD/55VscFPPJuPuXh
/Kxnn0WWB9zf923lAQ8vzqM8nLfV/nix5QEPHuilPOTjcbwwnwsuS0yxPOD+
5ysoD3nvHMqDeV4w9YrygIc3Hdb1SL70tuZLnP8lj1tiecCDDyxXHvK+N5UH
88LgnBxalyBf1lZ5OI98+i/lwTwyOGGB8pDnKqI84P6Y35UH887wpFJLLQ/n
o6N267kWPHjkivJwnjrsDeUB95+erTzg4bXYN8G81t+zmuYDnO92aKQ85FN+
Ux7Og7t/rDzg/m3//aT3QMQDL/yq9w45P36oT6rd98GDI+5LtXYZ37XecmuX
fMZ3P/3/71tm19Np+nKrB/GBSsf1/Mr3/KuuV/18zo05mmH/f+Tx1qsRtX/z
vfpzNfTci/l95K3Wen8VPPxRjUx9j1fr8ZG8r2lfDPGh/Tu0L8n1+/g73L6j
C15xnvYfyU9Nm5v2/9WfzdMbd7b3Ifke5tb2mfZ+F9/nPPhT1Opn/O2lqhPc
H7dVdYJ7p6FO7if89fiMNOc5jHxN62H6nQjtJ4RbvaR2+T5ns4/VLvkZtMt9
ifD2SdYu+bJBUy0P9iWCTecrD/cr4iqPsDzkSUMm6XfE8PcCE0Oqk+9DrkV+
7m9EC3e1/OSrho23vyfi+4EZ45Sf7wcWXqD8rv2Q4U0sP/nWpDFWP9/T2/ZF
1NoFj5wbpnbB/SPQrut9vC/irV3yYyNHWn6+j1dpuPa1nb8ny+LlXlO7iA8c
QLvcnwlXSrR2yddcGGZ5+L5flenKw32bw78OtHUb7M+EfxmjeO7bnG+bZPHc
n1k0UPHkhzeOsnjsz3gb9FA8922OlRiX5sx3yK8dHGz9wr5N+Fqc8nA/J3fF
iZaHvEnBsZaH77m911h5uM/T7M3Jloe8Q+FRlofvm3Wrozzc/0n2vGh5yGdW
SLL5F/d/tlXX+QAeKlJd+Rm/+nbQ8pPXaapxw35RZH6s8nAf6fc/p1se8vSO
/axO7iM1S1adfF9r3vkMy8/4KldmWn7ymn16m/fxHlQwEe9fgXszCmbq7wHx
PtWtj9Qu97X6nZlt7br2u36Lt3ad9xCzxqfVdu0Xg4fHpWvfFjww+C/tz4IH
r1/SPiy4f8av8j/fv+rYWuPJ95p6rlS/uC/37+uzrF/kN37rZB7nez5rtql+
8MgrX6h+8PDCTaqfeYL/pzqxHxh5+6cMu/6d8yWrnoVrFc/3ghILyod4ryZy
sp/e5wEPvdBL7+2Ae99tpH1G8GDTWLXL94UG3aP5AuI9X36tceb+ZKsxY+25
i/GBEZ1t3Ye8xecTbH2EfO+BcbZOQZ6ee6ytI5Dvqz3a5vnkv/QZafNz8sPL
kmz+TB45OdTmw+TbCoy0+S25d91om2+QB7fXsvmDaxxWtLbne/LzAwbZ8zr5
tU/G2vO3q7/3BO05lePf7vBMe45l/MhjM+36xf5DpMUeXb/gwQ1H9F4HeLjs
Ob2/wTz1zuh6AQ9dPanrhfvLbxzV9UIe97Per2C7nv16jwI8sGGv3pcgr71L
70WA+x8M6/0H5i/1md5zYP15P9T7DByf66v13gLrP/+q3k/gPs+RVL2HwHE7
OVvvGzD//QN0vbP+/2ut6515Bj2p6539qnqvrnfmOYu/c+S43b6UYR7Afmjw
1wLyAPs1s4rex+M4rHn6bVu3ZHzrN1bYOib5luJLbZ2RfGrqYlsHJP9z5UJb
pyN/p+VCW18j73Y72da/yKttm2PrWeRnvplm61Pk0W/G2XoT+ZCeo2z9iDx5
bZKtB5HXuTLY1nfIB8zqZ+s15DEJfW39hXxuzb62nkLeIf9IWx8h/yZjsq13
kL++YZatX5BPX7fIfEWe6+Qy8xX5yddfNV/xfP7k8TfNS+R/n9LfQ3Kf88Mt
M20+ST5+wSyb75FX7D7b5m/kl6vPsXkX+dp/59h8ibzr3rk2nyEv/sY8m2+Q
nxg+3+YP5E+UWWDzBPKXyi6w+QB56rPz7bmffPJb0+w5nvxAyZH2XE7uT3rW
vOTmzcxL5CmdW5uXyMOV2pqXXHzJw+Yl8vgZg+05jDzaebI995CXHTfLnm/I
a29LtucP8v6755uPXPvhTze6+3zqSdvK/etRe7UOBh7eVl774MzzZyntdzNP
31La7wYPvvyk9rWZZ1Z77ZeRl2+ofW3mb/Oc9rWZf2Zt7Wuz/s8f1b42+dWH
tK/Ndh/wal8b3NulnPa1Wc9H5bSvzfzPl9e+NvMcK699be77j7xH+9qsJ38F
7Wuzv29U0L428zxVWfvarDPzUe1rk6+ro3U81/nTSOt42Cf13Bo+xZ5/yGOK
DrfnH/Lw78/Y8w+5/+3H7fmHPNJC+9TkKafa2/MPeeh2W3v+ceXp1dyef8i9
7/jt+cfFFz5vzz/knrEt7P7L/eJex7X/C+4fX1bnM3hgfQk9P2Bf1TN3e1fz
O/d5GwbGmQecfelsD0QH2fMJebI3YHm4f/rQ3ynWH/BAYL72Q53v0GTFrz43
zvJwHzNz8DLzCLj/nxba33S+W5N9v9g10/JwH7N6jcWWh7zsAO1XOt+5yeKB
tgssj2uf9Og0y0P+0xLtPzrfxcn2yUeLLQ/3GW8Ma2t5yC9+oX1G5zs6Wfx8
R+XhfmLxipPs+gH35jqr+zf3DX//ZY7FkxeJ0byS+4D/7Em2ePDw4kKK5z7g
J830+7zgofEFFM/9vvcqKB480Bv1cF/vsV/1e+Xg3hZ5Fc/9u4bPKD95rdyK
5z7dk9sVDx6+J6fiub/2ZGv9Xh54ILdH8dx3q/az4sEDv/yj44X9Mv/DvfV7
MeChD64rnvtiZS8pnvtoU/5QPPe/KozR99K5j/ZChuK5L1b0P8WDB7yYj3A/
K/88fS8UPJiJ85P7XDlL6PtX4OFtpzL+//2d7DwxLfRdZe5n5XpNeciXndC+
Ebi/dS3N+7Av459xUdz5rlsWfyVD8yxwz7FvFO987y2r/kiZTO0Li3sOfKG/
3+d3LS4fUn58B8OzZ6Pmoc734bK47yvsg4sHvnlf39ngfse6jzVvxXcbvJ9O
Vx7wwNaQ9pv4PYSUd6L2nOZ8Zy6rnlZzJtp9iOv56/sm2ntXzvfhsvjWD8Ya
d74Pl8XPzBxv3Pk+XLY/e0y050/8PbJn+EO63znjmlX/ruqa/4J7ui4abfFO
/7LGIamzxgE8/M1BvacE7llZaqRxrOt6gs8Mt+8B8rtJ3W6rHqyjenY2HWTf
/ePfRV7cqnisW3oixXqpTq1PBjMaaz8I606h/M20Tgse7FApanXy7z6OXtFx
59/L1Bmu/IxvOlp//86/mziKv3/n30F0b6DfQeZ73d9cTbD3wMiXDR9tzx+u
v9drMcWeJ8hnT5xkzweu+LUT7H7v+nvMz8fY/Zt87oMj7H5MPsg/Os35rh35
okpj05zv2pG/23pMmvNdO/KkoyPTnO/akdcdmJTmfNeOvOzVwfY7iOSBz+Ps
98Zc/dr2nP2uj+s9/yOt7Xt05PETBtn36MhrfzXWvkdH/m2loH2PjvyVyEwf
/ej8XcB6f4aPHnTe838pV4aPvnPe5/9u3VUffefEv9Dmqg+eMv7BtSs+fOfF
+JcvXXF5yuE/1rniw/6lw71nDl6272GCB18eetm+h8l+rb15yb6HyfjHp1xy
+e5/3DM+46LLd05//w1cdPnOeZ/8/7674MN3Ihwe+KfUBR896OS5XuO8y3dO
Pdean3P5y+Hzup51+cvJn9LpN5ennHo2tj3j8pHTr4Ot9PdT5A/Gn3Ktdzv5
6318ysfnZqeeemVP+/gc7IxznpKn7XuSjL+aeNq+J8l2f/74tH1Pksc9nOuM
fU+S8e+3P2Pfk2R86ttn7HuSHOeJf7h+d9zqTGzk/h1fh7da6vq9TId7v/zN
9bt01u6VRq7febJ273nf9Xsqqr/cOdfvKzjj8+T8c67vejt5vr55zvWdXKfd
qb3P2/XL95OrrNb3bF1/L/Owfi+AfF+veXb9kq8ePN2uX9ff11wda9cveVzh
BLt+yaNju9r164qv0tGuX9ffoWxoY9ev6+84ij9v16/r71/KNLTrlzz0XxMb
L8y7g3GF9tt5yPf8M0vpPut6vz2+tV0PmKcHDzbT9YB5t/+zd/ReHOfjf8zX
e1aYX/t3blQ8ePC5hYrHPNrf6gu1i3lx8FY7/f0ertfg71fEcb36Zzxz0Diu
1+CnXcVxvYZbtxLH9RrcGiOO69X/6A61i+vVv2qaOK7XcOH64rhew5Nvqr/8
Xe/Ln4rz93y7jxLn70XuqSHO3zt77rL+HpK/K7R2jTh/V+WevuL8rv6C+8T5
3ez/Tv3keyXbq2+kld5xKeGZPHffZ/v+zvO/w6/t6dHl6KfZ91tvjbXiBw78
2GbKgLvvZaWCbzzWoEml8tnvTYX+vMN3Zo/vT2mpZz6u+/X3d++35zcoHjyU
8x3FJ11+sFbilLv34Xu/j/q6ZZ/fa33Fs+u/e9+LDySlOTw9exz+93fJo3pa
fIHs6/ju+xu1Px9u7TrtZPEqJzMsnjz03SDjhbLvt3uzee5DfY3PyT4/d2bz
uDMBn9P/nPOzzvPtWdy/bIv6ezP7etmaPc5f1ROPZl+PG7Pz/Jw76nOOh/O/
Z41zsTvzR6c9cE/l5lGf0x54OFJT+cEDt0poPMGDS/st89XJvs4/I/eU2BT0
vZl9PYddvPGOkb6Hsq/bb1185bw43wfZ1+f3Lh4MJaStzL4O01085vbQtF+y
r7d9Lp70Y5u0CtnX1UEX98fHp/XMvn4Ou3n5jmmh7OvkFxePa9Ih7VT29XDc
xQNrOqQ9kD1vP+nioQId08afv/x06gMXXNz7T2vfK5GJDaIjL7r4mmmDfFsO
x7R84etLLn5myUTfsfSXOqwresXFG86b47u184GeBXpedfENZ1LsuFfI9u7M
bA+c2hfyOdchuOeRJ1f6nOuQ/OaRFDsPyQs8NtPnXG/kqy+N8jnXG3l4Xj9f
3LUV1fLUOOfiNe9L8D12K7/3vchvLh47opuvSO7JpZunnnFxz5wXfJcLXi10
6f91debxMpfv/38nSaJUyhKaSiV7mxSasUuWY4usY8uu45xj38bOOfYlyjak
QipZsiRnKCXJklIkpiiSnDnaVOrzOzPzfV+v5/v3V4/z6vKa677f93Ld131d
113vjBevf4//wG3Ba2f+/p33d59vkL3uzs//qvJ61IMffrNdtjv/iX/dpnu2
O/+JL97bJ3tWYj097sHnVB2U3TSxLh/z/m6BqtnuekG8T3Y/WxeI9/spw9YF
4iWKpts8Jb6z+mC/+zfwyLc5P/i/uPmBgjuXfk88+Nx9Mf9v12+5pdTPZ4gH
ZpXNWx+cencOf+IH4qE/S8X81a8cLnds6o/EozPvjPnbx7pUefTYOY98udIx
vzvOKb8jD3fHOX/3f2ViNs7Js6N8zMY5cN+QR2I2zj3j5ymtb+46FMfLO1k2
zonnKzzJxjnxGVVH2jgn7szqY+OcePjcMzbOiaduaGvjnHjRms/aOCd++OcU
G+fEfU80snFOPNi5jo1z4qGGDa1fgPu67j5v6zDwwJx1OX53n3D/f+J3zzQw
HuCBiZGf7N8DDzWZnmPy7roep5m2XN/bXdfj4+H9R/W93XU9Pm4/XC7cXdfj
+Jv3XzTcXdfj+F2zhLvrelyfIT8Id9f1OP5pLY0nd11PrLfDhbvrelz+3ZXC
3XU93g979wvfWPyl/zo3T9h7oaO/CnfnX1z++9Iar+78i3/GWAPh7vyLy0ef
Fe7Ovzj+bjvh7vyL/27248Ld+Rdv1/Sr0sedf/H+b7VbuDv/4t+rzBTh7vyL
4+eaCHfnX/x3r7n+F7+77t2/e2PvPuuTeQTLeuT6KyW/B/Fo7J+Y4WeT/Am8
SK1cs6uAB45fiBm+J6lnwq545P5cWz9XJduVsPc6vR3zX0iOD9qBocZXhYeS
/ZOwZ1K+lX0YTPZnQp+fDsT8a5LjL9udr3GeBStlFw1KjquEnuPaxvyR5Li3
fSCuT3h8zO/aZ2674/1TJi3mH5qcPx789irC3d+P6/nkVOG0G7/uFrP5uz85
jxLyu3vH/F8l56nHbny9c8y/KnE+XOEH7jR+KdVfeGLi+2a7/43jNfP2Bfe7
Aw+/+s879jfX4bkTF9n8d38nrk+/Kzn+jUk97b9xnvHhHJPbmeynBP5uL+FY
TwIHx+fYeMP9SPCjNrnWXp47Su7V+Mn/SWLcJvpna1TjEOeR4Pn64oG882JE
di/w0L9r1c/gidyyUzjGszNrq3iAR4LrJI9zkFNok+Qx/p0P1+n+BeM8Es47
17j9+1Ry3Ujanys72vpOvOeiIdbPrn2U2AenD8928UeT614CLz10hO03xPMf
zDB5nqfC3Ucafjm5ribwWi1GGQ/xlKktTZ7nr3DN0YZvSK7bCbxa+THGQ7zh
knRrl+e8dmBCtjuPeC47OVjzwl0n4nj9l0LGT7xTYKDJk+fzW4fa+MB89OW7
JdfkMa8d34+9jJ/4tuZ9TJ7z3WlfwO+udw2S+2liHA4+ETMc8zpaZKvaBX2c
84uft32ceInOPUye59DSt6abfu44jc+Xwv1jph/x+QO1fvKcOCUPd38P8uFS
qTqHAo+uTJM8eAL189Zbt/3kuTZV6zP1ebel5METvaa21m3I+16qIpzn3373
ap664yjOM7mccJy7w62v0/wlf8o++QeAOzs39s525y/xSp3H2PwlXqLXaJPn
ue/t6zNtPaX8mmGjst31lPhbs0dmu/LkefeOkf4zCf/aBx75da+PyHbtOeLr
s4dnu/LkiZx73t8n+X098q99NSzbtf+Ir84Zmu3Ke87jw5/O/iXhjzvokd92
/VDzAxDfddcQkydPud39srcl561H/kBuuvkNPHp2GGzy5Dl5pXv23wn/3Rfe
fiiUan4G4r7Fg02ePLHvW2fXSu5rHvl596WbX4J4wU0ZJu/xM5xvlz02eT71
yF/uNcT8GJ7vfnWIyXv0KdYmu0/yXOORd/Y+bn4MD76/qMmTx+lWPjszuT95
5MPb5Pcgvjgn6HflyVPC6eZflzyXefthsPwkxJv+NdjkybPgmjT/geT+6pG/
uH2o2bvEPxw5yuTJc3/fCf6Lyf3eI/9RmZDZx8QrjJU8eZqvneEvmrRXPPLL
T00ynPKHMubbORf2mG/Popjf3XeAR4auitn5F3ig4puSp/32cdpSv2uXQD54
Om8fce0S4l9mx0yePC37LfC79grtyZ0fxex8TX3WHoyZPHlKzc+0fQ3yofFf
xuw8Tv7HsQ96/ANTxvhdu5927Kd59r97fme7Vn8TM3mP32ZrX797TqA+o4/H
7LzP79L2q5jJk2df255mh5Gncl673PMG8Oh1R2MmT54Nx7v6yybPjZ7+PHU4
Zv4EtjdeZ9uVJ0/K7rb+q8lzqWf8jN0fM/8D+f/Ms6tdefIEZ9Txn0yeez2/
+8LumPkr+L3O59nJrjx5Al9Uy96RPFd7fje4LWZ2KvX8Os9OduU9371ay2zX
TuXvtsw7J7p2Kr/7J3l2tSvv8eNV7JLt2qn83TqvxcxOJc+OvHOiK0+e0Pxe
2a6dyv55eFnM7/oVqecbi2Nm13rG4cj+dv7k7967IGbnI+q5ZHbM78p7+rlx
0M6fHLfVx+ncRLz3AJ2bPP18qL3Zx/xeD7XT+Zr4HQ11HifPtKwMsxv5u78/
ITuT8+JoZdmZnvl1Nd3sRspvvFt2Jufd3NtlZ5Jn0L1p/kjy+3r3x6Ftsl2/
D79X6q8L/KuS49Pjd51eNeb/MDn+PfL9319gfiLiR2stNHn6RXeVz1tvk/PR
I39z+RfNr0R81phFJk9/7K95/VAguT545LtNf8n8UMSrL1xi8uQpf2fMf39y
vfLI37Bymfmt2M+rK6w0efLUzeNpnFw/vfbMmqezXZw8/be/Yv4v4jd3fc14
2P/H8/hd+4TyGwauNX+ZZzzsWG/y4Am/UDpm9gnH86hSG8yeIb7+zDsmz3FV
oEzM7BPPOrZ+k9kzxAsM3WLyHA+d8s4jrn3C333Uv9XsGeI9C243ebareN55
x7VPKD/3yA6zZ4jHlu40efbz5zViZrdQ/9EDdxlO///MevLbw1/kbCvY087R
xJ2mnczPQjwyJcXk6Q8vMGWq2Sce+XyPmJ/Fg99cy+TJ8/XckNknlI990srs
GeK+2V1MnjyVaqabfUL5ahV6mT1D/Erh/iZPnjnPtDX7hPIHhqWaPUO8XN90
k/fcXxxpafYJ5Wd0GGr2DPGTz4wwec+9xvftzT6hfKft6WbPEC//cV+TJ0/K
/NZmn3j6p8dzZs8QL7rzWZP33NdMa2r2CeUDxdqYPeP57gNamjx5Ij/JnvF8
38xmZs948JqNTZ480SP1zG6hfKhjwOYJ5Uc/0s3mBfyl8fwd8zvAX+o493Yy
HsqvPtvL9jPgvm0NtX7x3ufCtpDti+SvlZFlPMR3VtV6Bz+ts7f4fMsrAR5e
2kh+XeTjRPaka71w/QdxnsarFtnvAg+0KaL1EfdKzkdHXrT+pfyjU/S7kA/t
Dul3XX9DnKdOtXn2u8AjNw/Q7+LeypneNtP6zfU3xPGyQ8caD/DQoqh4cM/l
BNMGGo/rb0jM0yer2boJPJzRXes+7sWcGRH5811/Qxzf/lTIeICH928XD+7R
nCplphnu+hvi+Cv/zDYe4GHfLdo/eO/25dS5hrv+hjh+ddk84wHu3N1TPLyn
ywnPN9y1y+LfJf3UfOMBHqo6Uzy41wsM3SeefMlzQIKn90bxEK+NfRH3gKHO
S8Xj2n1xPTtOEQ/wQNPT4uG9YbNU8bh2X/x3m3YQD/EOBbUf454x5K8vHtfu
i8vXqCIe4IG+D4kH95KhR0qIx7X74u2qkE88wANTW4kH95jOPRfnaZ7+n90X
x28/pu8OPFK3vXhw7+kUjojHte/iel67TjzAAx83Fw/vScduEo9r38Xl+10R
D/FypcSDe9XAC7XVP659l+CZoP4hfumUvjvuYQNdPhaPa9/F9exaeIHxEN/6
inhwbxvo1HKB4a59F8d7vCge4JEJfcSDe16n6zfice27ON7at9B4gIefqSwe
3As7z/RaaLhr98V/t9U68QCPHv1W8f2MW9v2a46d71i/4v3WOq+xPsComjpH
sM5A4+oj7bsSP5U20b4T8XcHzrB+J35z1fnWj8TPXXrJ+oX6dGkXtnYSX/PH
K+Z/Y95x03aT7V6Q+N8PTLH7P+IfXZli99/EUz+ZavfcxKu8PM3uuYmf7Tc9
27XHiL9cMzPbta+IX7ojK9u1l4jXKpGV7do/xDNLZtnf3K9btMjxu/EBiBMI
72que1jgkWWf6D4FuO/ltTGtM8A3PiOc73G/3kT32oxbmBYMyk4A/kfnWWZX
sF7ipdOzs8sl5Tzyc7Y/Z34S3iPXfCDX/B6IW4gc+UntAh6agrhZxC2Exobl
P0HcQvjp9boX5juwT2TKf4J4hsCMkPLmWL/uZK1hlpfBencPpyueAXEO0Q5t
hCP/I1Kzh+rMoO5Z+KHOysMifqij4hxw3xoY00lxDsB9bxfX+ZHxD81uz7Xv
gfvTcOYdudafuG+NRvfkGA/uPUNfRGPGAzz61AnVO+K7ir0L5Fq+P99n/PUf
1UFC/orv4AXxsN5Xsfdjlr/A9wdnbVe9I+L/fKP6RcRX7BSO/Jhg1m7dC+Me
2dn85WDLQ+T7iYMfUL4e8ODsyhqf7n1pvL2HyosfuBMJ9bXviHU+MPIm8eBe
NZzVVDjrjx3ap+/FdXX1IX0vxjnXzJEfkvfIvdKFc3851VXzxSPfTTjrPi1t
JL8i6yN1qKr7aPpPqlzJsfnC++W2RTSP6I+a8aHi9OhXSTul+yH6gSef1nmH
90qHH2+neDC0q+xjqw3nvrY//3qLt6P+P14IW7wd/X5t/l5h8XbEUwYvs3g7
4q80eNni7Yj/VXKRxdsR79h1ocXb0U8YHdDW7GnqH5jfz/yQnvvobS3NvqR8
+Q8yzK/ouceM+M2OpHzPtePMf0i8VWyq+QOJLxkyx/x7xP+c9aL564h/1XyZ
+d84zguUXeV39x1+32NPTTWc+n+V/0XDee9w3V0Rm0fcr49d0j5Kf+O10Vfs
PtFTHyl7svnTiDefM8XyNzz1kbpNtbgl4p8/NM3yNIgvyDc92/VHEW98dLrt
Z8QzPszMdv1FnrpJxbOyXf8P8Qt5dovrz/HYLcWmWdw48eiVsRZn47kn+jfF
5i/xGhVSbb3z3JcNbW7flfcdQ3/X9/PE4edOkJ1Av+jcyooXwjy9rtZ6izOB
vO+BnZcsfpc8l3rm2Hynf35l3rrnznfP/WzzmM13+nVb5K2H7nynf3hSQDh/
9677YrYO0C+9/YmYrQOMb7/0cMzWAepTrpLeGeG9zwPzIzb+qc9/T8cMZ7xi
oJ72EfrlmoycpfM+9A+3TtN5X3io8P3n7W/yF8o7v7t1W5B/F3jjVulPnpwG
2k/p33vy/Uv2fYFHD6fkWD478ODa4Yo7gh8vcmGC6h8BDzxUTTj8aZEKTaQf
/GPht4bLDnb7Na7/xi3zbNwCD6ycrfMg8PCqdy7a38CdJQ/FLB8Z9cxDRf9S
HUXkeUcrNlDdctY/zz6g+03Ei4YqnYpZXjPqYAS7HFP9CtTx9r1+Rr+LvPDI
5XdUfwN46BnU8UBeeLTSEtntyP8O9Z4k+5x54V+8N9zqICEPO9S/ieozMD/7
5SdUTwn2eahrO9V7RH52ZF8P2Xuwz4OFS8kOR1xloOPt4kE+d2B1W9WvQD53
4OOLyrtnnd4pN+ba/gJ7O/i/X1RPg3WAV/ljxgO7N7wkErN8XtavuH2/4kYY
Fz11U8zyecnz2HeK64B86MxH0of1fsc8pPfoUdcicOFG2XWwe4MpN6qfWb9i
6m+y92in+QpKnvm/rbam2u+xftfsMiGr+8d6MqdiGreocxDJ963GIfBA+e06
bzIOf+F+jWfUPwin7BAP6hz4li9SvRfgoTMzdI+P+ORgn/WKw2S8vTNa/Qk8
tLi65DE+fb92Vb+hTnVw8T0azzgPBvLXVjwn8NCVK7K3cK4JvNZG8sjHDCyu
qHMux8PYYho/qE8QmVNK51+Mk9BjxcTD+maR5wLWXt6/HDg/0OY/63qlDptt
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
ZfESnC9lX5hm8ROcd00OvWrnI8aRfvLSq7YOe977+/EZW289cTv1GhjO+J85
5/uZ/8jzPmDvFFtvPfXNKjYxnDyBPfVtHSZP9EQrW289PLe2MNyTD7v2aVuH
yVO0RVtbb8mT8m9Lwz11S+Y2t/s18jgftNP9L3kGtzHco8/OlnZPRJ5qvqDd
K3nqtl1qajh5ik5raOdz8nR4baid58mT/9E0w8nTsPdgOxeRp+nyCXYuJc89
vUKGkyft33F27iJP6k/T7VxHnrobphpOnhNPTzV/DnleOjfT8pfIM3TaLMPJ
U67vLItrIl7+5gm2jxIPbm1o+w73kScfecv2EcZlvX3bL4aDJ1x7pPKXGX/V
rpZw/m6Zujm2LzCPuHBV4eRvezbH1n/Gg639N8f2EfRbZE/ZmMmj36K3lRIO
/sCF0jHbF9jeb56M2f4C/vD8JyTP+LfLjwtnHN3R2jHbLxiX/kSvmO074A/s
f1zyzDv+OkU4+CM7OsfsnVz2Q8kKMduPPHUsnxBOPQ80i9m7uuDxtbhX+eZs
7+aHhYMn2DsQs3d42a5JpZWfzu/yU0Xh4AktfUL56dTzSN7vuu+Agj847Q7l
rbO9bcoKJ0+BSjF755f9Vra48twZZzgdOHlq5tl17juj7LctxZUXT31KlxDO
cTg4T093v+Z4eyZP3t2Xqc9G4Oy3p0rGbL/mO7PfldB7c/yOjUsKZ7u+yMPd
/Zr9PLyk3qdjHYPTwMHj658379x3UqnPTXjPjvGlQ4BznF9zZ8zeQea4erWU
3r9jPxfGu3js58V5uPsOK9tV8069l0d9VgGnPlXyxrP7bqvnXeM79b4e81Nq
4N099s/ePNx955X6/HSP3uNjPxe9Vzjb9UPeOHTfhSXP6sp6v4/zbj9wrs/h
ajF795n93LWG3vsjz2TgHD8daqqeA/HbG8pfzfyaV++cY/4i5r9EsmtanWFP
/VWnruE8J0VL9TF/EXmczTeYX4g8zmPFLF/Fc95qcYfVCyBP8LY65hfy5PX8
8ITh5Al0f8L8ReSJvtHM/ELkCQ5oajh5fA82VVwcxvmGte2tfzlOqrz9i537
8LvRzbtzbF9mPQr/DuH83Rfez7H6GMCDo8opz5Fx1KEqTex8zXNnOLWe2f3k
39C/h9kn7IcSH3S087MHPyO/Outs3Jqm+hv43XCpKcpbo57Ft8w0fuLrF8ww
/wXPu1n1skxP1N8InSgw13hYL/ed1guMh+fdSdfNMB7Wuc18V/oQP/PIXGsv
8ODzXZWvwXNwha1jjZ/1bwNfhIyf+P2LJpvdCZ7IumXKo6H8rkWaz8AjTaZK
H56nQ48+a/qwjm6N/d1NH+KpGX1MH/BEPvhY+kA+cmy39CHe4x3pg3fJnVC7
NBsPrMd7tnOazS/ii/3ptg6CJ3gyV/pQPvaz9AEeHf2N9MF76M6a1mNNH9b1
LV9jgulDvM/yKaYPeKJ/F1GeDuRD+W9UPD/w6P58uifCO+zOlnETTR/WAb5p
1hTTh/gLc7JMH/J8V1j6sM7wtsLSB3j49iLSB++/Oxu+nKq6dqon7BQ+m6n7
HdQZblBnjukDnugnyJOFfGBlIelDnv8KSR+8O+9sqjhDeceqS+w8O2Km6QM8
9PYD0gc84Y0F8f6j5H2ZBaUP8MC5gtIH7907X6ydqTpUqHv80/ZZ2i+A1/hz
tukDnsCSAtIH8pG0AtKHPIcLSB/X/o3jF8rONn1QJ9m5+Nls04f43jvUP+CJ
TswvfSAf6phf+rAO87b80se1o+P8y8rO0TuPqrfs5KTOUV4D8D1h6QOe6IB8
0gfyvvr5pA/w8ErML9cej+s/d430YT3nC39LH+LvVJhr+oAn2NaRPpSv7Egf
4L5MR/q4dn1cfubDc1XHVfWfA6cnzVV+kPDQxs3Shzyjr6KuO+pIV7yq9ZB1
p3+8qvXQPR/Efzdrp/RBHWnn65vmmT6sO/3qU/NMH/BEm12RPpCPXP1T+pBn
6xXp454z4vi4hqqXxXrUXyyWPsRX7ZM+4Anc9RvqdEH+4K/SB7hv+m/Sxz2v
xPUZdlj6sK71/nuUdwY8tLDVfNMHPIHcHOkD+fCKHOkD3NchJn3cc0+8P4d0
mG/6sD727vXSB7gz86T0AU9gz8/Sh/KDsZ8CD1S8KH3c81P8d184K31YZ3tr
9QWmD/HM5xeYPuAJzj8nfSAfrHdO+gAP/3tO+rjnsLg+PQctMH1Qrzu0LSJ9
gEcmxqQPeIK9zkgfyt92RvoQP3hG+fms/9Z2wTzT0z3nxfu53RXpiXrgodeb
LDQ9gTvTRy78/+sUJX633MaFipcWv+9x1EEFT/CHU9KfdchXnFZ8CPidJksu
/v/1BxI8sYdifre+1tXEPpvM+9v8lXDmG+47rvtH1J3zDeif61+ROD+c8NSX
O/BRzHDW44ruEw/qF4Xa7VN+Cusa5SuoOkjIJ/I98q/y/vC7wT8nK8+CeA/U
SWA9pSPrlU/xcuK/yfys/01S3gTwwJ8h5WXwne53Ruu+lXWTVr+q30Wcf/gM
8mhYvzoaVLt+S/RHIh4+fKi39IF85LEMyTP+/+cMnTfd7xDvt+9rqE4C8PBN
T+j+l/WRbq0es3Mi40VLVcuwul6sU/RRB/Gwjtnp2brnRfyYM3eT7pcZt+bv
GPO74xLxXdEe3wpHXJPvg8Oqk0A/iW/pKPMj5E/0x4eJebdpoepMAo8+F1Jd
EdR7Dw/KO8fdm9DjtCePOP2s4hOIPxDVO3rM/y18WvMC8y609Zxw5rFuP6T5
iLqOkayjimcAHvUf0rt7zN8sd1BxC5gX4dAeva/HPM1Nu1Vnb3ji3yXzs85u
UdwCcF/39Xpfj+/UOytU38yt/x3X8+pqzXfgwaULVReCeUZVp6oeu9sfcfm/
BglHvHd0bUvFOTCePBd1tMDjO15POOPG2/pVdwI8kU/8kkfcpu/eJzS/gEfn
1FO9EcZhrm+sOpmo1+Q4t3Y3vw/x8N11bHwy3q/oX11MH9Y/X34d6luiXl/v
PDvKbRfi3AI9C2geMf5tYWnxuP6tOB472dvqTGUm25vAq3WsZ3rT3+I709Xm
LXm+z06z+z76Tw6cS7N+pHzqjS397npBPJjV0fRh/UDn7waG098yOmWArYPk
KXtfus1Hyr/dZKLdI9MP0/+ZLJsvmO+BFem5ltfp+l/j8icbjLJ5wfo/Jx7J
tXWb+2mN1xR3CtwJrFOcKufvlLeEY78L5Fun/YL1XdPHK18e+bbRwrNV9495
ps1/0v6C/TFYbZn0JF5jpfRh/vLYV8WPfTNY5kutG6y3eeQ17bOsg9RzsdYT
4L7vZmi/Zr5e8Yna1zYmvm8yD+jR/unmT2N+U7TxEBu32B+jK8Zq/eG+uaWF
1h/U/Yv4UA8Q+RG+awar31C/KHx7IfUb6xR9+keOzUfG4edviDr8rFPUVOsS
8UrNtS6BJ1qgmb4v6/j91kf3EYwPH3hjru3LjJc+8r7q6TGu/sUfxcP45177
1F7W9/uzleLBWKcu+kp/8/cSL/rFIItfQV3TvIP0P0+ZHxL48D495IcEvi2n
v80XrqvHm2geYV0Nb2ym8ca45VNNNM4RPxxq0Vn2KvBIlzaaj4grDg9po+/F
+k6dL+f4XfsDPMEXL8QMh7xv30XlRzAuqMAvqqMCPNI7pu9F+RKXJc94yF8u
y6/COMZow7D/SHLf9cRRTziUnu3ijJe++FmG+Ss99QaLDLF30Yiv/iI9+7ak
nebhr3K7cPLv65hm/kfyLF2Slp2SrKfm4UkJtzScPMGMZvbOAnlCbzSweG/G
xW3Ks2fcdYf3XLHibQ3nvU+4cwvrT8Z1jI78bPsLcF/nHZcMZ3yIMy/H7iEY
v9Ekb1y5OOMoshoJ571k4+YaD7xf+/rkALu/oB0e+LSB3V8Qr3ZGcTXAQ9/e
csn4eZ81bZPi81FfKHr280tmR/E+q9BrqjfIeoALlwtn/+9dqTg53nPNGDjB
9Ma9VfjFyarXz3N3af+L1o/AfR98I3mco8MfN1NeA/BIddSNAe5EL/c1fuLH
ntN7VcRPVJ5q+xDOF+F/C+faeRz2SXh05Vyz82m31KkveZxfIldq5do5F/Kh
V1ZpHQMeiczXukf+0fNUVxN44HJL9Q/w6EvoH/JEs4Za/xA/0XKy9Y8H/3a8
5cvRXzEqU/rDTotsy5SewMOln5WerP98FXoCd+rfHDI9iecfM9b0JB66c4TV
NyAeq9Pe5jvxs42G23zw8L8xRu85wt/SqIP0p38miHop9J/0+1rvRhAv0Vb1
CogX/HOA6U98zYZupj/x2NNDTH8Pz5sjTX/6YdK6SH/g0Q+gP+tgb1w53fQn
3viR3qY/8cA3zU1/4sVuHWP6Ey/XNM30J1767WG2L8LuDf+9ROMKuLOsu9oF
PHI/6mlQ3tk609pFfMMP/axdxENVm9k+xPonTqv6Vs+HuK9dd1tPydOz2Ejr
B+KNlw6y+U67/d0PVbcEeHTtIPm7gEdeHSA/EvHLWDfI8/Hz6jeeCzLRb6yP
unFclvUb8fKLlWdHfEPpTnY+hX/P17OX2sU6JKt6aT2BfGThQtmTPKecW6z2
kufn6XgfUHh0c0+1F3hkBcY/eTo01vgnnv++wdZe4sHDPW1/d/OQ4vwVxkkf
4KEjnaUP8ECxcdIHuHPHLVNNH+KP/qf1hHjBef1NHzefKa7Pt2nSB3h4GtZn
4KGP06QPcGfnca1vxOt/lWH6EK9WYbDpg3q5gbnPSx/gYT/q6QGPjnxe+rDu
bp9VE3SfArxEVob9Lurxhup30O8CD/+B+hKs31ulg36XeLH+Id0rAb/68zCz
z4hv/DHN/KvE21xIt/Hs5gfE2/tnM+kJPPhmQHoS/66Z9ATuTOo92vQkfnLX
SNOTeOjIC6Yn8QPPDDE93fyD+Hd8o470BO5b8bj0BB5ZUEd6AneiV4aZnsSv
1BljehKf9mVf05P44WaKz4H/IdzlMenJOsy1qkhP4o0fk56eus2Z6aYn8ZOj
x5mexCOdepqexBdcHWT+B94XvPaQ1jfWefaVl/7AfVXLSn/goWzki5Hn5Mb+
pj/xMaPH237neTeh/lN2LqB8tWNdTE/ca0SO3yg9gTu355OefG9oxA3Sk/Jr
tnQ2PYm/nz7Rzo3wCzl/fKq8HeC+50/oHpDy0durGT/xv/pNNn74hZw988UP
PHJ8pfgpH1nX1tZD4k90n2p1Qnm/U/kz5RfzHdLtf8Ss3h/rXc8DzvoJb/2m
OtiUL3tROOUXXJJ/ie+i/vSw/G+sC3Fde41P4JGFUZ3j+Lune6rfKH/T6+o3
4E7qm7IziS87NsHeJWJ9gy0fql3Iuw+v3Ck/G/P6F2wRjvuycL23NW75fsRr
y6Q/6y18eVrthX8sfN/XkgceWXe7+Pleau4hyRPveKPmBfPoZ1ROtXFLPHNQ
htUnZb7t1PMxw5n/u+uM3t1gvnCNs8KZv9nyB4035oP/dFo48+byfafvwjzi
l78RznzbTSf1XZjH98xXwqlPj69jVueOeb7/fC6ceazFvohZnTi2d/1B4dR/
76GY1V9jnnjn/cKp/9BPY1bXjP697h8IZx5i3z0x86ezf1rvEM486+e2x6ze
FuXrvyOc7W2yQfetHA+PrhHO+gY1X9c9KfvnvhXCqX+l5bonpT4L5wvn9yq9
UPehlB85RTjbe3+m6t5Tzyfu1X0Bx/MfheQH5u/m+1n+K/J8dr/eS2Ke79Z9
rxpOnrktltg5jvluxS+vNJz8JX+Yb34x5kd3yQ4bzvEWXjLH4rMpf+P6sOHs
/2fWzzQ/pEf/xWHDKf93l5kW30z+YX+EDaf8q7fMtPhj4l0enm5xwMQfrT/R
4nGJF9s00uJiPfnIN2ZYfCrx1HaDLU7Uk7fbaKDFR3J9CDvPWvwl5QODeln8
IuVD3Z+1+EjKx2r1svhCTz7y0mctfpHyX68YZPPU887svolWj4/44eBQq1vn
ee91ayObj5R3bnnG7tc9ecQrmtp89OT/Vm9k847yqR+kGO7Jqy3T1OYd5Rc/
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
fN03xfJuuA6v8Q+y/Briv5XIsO/LfeH+38caD9ft1YWnGQ/xi3dPNh7uC5/9
rndQME9DZ2rr/VbkXQa6NtN4w/uhvj4R5V8QD2xQviHyJaNj90oeeKDdlpjF
QzJvN1Skpo0H4mt+6WN2I9/tavxSmtktmKfh98uq7gRwX+fSMbNf+a7H7KvC
+S7DqGtyzZ+GPJ3ArAK5Zs8w7uLez2Xn8J2Cm7/S/TLzDe85qfwRjqvYyBTz
/9PP9tTGVMsPId642/OWb0l7vs9R1d/me7WLjqn/Pe+mjXna5h3jFaet7m7r
FeJ8wq2xHuK9Eqd6O617fDfh5kdkV6POVajSi8ojQF5AoF5WjsmjP52UcH1r
P/vT+fvG7HwF4+d8z3oYnlJW+e985+7x5dKf33daA5138F0ipzdJH+ZBPLk2
x+Kc+B5uStFck+P7hvUXDve3Sej9rscvWiO9o8V9cZ102pWx9nreq329rulD
vNrqVsbDc1kkra7xeN57/busvgvw8NiGxsNz3OFlKcbDd0UjXzymd8GAh76t
Yjxczzfka288zIuMbnzaeIg7T1eyfBKuAynNuto5BecmZ0sNnWuwv0ffqYm6
T8KDS2rqvIN9JNCnkniwP/p6VUU9K+Hh5lU1/rHOhDc1Eg/w6NVrY/5SrePt
Wp9dJmH/Js9fhe7QeoJ55Ex9V+sJ3w2Z+pbOiTinOHX96XbPyPpyS8N9LJ+N
8j2/H23rD+vLdT8xydYf4jdlZFl7mKdcuNEI2/e5H11ePsLOBaxL5gyfYffa
tP9rrcsye4Z599fPkp3DPNyJ02UHYhxGak+WPPwDkavtFScP3JmD90PxrmK0
9nD1M87vkSoNhCP/3VfQr3M67cwba2nfwfk3/OwxvWMCPPjtcdmZjE9L+VL2
DO2Kk5Uy7N/zu1yqnWH/nt+l1QjJ8zxY8ONeVqeC+JzGKbYvMI+7WqU2Zsfy
HdLmS7TeMt/2lqdjVheCdtfhrHb2/oUHb/ms2ZncB6s5rW0d5vvd15TVOsz8
i4ttRtj3gt8p6MvSOgA8VH625i/fyR00X98ddmm4xATxAI/4pogH+1H4+Uzx
wP6JFh0hHtYtKTFGPMx36DJePBznBVPFw3F+S4Z4+J5pO4xz+sGu6S0e4NFz
fcWD9zpDZweIh3ni+zqLh/iSzuKBPy28KCge+tNGtRQP8GDzluLhO5jPtJE8
5m/0mgaSx7uNof8aya+F9Tk85knVUaF/KTy/vtX9Ie6kNDX7m3mRRWukWBwn
7z1D7/Y1nOvt2WvTLY+d6/b5l7sazvqfqRW72fmadT6XT003vxN5nNL1DCdP
javptp6T5/xGzSOuPxO6pdv+QnzaF8NtfyFPyTaTbJ/iuSZSr6Z9L+KBa6rY
9+I6VvTjgcbD9WrHtCHGQzw8dKjxcB1LebKnrUuU/+jhDMNZ5/NUhVHmv2J9
zkovTrb9jjx3pIYMJ0/18pm2D5Jnxuks62f6wQr2HGntIn615ShrF3mKzhtp
PPSbdfePMx7iy+4IGQ/35dSB44yHfrbmRSYYD/G6kyYYD+t59lg6wXjol7s8
cpLxEP/vpinGw/qcXS5PMR768cLnpxgP8T96ZhoP62q2bqx+pt/v1PBM4yG+
deEM1eVAvcpP7pppPPATOnfXmmE8xL8uNMt4WK/yxIJZxkO/Yt13ZhoP8b/H
zTYe1pl0rptjPPRDdr1/tuYX8Hkj5xgP6jqGaiwRD/2Wu5rNMR7gzoXic42H
9Rhr3jfXeODndFoUnGs8wAM/rRQP6igGHn5bPPSLfr5HPMADX1WcZzyof+hU
eGKe8dCPWv3ZecZD/OgW8aBuYeTuD8QDv2ukQlQ8wEOf+ucbD+sZlmg2X/sv
/LSl+s3X/is8svcT8aBOYOiur8QDv27ktt/EA9zZ3lrvQqG+n1Oo2wLjgR84
ctvYBcZD//COb8WDOnuRG35eYHY4zrm+mxfJDgcevH6+7HDmj0fy7H933+K5
MnK0h51ziDvT/tnl7q/0N0buamX1Z2Cn+a4Mlr+U/sbYwJjlmTBvdG1f+VXo
hxy++znzDxJ3/qljfh/mSTkHC1hdMNbNKJRn57s461Ad+kz+T+anO5OrG05/
QuBCbcOZD+48UNrsafoN8mbMUy7O/Otgc/kT6B+I1KhtuCc/Okt+A36XaM9m
Zg8g3y2U9ZjsMdbZW45zPfvN/6Bw+r1b4vzOOLFONSfb79L+iRaabHYbzy/B
d1UfgH6k4at6Gc5x0v7enjbOWVewYyedT2lvn+6t8yDO+9EtnygfB+e+0CdH
UD+N9c83+EyO9kygVy2zWxinl3pPK8sH8Zynnmxj845+rQZ589GdR/TPVCvd
3uYF+idaeZD8aXz/2nncsTx85D1F39sru9rzjlzJBubHpP0c3djYvh/7v3HL
520dIB7o3N7sbPo5Hf/jhvP7OiV+fMr9jvSvFg/Ln4Dzpm/+En1f+uWaLdJ6
xfmyYVZX09/NV0vov7e72f3s58NXW9m9C86nPmeU6mhh3PpGD9X9Dtrlq56m
9Yp+sw3tn7Pxz3qV5Wc+Z/3O75jaoKXpwfpLOw7rvVHWU/r+c70rivpOkU6f
q3/QLifl1l7WP5yPRTf2sv7h92q/rpvpw/dw93ykvDDWlTp2MOb/f5X3sh8=

   "], {{
     {RGBColor[0.880722, 0.611041, 0.142051], EdgeForm[None], Specularity[
       GrayLevel[1], 3], 
      StyleBox[GraphicsGroup3DBox[Polygon3DBox[CompressedData["
1:eJxMnXmcj9X7h+ezzGebjMkMaV+0ElGkLNkq7SJFVMjWSiqlIiWKNu0LJVq0
SJtWlSVZkrSX9lWbNlEK5fe+vvf7efn9cV7nnOfc5zzPOff1fIwx5tr51KHd
hqTLysq+bVRWllH9e7GsjH5zlcNU6qrUU9m/LMazKm1VSioVKi3KIp6xlh4v
VznAdU6ljUrRc9qpbKFSS+UvXaxRfajKi1rsT/Wr1b5FN62v4CfVvrt2WdlC
Xa/NWhosV6lU+yDfn7XGVJWV/aEYVWUH+p55lXs0abGu11F7gW64Vu1FKq08
XlBp7Zrn61wWz8Oej1PZSWVnlZd1o3UKqM81rTlX/fXqb6/2HLX/Vrubxnb0
nONVdlFpoHKMyrYq26lsLEb7aJVTVHTkZXurnKSyl0pDlV4qe6jsqXK4z34r
lZM9zpweKruq7KZygu9Dv7ufl3v39hqse6LK7l63p+fR76vSWKWJyo06vEXa
S07n/rXOaqHa5WrfoPP+SPucr/6pittHpalKP8+jf7r5IP/9Pd5M5Qxfg4VB
KvuZqwZab5PO4j+Vwb4GR2c5f+TnXLPSHraUkCf0fG/qGYY4ZzB1tmPpn+n7
MH+ox+F0tOZeqvKNIBhmblj3HI/T7+L8bK9ymp+F/Xyhc3hF90yVAopr9QwL
OId6wcpFPFsp+B0BU6XI7WiVi80T79BizSmUgoVX1c6qfYTal3icPBd0zh1V
n68yxs90rMp480Se+5gXcjZWpWtZcHeFY+kXSzH3cpVxHoflCV4Ddq4yK6x7
pce7ew3OYAevRQ3TV3se7NzmHA9Qedb35lkmlgXHcHp9WfBH/9ay4IY5d5oD
cn5jWbwD7OkGz6N/k6/1VZnqHJPzKc4xjDzvvfHsz/n+9Cc7f/A4yfehf4fK
QN/7Hq/BuneXBaOse5fn0X/Ba3NON/tZ4H2anwW+ZjrH5PBRs0D/enFSoRyU
VCqU05LKecwV80uKkd/XxEBtjY9Uu2m9mDtDZZF4+0AfaK8p7hbfk7N7xkxw
1jWlyO0slXv9LLB8n2sYv1ucvq57bKnYlVpzqdpVat/vcd6tp80I66b1zPdp
zjLF3ah2nVIwvE0p7rNS5cOymP+Ayvu+N/d8xbknh8udA87yxbJgF+5m+yzp
zzcfzHnVHJDzl8uCs2tUXvI8+nN87VqVZWaI3C5Vud25ZRw2T3QcNZ+ji5w/
znKh70N/gZ+Xe7/uNVh3SVnwCuOLPY/+B94r+5/re1yn8oafhT3fq/wuVd4e
VPstswWz75QFc1NV3vY1+ofonGuJje/0uXSo2j+rXqb575kzzvddz6M/z/fk
7B5WrpYrV1spPy20RnOVx3T9TZ/93Y7lDHgPn6obfH2mskr3eUT1pypddX2x
+Kirdb5X/YbWrKf2F2XBNIx/XhZz6X9n7mDn5JT+PFJppHKSyl7ur/fZcZY/
lAW7fE5873n0fzUf5PlHj/Me/+ZrsLCqLN5z3sWfPE7/Z1+DqdXmg5ysM0/k
eVft4U2d5RZ6njU+O7j7w7H0f/d9mL/W47D8t9eAnb/MCuv+6XH6W6biXDin
X/ws7Gejymtlwea/ruFrU1mwCy//+Rr98lTwQZ7LUjHOO5RLxTVYSKcirzCV
SsU4/X/8jJx1IRXvJJweppz+phxvrzOoSkXOedZSKt7hFSrFVMTSz6fiPsz/
WJ89b+jcPiJHdWJubY0vERtviY3lGntK7G2ntbdVyaTiueB6d/H/tmJ21PWm
qdg/e90jFefL+d2uZ9tZ49+QT63zjuJ3Yq1UsAILWcXM0di7GtsuFdfI/8B6
wV99XWtQis+krdTeOhXX4WuHVHADI7umgg9y/p++QH1dZZnKTqnIGQzumIpY
+tun4j7M3zkV4/C4WyrWgKMGqeCGdXdJxTj9ZqnYK3neJhXPwn72TMW+4Yj3
4y9zyjvzt3PIO7PO3O2bijVgYe9UjPM+7ZeKa+R/n1Rwxvk2UXuDudvdrHPW
LVLBDflpnQo+yHkbfU60VvlSMS3Vz6aCwf0dS7+578P8AzwOj228Bhy1SgU3
rHugx+mnlLs7lLslFbEWXMD3N2LjM7H1lvjpnorz5fw6poIvON2jFO0O3FPr
LNU6H2qdTh7nnespBpqr7K3YPbTm+xrfU+2DPV5HZYHmfaDre+n6kangBUa6
poIPcv6exnfXeKXaR6ciZzB4lGPp71cv5h6hcozH4bGb14CjY1PBDet28Tj9
M312nM0k7aWh7lVX7eO9bzg6wTWc9kwFZ+Swh6/RPyUVrMDCiR7nfeqr0jgV
+e+dCs7gq5fH6R/nZ+SsTzU3vJenpYIPcn5GKjjgWQekgmMY7O9Y+v18H+YP
9Dg8nu41mD/Y3LDuII/TrxJrtVUq1D7b3MDjBO+fvV7u8+X8hpqztipDHEt/
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
zATPOioT7y08jnQs/Yt9H+Zf6nH4GuM1mH+ZGWLd0R6nP8Xfj+H7MFeZFdi5
z/tnrx2rdJ561g161gmZ4BV2xjuW/kSzAgtXe5zPvxt8jfxfmwnOyO01Hqd/
na/B103mBkbuMB/k/Anvn/3d4pzB4M2OpX+j78P8Wz0Oj3d6DTi63dyw7m0e
p3+/90qer/ezsJ99te/TlZ/T+FkncbVRZ/Cx+Fknlv5T+0x+nknX/1X7DLUf
8BqwcFYp3qGpKtN9jfzfmwnOON9pmYihP8nPeJrKQ+bmApXHMsEHOb9S5Tjn
6RGVCzPB4MOOpf+g78P8GR6Hx8e9Buc409yw7qMep/+kzxhGZpkbeGyUFa+q
/1F5JhNswebTHqf/Uib4IP/Pepz37Cidz9mlePYlzg1nP7xuMDSbsygFfy+o
vJiJ66z1steDl0XON/mf7zzB3TwzRH+OY2HtFY/D4ALXMDLX48xZmAnmWPdV
j9Ov0H5XqP5IZbHvyXN/5nPnXJdlgi3y9nomeKV/YSly/o7K0drjeeqfy88g
8W92/KwMJRMsMqe7zie9hc6Dn2nRWErtT8XYaz4n4t41R/DyqfPNc3yYCXbh
7oNMvLf033MsrK3w+HTvZ7oZed/jzPkkE8yx7scep79BnGf0PBfo2T73vuHl
P++ZM/g6E2zxjn6VCV7p/2BWYOEbj8PXt66fUvnTeSI/32WCOZha6XH63/sa
a+2n8/lJzzNEz7PGuYeF3jrDS0rBYHWN/uyvHRxtVP2EyjCNnaKYUaVganQp
WPld5YDaweDPKn+YD9YdUTfaq1W+zMQ7w97W+p489xc+D8Z4NxaZl7/NFv1r
tM52+rpnW5X1Huc92OCaPK8zf8z5NxN8cL4bPU7/L58Tce8qL0Wdw2fipJiN
3MPC2FJwl+WHkSv1dZBirtC1Adp7Se3L1S7PRgxM5bJRw8tpiqlQzBjFFLLB
B+vmszFOn88Y/hzj66NSNu65wrniM4PPi9rZYJR3pTIbbNGvmw1WYKEqG+Mw
tWU2as4yoz9rnlU+LtMzVGfj3GGqTjbG6ddk4xpr1cvGejCV0tynNXek5m6T
DW5gcOtssEV/q2zEwtcJ2i8/OD1C8SeqPUtzL1a7fjbGmZPX+M86kyv5mkjj
rWsHJ7Wy8Z6wt768v4q7VDEts3H2nPFBtYOV3dXeLRtsweze2WAFFvbIRgzv
wZ7ZqMnzrtngjjkNs8EHTO2VjXH6bWtHTANda5yN9WBqh+p4hv1VmmXjXd2k
0jQbbNFvko1Y+NpCz15UuVbPP0x72VL7/Vxc7ZONcebspDV3VPlC14crZqJi
r1PZIhufKZzFAd43TN1Qin33VGmTDUbhpXU22KLfMRuswEJbj/O5e5Br1n5Z
785LKpv097322Th3mGrncfodfI21Onk9mDoqG7mHhc7Z4AYGD80GW/QPdix8
HeZxmDrcNbwc4nHmHJkNPlj3CI/Tb5WN94S9HaOyrcp2Kgf6PBg7S+d2psoE
nc2O+owar3onXT8xG2cFC9tpr9uqXA3DdSO3x6tcxRzVXVV6ZIMPmDohGzH0
X+T7OaqPVenl9WBq5+rgoL/KKdn4sxwGT84GW/R7Oxa++ngcpnpVByt9VU7y
OHNOzQYfMNUvGzH0G+szp1yfTU+X4msRPif4+riTWK0WV1+Kn0t81pzx6eaU
9+Ycc0D+T1Np4bEzPA5fZ7rmXIeaLeacayZg5CLnmJyPcP7o361n20/PtqW+
Vjvf3MDgeZ5Hf5jvz1rDPQ5TZ/me5PlCc8O6F3ic/tkeh/Ehrnm+i/0s7Pkq
le7O6SgzBFP9qoOby1Qu9TX4HVIv4q9UmeB8k/8xKl2c68uzMZf+SVrnN53z
Lfz/BeeYnF/vHJPDkT577n2K4k+ujpxfk433FR5vLEX7apXxfl7uPdFrsO51
2eCMda/1PPpvKtd3lIKR/lp7tZ5nrvoNVb9civ095PPl/HZVzO8a+0ZsvKC5
XxeD1QdKkfu7yJ+u11fMXbr2YCk4uFtlnN6ne9QfzDmovY1i7uZ7AqVgaJLK
jFLk5h7WNCvkfKp4aC4e6oiHx0vB0zSVmaXI31SVh0uR+ykqT5aC0XtVpnsN
ODqrOta8X+W06mDoPpUrnB/e2ftKwfpk1vS+4WhodTD6iMozpWDlUZVZpeB4
BnnXvl4pRZ6fK8X7M5Mz1/VXS8HCi6Xg6XGVF0qR48dUHvQzctY3KX6Jxsby
rGq/V4r83laKd/hmlTt0fVkpeLtV7aVqjyPvai8qxZ4mq728FCw/qPYHpWBn
mtrvlILTKWq/VQp2xvoMuqmcI56HqrRReUQxK0rBzlz+DZGfUVI5Rnmp4mey
1f5D+fxa9Y2KqcPPF5nr2orppLEp6tdRe53a9/I9ILXXqn272hm116h9q9pF
tf9U+06191D7P7WfUHtntTeq/aja3dWuo/u+rXZXtbdU+02+HlD7H8VMV7uu
2n+rfb/aVWr/pfZUtXdV+1+1H1N7B7U3qP2I2tuqvV7th9TuoXa11nyXdbSX
GpXveS90fZNinlJ7f7ULipmt9n5q59V+Xu0v+BqjIt6bj9T+rxQMfsrXMBWR
5wMVX1T8SxprqnZO7Wc5B9XZiuBupOJf1Lv0Ld+/VUxtjb2umEPUrqX2Yt4t
/iOa2n+rnVK9vhRst1VMSf156m+vZz9N69Tie8i6trEU79ZhiqlU/zX+XZSv
P/n/VHyvT+0KtReofZ/aLdSu1txL1N5T7U26fpLW213tDfx9Sde3U/tbtZfr
md/ge9Bqn6zrdXX9Q74HqHaN2u/z7qq9rdrfqN1F6+yg9ndq99f1rdT+RO2+
atdT+yO1B6ldX+3P1F6itRer/K72K6rn828ias9U/XEpPueeUPvTUnyOdtP6
O2nuj3Ci9o5q/6D2cK25vdor1V7Iu8m/naj9oa7tpb2u1Jkfp/g91F6l6yMU
v4fG/uWzQe2t1f5C7dd57/jeNe+8rjfk72Ca00Nzd+b/8vH1qtoN1P6Lz2m1
d1H7Tz5bFb+X2inFj1d7b7XzavdWzG5q/8O5qb2r2uv4bFPMNvxcoNqT1d5X
7dqKv13tZmpvofbbvMsqaxQzS/Xnpfhz4HrFNOHvIYq5Ru3GahfUHqt2I7XL
+Z6I7tVRdaXKLbreVNcr+L82au+jdknt6Wrvr3YN37PT13lT9C4MUvtiMbaP
yslqX691uqpuqPKo4g9QfD2YVrsl/49D7e/0bCtVtuPzXNcP1PWt1P6Rf2NX
2V7tZ3S9ta5vrfZTardSu77az6vdRu1t1P6N/KvsyP9/4z9Qquym9rByfW2g
0k7lT42vVdlZ1/8gVyo7qf0z//6msgP/N5LvV6vsovb2+trsbO3lZe3jP75f
pLKrrm9QvV6lgdoH6z6d+DpX7dl6nrZ6nm3VHq053VQ3UrlM7e6q9+ZMFVtL
pYnaHyn2BM5AjI1TTDv1m6tfR+NbquyjdgPVu6i0UHtr1fVVmvH/XlTXVfle
c0dp7rH8bDk/R65re6q0VLu16lYqbdXuwDOqtONnjrm/yoE8k+pG/IwfP2PO
mansz88ccx/mq30Qa6gcpPYBrK3Shp8rVt1cpTX/90H1tir7wpWepxc/Cw//
Ks109v1VeqvsqbKXylGKPZL/S6Txl3Ru7bX3g/l5FM5d410oGj9GpTP/Lq6y
g64dq3K8rnVXOVzXuqnuqnKY2keobKvxo5nL/9VQ3U2lp8puKrurXKy83ax3
4SaVRcrvLrrWXWUJ/7eI7/vwNR3/L0TXunKv8ohpoHKi19hDpYfKrl73BI/T
H1Ae+91X5UjORfUxKid53w1V+uk+ffl5SLV3pq3nn6z35yTF/6B87q3rA73G
fipzdT59NHaKyg062+a6Nkill+adqLJKcxqJ05s11pfvw/sZOesT+Vkr1aep
DFFprdJGpTNnr9KB9139lioHqJxeHvH0e5Jj1YNVzvT4gSpDvUZblbNVWnnd
szxOv4v21VHP04HPWt1nB5X9tN65fhfbq4z3+XJ+w1U6qnRSOV+lg/sjVQ5X
OULlAo8frDLK145UGaFyiMqhKhd6nP5KPcO3KjuqjIY5szHOXByncp6fhftd
7lzB3mWOpX+p78P8MR6Hwyu9BvyMNS+se4XH6U/x2XE239SNvVyiMsH7hqOr
XcPpteaMHF7ja/RfEQOn6fwGq1zncd6nW3W+94idX8TAAD7LVJ+s6+/o+qkV
wd1VfkbO+laVU8vjfZxsLsj53eXBAc96e3lwDIO3OZb+6RUx9xaVOzwOh3d5
DeZPMi+se6fH6Z9jXvgsnmpu4PGHurHPl1We8flyfveWB2fMm+ZY+g+ZFVi4
z+N8xj/sa+T/gfLgjNze73H6030Nvh5VuUjlYpWnyoMPcv5VMf4Oy99NHnOu
YHCmY+k/4vvA3eMeh8dZXgOOnjQ3rPuEx+mvqhs5nqPyoJ+F/TzrfcPRc67h
9IXy4IwcPu9r9M8wB3NVZnuc96k/f+6qnqfyUnlwBl8vepz+035Gzvp7/q+l
ysMqS8wHOb+nPJglT4vF3r1i7GytvYviButdnqb+QPUnanw+z6XPzYzKEH4G
3mvA0WLzwrrp6mgvKo+fr+TnHPi53qWOhanXXcPOm2YLNpeXB6/0v/a5c67v
mxVYeLs83jee/R3XsPaW12DsA8fCxQqzAhdfOsfk/GPnBtY+8jj9Dz2POZ94
HO4+dQ0X7/qeMPtFeXDGup+rzHD/PY/z3F/5nuznG+8Jdr51DZvflQdb5G2l
r9H/2XyQ/+89zjv0i6+R8x/Lgy2Y+sHj9Efl9PmpcqTKT8rpripD+fpB9RnK
7/3K73nqL1TsOpUzK4K11SoN6ga/v6sMVHtA3WBt9+rg7g+VZWLmAa1xLl+b
afxXlVd0fU7d4GWNyt/lsT48rDcrMFg/F/tk3xvLgycY2eBx+ulc8EFu//U4
7PzneplKZS7yRH74JRtvmKNNHqefysU11srkYj042iIXuYeFfC5yBmu5XOSY
fjYXsbBWyMU4fBVzUcNLeS7GmVORC+ZYt5SLcfo/OT+837VycU+e+x+fDedS
nQtG4aVOLtiiv3Uuzon81+RinPejbi5qmNoyF/wxZ6tcsMX51svFOP0qtT8z
p9vkYj14aaScNqyOvDepDuZ20Pj2uXjuVSrb5iIW1s6vCP521LXT+Kwg9+pv
l4tx5uxeN9jZRdf2VHsPfmayItZ63kzvpXvtqfKrPo93qw5edlN8U7Xf059t
v+n6iIpgcy9YEG8PibcL+fo2F9zARcNcxMBa01xcg5G9c3G+cNcoF+P0G+fi
GqztmwtWYOeAXOSS/A+viP11VWmeC4bgcb9cxNJvlov7ML+Fx+HrQK8BUy1z
wRDr7u9x+t1ysf5OKk1y8Szsp3UuOIOvQ3PBBDlvnwtu4P2gXHAGv+1cM9ZR
pXYu8tzZ82Ckk6/ByCG5YIt1W/kZud9hjoWXdXUjl8eotPGzlPxZAlu8u4c7
ln5bj1f4s4ZxmF1fNxjqonJ0LpiDo6M8Tv9Sz+HacT6PnVWG+t6sPdg54IyP
zwVTDVS6O5b+yIpgpLfKAj6HVPYWRyfl4jqM/Mn/EVHZXe35dYO1HiqN1D6f
30Egtk7JBSuwM8A5hpE/FLOa+cpR31wwRN76OJb+yb4P8/t5HE4Heg3Y6Z8L
Rln3VI/TP8d7JbfviPMZepZLtKfTvG/YOd01TJ2ZC15h7Qxfoz/Ma8DFWR4n
z+f6GhwNyQVnnO/ZHqc/yM/IWQ/PBU+wc4n5IOcNdQZDdFYP8h6qf7CZusCx
9M9X6eD5IzwOyyO9BhxdnAtGWfcij9MfbRbg5R/dq7HKKD4D1H9VZSHx/Nyr
6jGcfd3g63KV8ebjBJUrchHD+zvWNe/cLc4NZ39lLpiDo3Eep3+Vr7HWBK8H
Jzc53+T/8opg7TqV95Wvx3Qel+naf3qef1V66vr1uYiBwYmuYWRfjV+sM5yp
OTfmgjnWvcHj9FeoPKAyXeVm35PnfiQX58653pELtsjb7bnglf4U80H+7/Q4
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
Pd9rsO7cQnDGunM8j/4iMwEj/2hfi/hZdH6ukn+L1L4Wqv+Jz5fzW1IIRvm+
1GLPo/+m+SD/r3kcvt7yNVhYpnJnIVhb6vE7VN7wNTh6x/kjPyvMCjk/ohg8
1Of3ujtnMPWuY+m/7fsw/32Pw+lHXgOOPjQ3rPuBx+k/4/zw7i73s7CfT71v
OPrMNZx+UQh24eVzX6P/QEXkdqXKlx7nHfrOOYeFXcTRzipPqP2Vx8nzx35G
zvoHP9OzKr8WgifyvNC8kLOfVJ4rBHc/Opb+974P81d5HJZ/8xqw84tZYd2f
PT7ba3AGY70WNUz/7nmws9E5JofbFePePMufheAYTtcWgj/6GwrBDXM2mQNy
vq4Q7wB7+svz6P/ta7CZK0aOyXm2GDmGkR2KsTeeffti3J9+qhj5g0dENG84
n/+pvO57lxdjDdbNFINR1k0XYx79HYuxNuf0j58F3vPmD76qi5FjclinGEzQ
r1WMXPLeVBSDYxjcohg1Y7sp/7uqfK32lsVgiPmVxZgHd+t9T85u22IwwVlv
XQyeyHOhGM8Cy8Vi1DC+Ue/yEr27D4rHdvz8nN7lxeqXijHOM21TjDVYl/cK
Zln3oYpo874d6XeOe7Ytxnz21LoY9+aeexYj9+SweTFywFnuXAx24W6nYpwl
/T2KwQdzGhaDA3LeoBicrVbZpRjz6O9ajGt/qOxbDIbIbVOVf53b1WZzruOo
+Rzduxj54ywbFeM+9PcqxvNy72bFWIN1mxSDVxhvXIx59Nt4r+x/t2LcY43K
fsV4Fvbcrhg5Jv/7F4MtmD2gGMzBcktfo3+Qz5I5HYqR+9oqrYrBGed7oOfR
370Y9+TsNim/S/k/QfxsvTjaQ6WGnw/12WccO8/vYSf1q4rBWkffh357Py/3
bs/vYRYnr2ndQ4rBNIwf7Hn0jzILsLNA5QaVG1VeUZnoft9inB1neUwx2OVz
4mjPo9/dfJDnLh7nPT7e12ChazHec97FYz1Ov5uvwVSPYvBBTk4uBk/k+X6V
YSrnqpzos4O7no6lf4Lvw/xeHoflU7wG7JxUDFZYt7fH6V/oc+GcjvOzsJ9T
VfYpBpv9XcPXwGKwCy8DfI3+meaDPA/yOO/QWb4GC6c5rzA12OP0+/gZOesh
xXgn4fT8YvBEni8oRu551nOK8Q7D3VDH0j/b92ntM2Mclod7DeafVwxWOvhM
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
+OMOcL7xtR3kvfXwc8AOzrfEN9jKc8o9r6V5auM42GnvtSq8XuKEbOs4zqun
75H2PpqbJ1xyHZxjfG2423AXPlwRPjL4wqeHqw6fIW14KqsdTkJchzBxtOev
rwkHIq7g+l7vCHPcwc8KH8d4DvnD6Xac2e3kZ4IpPlMSD2EXz9nSz0IcjHZ1
3C7OYXdzw3qJk7Cb4yg4wa4wHyf6XFgLl9lwnyn+NLxpMIUnLvEQ9vIc+MDv
1q8YPJ3kuMQvyBh84Y5L/IcnOw43YB+PwQheuQHOLU43/Gx8nu3tNcgT3rfE
QzjIc5p5Xn/n8zTHwcpZXqul10t8gKc7jvO70HuG775+JlgZ6v3Dzjnuwxae
uMRDOMxjOOsuNB/k9TzH4bN79P+YOutwqaoujF9ghpiZOyfmzLUVO7E7UBRb
bMXu7u7CAAsLLERBUbBbsUURxW5sxRbszk++9bvvOw/+Mc9ZZ521195nz4l9
Vryrqrpva3teW/UPj7Lcqp5jxvpvoZqD1CHkP6amG7XeeMb38ZxxDVH3rVWH
kC3127olqm1IvUKutVMsx/VyunUNsL5WTcJTLcd1cZavCa6Xwd7frz2eQTXl
IHNNURuuVXtwiOX4v6nnRl037ttzLMc9dq73mWtq/lG7j+uGOnGtuoXnWW4H
6zi/18x6hBf4f6a+ILUHr4xzvLOquoL8T9Sdo1Yh19RFbsM1Rw3C4b4mLvP+
Lpa9yNcN+lp1ES+33OfkAYELUNE1NMJ9M4/U27vD/xM1BVu1B9le7f+bOoLX
+/8cbTmuoWu9f4BlR/q6of5cq27hdZbb38ev8vUx1npPcv/UHqSWIHUHW9cu
NLUKuabGuQ01B++Kebo56KVT1SGk5uDRlh3n6wZ91P5bJlVdQuoBHu7zGOPr
4y6f/1d58BLVGeKaoqZgq/Yg23v831NHkDqKPF/utxzX1njvL9OIY9Hfz76G
qAXYqlv4gOWGWMeDvWbWI0RvD2reJarVx/VCTcFW7UG2j/l6etRtuIaesBzX
x5PeP8+yyFHDcOJ/ro+JljvN50TdxXWa8d2dq99TzWNeajGeXq7LNZqcjprq
/30ILnr8anEt9Y+2X+aSmRT31Bs11ed6ijxOy9dDxwTP7XLUg3Dbz3Ot6Z8O
/kexvd71mVal3lO0n7ui+iLU0aGeDv8PNPV0niTnmDqmsb8g2F011dP5Ktrt
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
YwvbERq8xxNDZruasPiWqEsO7D5wHsFJPME4ieBC0u6EkB9omYVq4oOluCwY
bjXh+51sjEjwIYfWpR+8tZOMI4nuk0LP9panHX2BL7lITTLgSy5ak55OfMmQ
36EmrMIV6pKDBlsU/EjwRZeqa0ycyynGpmQsi9dE38n1GdfPTjVhDK5W1zFo
8EzBqgT7dC+wZLGz81yIa79PTcfmxsYQ9AT++3bRyKxc11iZ59OCv0tNWIUX
RdulasLbPD34u9WEVTg0+EvWhIEJdupT7r9vXX3Rtl9dMuAW9q9LzzM+z6fd
blDo3NUyp7J289jWB/uuJizEncCaqwnDcFuw7GrCIQTv9TnP3xnYAi0/AEy8
mnARL4txLlOT3Fkhs6f5Z7JOqwlfcaO6ZKDBcn3BukdG2+VqwvAcEvJ714TZ
OCLoIb4eBge9V014jJvXJQ8NLuxL1gdO6yvm8awG4xPeVmD9WeeoTDRy54IR
5fO9MtO5MKazg7+Pz51n/Rt+9m8PXl9NWI43ZKI5BrYsmJTgz54Tbfe1zC2s
XWs6dmOmuZ1iuSnWfV2meWas50Xb/WvCjbwr+KvWhDU6LNN/xLV7e9Cr1IRr
Co7tu+5/17r6ou0edcmAh7l3XXrAnATT9n23Oz/6OsAyF9V1f4GLuHdD1zT4
q+Dgfuh22xR6voEbCVbuVB+/IPQcVBOO5SGhZ42aMCrvZy1dk9xFIXOI+RcG
fXBNWJcH1iUDfXFJmKnovjhkDq0J9xLbO3iol/L8z2U/ZwyXhMxhNWFgHlXX
OxT68Lre47TdOtU7EdzUbVK9f8HJ5F2MzmdYqwZ9uGUGFnregmO5UaJzYUzb
prL3gzN5SqL3I5iZJ+HTqAlXc5tEtlswaXdI9Z6Ev29Dx8Br7R7jP8ZtJ2R6
R8LfFn+LfQbHs8b2OAcUeieCyblVofcUeJsnhMyRHs9mhd53YHL2DP3HWv6R
TO93xlPJ5e9AJg36eOupBX1cTdieWxR6p0MPjbEc6GtmUPR1gudkKmOuCWfy
Xb6da8J9PT1kTqwJz3PnVO+pTmzP0LNZTTi0u6R634HnuVsqPriguwa9aU24
oGeEnpMsc2bQJ5t/SMzhwQ1hw+4V8lvUhBF6b4xhtZqu0T2Cv3nNOKLtopEf
HHpOcV9Dgj7VMmcHfZr17JxIJ1i14CCzBRv5tLrOFyzTA6L//Rs6lxPqOncw
SIdHX4NMfxDj2aom/FuwjdmCb3xZyJxhPSfXJQOWKXjJYOKCq8yvq9tdGvKn
W4b2/3pcZ0TbbWrCOD23rncruKP71TUP3IOHNYSti+7LQ8+Zlt81UVv62x07
Q01yV4bMYOu5IuizasJ9HVKXDDT12Kl/TN3jq0LmbD8rduoQFiVYg2OCf3FN
WKYjgz6nJszVYXW9i6EXSPXeSYK+rK71Bpir14T8+ebPmeq92x701cE/1zJX
1vUuBpd1ZF3vTbBYb6jrfQTmKniMYH6C3TiqrvcdGHejQs9Qyx/R0LsZzN7R
fF9Y5rqgL7Kea4O+sCZs2OvqehdDg4cJjihYmOfyveLx3FLX+w6M1uuj7SWm
bwh6WE1Yr7fX9f6CvjH4l9WE73pXXe87sGH3S/U+Atf13rreQeDBjg354Za5
sa73KfO8f6r3BZiwBxZ6DoP9enChZyxj3bfQcx4s2m06JAv25/bx7XZUQ32x
z3FwPcH/nMfnyj44uvD2L/RMYH9cjOdSj425AHMV7E+wN8F0BYcT/ySYskuV
dQy8WbBCDy/0bGe/E1u2Kp/gkYWe52DUnhj08YWecUcXej4v4PYcB6+U3wLW
0TvVsxi846GJ/LDg0C5a1xoXLOtDUz2rwa49MZGPFvkuDfkmwbE9qSEfLDI3
xfG+7dJTzvXcByv56IZ8vdAnNISnzDvp2ELPbc7n8FTPYfBvb7ZPFroaet5p
17P42IbwlKFnCX6H321HpHomg3V7VqFnL3i4pxd6bjO/+M45znxfmOidwlwP
KfQcBjP32FTPPbB3Dy30/uV/OqfQMxbM3CstCzbqFe4HjFb2OQ5eKfioK/je
Yh/cXXjnFXo+s39TofsIHNvxda1/uLYvKvSMBTsYzFXwdcE0BU8VjFywVC8p
9PxkHwxVsHnBYR1e6BkI3u6IQs8lMHkvK/QsXdXtOQ7eKr9VrWNkoWcauL3X
FXoWreXnAmOh/2sKrS3B7QVDFVmwV+l7dfPY5zhYrWC0ruXzYB/sX3ijCz0P
2QdDFZxf8FCvKPTs5XzmT/W8WJt7udBzA1zgRVM99/p7XuCtV9bzlLkEz/VE
bCxNydxS6LkEdvDxqZ5pPH9PbOjZCh719YWemcz1bYWeaeAI8xwCLxisYJ4l
jBMsYp7ZYAvPXhZWLbLgpNI3/cDr3K8KuxTM2E1a51oW7jA8nnnQ4A9fUOg9
u6LnAlxycGS/oC5UU/itYKWCEQyuKsfAKQaDkuciNHjF3EfgSP+Pb7qG7k8w
psGs5vmyZMic0tC9Cob1wFz3PzLb5bo3tvA9CMY0+NLEnww0fWy71h6dWPep
cKu5V4kPQf7f6HeYYy14ju0YOnfIJQOGLXrAkeWeBZ96RkkxJdv6Hn2srmfI
Ln4Wbmk93Hfb+17j/KHBlD21oWsCHGiuhR18PdwaOvpZD/EhYCiDn3xaQ8fA
OL6IeY2xPVpXLAkyS/i+Zp6JryAeBEzl3blHasJFBROVZzn/EbjxYCYT67Eb
10mimBLa7JEr7oS+9gz60kRy4GCiZ4J17lEVpisxK9A7lmfi9hJzwvg6MXzL
ikXZ2/J3YofPhed7ZkOxLtALxrmMqQkL9KymMITBXr09xrV2u3B9n6prH7zf
J+qaq32rM/FewXodXROeJliapdC/brswXW+jzmtTfYPDiMyPlj/A53d3jG3/
OH5Q7D9dV79gtF6WKDaGfp+tKw4GnXdgJ7MMMTf7e86nGdMUvNr9fV4tXEi2
YPvdy7s7F37oD031Cz22JnxJ8Befr0v/EeaDGQju5BWJzgsc0Tuxp1lmcKqY
lceD/rkp/WBQEsMDfhzYcb/hA8qFD/hSXW3BjXygEB95Yn3oCzy5u7CzWQZM
MPSAN3ZMLqxKcAQPD/ow7z/C+8v678Z+2C7swQuDd0Eu/JyTcmENgg93bC5d
7E/geZIL1++PpvD1wNZbkv+upv3JPFdz4UaBtQV+GbhTHIcGx2xGU2NAzxt1
jQEcv7Nz4YeB59S1Q32BQXZ6Lkw78MbuwU5o+ad4H1nmrbr4YJSdnOscaHNG
rvbovRfboGWYD/4fcDrLHdLDmF+taz6ZE+YD3Clwg87JNT72h3uewGvp2aHz
BavohRjPxabvw2bYLpyr+7EZtgun6IO6+NDv1jUeZKodagvezQM8D9uFK3Jp
rv7AzxmPrbJduDSvRF+XW36Ej4MjUu8QHyySqXX1i/yndbVF5xvR9mrLtPBS
wUq9KpcusEpGewvmxHO58pbINXmQb8l2YYB8Udc4oR/iW69dOAPX5moP9sW4
2I7NhS1QkBuVC4NgrI+DK/B+jOcm82fpEN2Zu05eXq4c2oWCfiZXDs83dfVF
TvrUQjLI3+p+wCd4mHeRZT4Lmfus5+5c2CrkFt+Wqw37v4TMi9Y/ra5z5Fwe
ie2W7cpN/obaHLly/36qi0+e6Vwd0k+u6VfY800/Gse3ssyvddHkAz4Yxx/I
lYvau0Py6Py+rjHT12O8Ky3/OGvXduWL3ZPrHMibfipXPiL5ao8H/Zj3H/Bx
cmfn79CYyUmblKsN/+UfdelH5w+F5haZZYnhSRQ393dd/ZIHdIljjok3HhHH
76kqVvv5XNcH+UQTQnZby78avFdy5ZK84uPkKE0xjzyAP6Lf13PlqyzaofmH
/rcuPeSn/BMy7+bKSXixpjh64uSzDl3DYKY8iT28XXkEXWJsA00v0SH9tH0r
V9/kKaCDmHxyQIi9v8P0hz5OjPnI0PNAVef8RLt0Mp5Sor6IS78q6Puqoj/K
1f5ezwvzc7PnDD3EZ99f1XFi14nFJCaTkupDGopl5/jghmLf0btUh84dfcRa
PlxVvOVZqWIcH4v9twvdU8wDsZbEXM7qeEzkG45LJdYzdazro1XFCZ7fUGwl
76NzGorFRCcxno9az4UNxUo+wfM5VawkdLVQzDF1aomRfDK2/dsUIwlNnORF
qWIWJ8X+sIbiICcGPTRVrCT06FTxfM9XFUv5VHVmDCM0sWmXNhQ3iZ4rGoqb
fDrokani/56rKv5wcmxvcpzjM1XFOg5PFUOJ/JWpYhCRI87r2apivXpanvjJ
kQ3FL6KT+MZnPYZZMsX6fBP7oxqKWWTMDzQUZzYl6BtTxRG+GPT1DcXPQROz
90ps3ws94xqKI3yJ51Wq+ELo61PFKb7A9ZMqXvBlrqGG4gWhr2sofhGZWxuK
53uV6z9V3NubXIsNxee9zjM5VQzia0HfnyqmEPnHU8XzIUOc3RtVxdrd0VD8
H/L3NRRvh86FLUN8HTH4nAvxfk+nip/j3D9sKLbpi6BfShXT9jbPwIZir6Hf
SxWj9h5jaCgG7p2gX0sV9wZNvNbHVcWhvZUqju1dzrGh+DnoSQ3FxqGHmLX3
Lf91Kh/81NifzDy1Kz7tk1Rxex9UFe+GPDFvazd0/PqgX2goRu2jquL9PzD/
5YZi1ND5ZaoYNWSeTxXD+lZV8WyM+daQ37Gp2EH4v6aKLfs06Dcbii2D7pYp
xou5eruhOLbPgv4rVewd9I+p4tU+4XmYKv7sc+awoTgn6NcaintDZmpDMWRf
Bt3MFNf1ddCfNxQ3Ni3oWqY4sK+C7pEptgz5JFOcGDJfNhRDNj3oTxuKUUN+
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
XXgI+Avez+UrQufUXP4hsIpOS+VbeiXoU1P5kOCDpwMGBbgZH7WLxp/yYbvw
JfCJnJwKTwo/2NR2YVKA1fCJZTYO+mnz8b987vGc3KZc7I9qyhP/ol24B7e3
CddhiuXB4Hm3JkyeLy1zR/CnJsLbebdNGD/Ig/+wUkP4AFODntwuGXwcnAsY
QXmbsAzQCU4CuS+MgfyXhRPl8De6CIMAmlx+cA3AFMC/AGbPBzXhMOCn+MD8
hSyDP2J6u3LMsf/jC/jQ50j+1G88C2P99nW7cqKP6BrP03blLF8f9A+mbwj6
l3blgR7ULa63duX2vhX8NVLl3JLfCuYONLm3P1pmSsgsmyin9QDLQO/vvM7p
NdlOu9SVM9g1xvN8onzVkeT/JsLtgf61XXxyQv9oV87mNciYxpb4T7vyDV8J
+nePGfstuZb0NR3bdV0y2BgXSvQffRzs3g2NAVslOcs/1WS7IzfzG+7XbsLh
+YHnXEk4PeD4gOHzUqJcrb2CXs/03kG/2S6Z5W1L/L6mPLvhprElfuv5P7Kr
cgPpax7n7vxYU/4Ocf6MZ2JJeTrw7y4pH/DnoJ8qKefuZ+skX++XoCeVlEf2
g8dG/t2vPA9KytdDBlslOXrwsUmSs8a1gc2QOPl58aOVlLP2B8/LknLcfq/J
dkdO2d/MeUn5a8hgVyT/7s+gXyop1r1L/KaUlMv2V/BfLimXDRlsieSjwcfG
SA4aOrElEp/fxr1aUu7Y/2qyE5JrBv1aSTlo/9Q0TnLW/g369ZJia6GxJZK/
hgy2R+LkZ9RkVyS+DvqNkvL7OK8XSornp98xJeUuVYO+p6QY9W5Bv+eY967t
insn76w791tJMevIEN9OHHsp6PdLiuFH/q2S8s7K3MMl5akhc7Pj+pkrYvvJ
QUMntkrysBjD5yXlZ/Vsl22TPDLoqSXloPXgWVZSrlwv7uGS8sKgsU+Sa4YM
9iXysyrtupbIt4L+DBnfd1d3U05WjXuvpLyVOdp1HZJjVefeKyk/qz3o+0rK
gcri93VJuVTI3F9SjlXC/VlSXs8sXMcl5WGlPAtKytVCZnxJ+VPwHygpNwqd
D5aUf9QRvx9KynVqBP1wSflQ0N+WlJ+Vcy+VlOtUxO+7knLHoB8pKXcMmYdK
yktqBv1oSflW0N+XlOPGeX1ZUr4S/T5WUv4ac3JvSblFs8Xv55JyHGZlbVBS
ftCcPGdLyiFC5omScotm5/4sKYcF+Z9Kyj9ibn8tKUcJmSdLyo1irh4vKYcI
ndzv5Lxwb3YrK29o7nbd1+QKQf9RUv7RXFzTJeXszMM9WVKuEDS5ReQfIcOz
gpyg3kFPLil/B/qvknyo+FvXdB7NfMEvlZULMz/XcVk5MtDcd+StLMz1V1Ye
zQLtur/Ic1mQa7SsXJgFfV+TR4NM97JyZxbys4JcGOieZeWSLOH7iHyQPlxP
ZeWqLBL02yXlpCzKfVJWzgv8Slm5LYtxHZeVnwL9bkm5J4vzH5eVL7Ow701y
TOirXlaOyeK+38m1Qf87JeWB9vH9S/7F8r5HyFNb0s8BckaWbde3LTkmS/ne
JPdkaa7RsnJMlvb9S94KMllZuSTL+P4lxwS6UVYex0q+j8g9pK+0rFyS5fx8
IGeE8cxaVl4J/FnKyhlZgeu1rJyUFXxtk1eyYru+l8lbWdbPAfJl6IvvWXI6
VvT9/lld8XJb91CdL+LczuqhXJJV2vXtTM7IKn4OkMexRtDzlpUzsqrvTXI0
VmvXdzQx+av5/iWXBBm+qck3Wd33Lzkp0HynP1NXjOslQb/frrhW6Mfrimcm
7pq4/zXblQvwsPl9HK++VtAblBWjvpb/owl1xeXuWlbeyhp+Dkx0XxcH/0nL
EHtMHs3K7bIJnNXQGPhefq+u2MXHqJtZVxzsU2XVsyaec/vuiq8kDnZS8F+s
K5b116BfNv1b0M/VJUPb1+qKvVyku2qmQy/cXTk7jIHn52T3NTHk364r5vP8
7qpRy3ge7a7a0PDPc71R4i2/p96l6R+6q3YksZHzxn/6pse8Q3fV/uN/3yr4
H1tmvh7KU+Zdht/tS18Pg3vIh3Kgny3T64obfKCH6lAQ73cqGOt1xStO76F6
OsT4zQG2tek5e6pOEzLTqI1UV2zhpj1VGwV6AFjmjj07oZfitIjXAjfvz7pi
+e7uKWx5YvY+7akaBPDv6ilMb2LqmiE/w3RHL2FBE9u2ftC/ecyn9RQ2L30d
H/yultkArD3r/6ynvjkYA98drKPx+7OW5puDeC2+O4g3Ik6JNT7fE8RW8U1B
XBTxUWCLsT6FZo1K3BUyYMeBYUa8EWt+Yo6gwQLlvU3sGe9uYsLoCzw9cMX4
ZuB7gfgDxjPA3w3wX+mleBHiRsAyYv0OzTr/L8de7O1vEcbMtwkxGfQFliZr
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
keG65rrnujq0qfas/abE9nXGFmuk4SE/IhVWAOO60m2piXk111mbtiNMs73K
8tSLHJPKngPGALgDYKfxQyaraDvS8iOsM7Pt5zq3pYYl9Tfz4F+Tiqavyxva
b42BMbVkR5vfanNqm8ZyrXVST/Na828PPU8FXXRR3Ur6xf50Z2xvi9/dbbI1
gf3RrOj49dYD7gL4C2DFYV9EBjvVVaFzbCpMhjGWRze8cebflGr/Tv7rpuQa
FR2/0TJ9OzSGu4KeNY7dbPqahmjaUqPzJtPwbjFNzU5o2o21zCwV8W61zE2m
keUcxlnm2tB/u8+dGpzU4py/orqfd5pPvU9qgM5ekf/hnlQ2rsuakpnNc0gb
ZB9IVevzkzbJ0ga72R2WQSc+DPjY2YhRuscyYxtqT1vw+qgT2jtk7k1FEys1
pqF9aOKYiKNqyd5v/vhUMuhhO956HjINn/O+w+OZt6J+P23TeXLsHmLnqIls
Puf0kNtSt/Sx+H3Wpu3Dpm+KsT1ierzlqWEK71HzmV/2P2/TMfTS/5VN6Zqv
onqmE32tsp1g+paGaOLNkGUc/G/wnjCfOqnQi1bU5+PuF96TliEOCxpZngfc
75OtZ6LbUjeS7wi+NeAxJuqr8qPW6mLBn5yq9mhHF/Ge9jjXpkY291EX1VTF
Xomt8q6G2iD/XCoZ6O06xJ8l6J2a0rmEv9fA6OFbDN7z/2kLTW1Tts+Z/2Iq
3xh+Mfxj0H1Cz8imZBavyB77omU4Dk28G8+GSR4/dlP6xXa6XBx7J+j1wX5M
VR+Wc1m6ov1+Qd8b5/VGqmcp35LIcJzz5vzhLWx52hIDx7O3fxfJvmY+Nlva
8B36diqd6wV/fENjgKYdz+5lKqpLO8X9IvumaXgco0btm6bht/aXrUj+bdPv
mUb/Yp4L/jv6fNd8MPOnpcJC+SCVn4Zv7c46upahvi0+myP8PY4MNme2tMHW
9Vmq2rXHdtE3Nb5LvtOxgX1gnWPNJ9aQ73d08h39REPtabtzU7V0V+KbOhVN
v481tH+E/UeMiVjFj03D375DMkfie+L+tk7mFPqYLpoPzovavl+l6ve4Ltrn
nLkuaEstXurw0o79VTxP0y3/uWWOdV3gr8z/0vLwn2qoDfzPLLNqRXo/N03d
X3TyP3yXCiP6JsdbUvcXXy2YPNDY7dFBf7RjTN8GfSM+31Q0badbhn5/SqX3
5qCfb4hGZkJZ9V2eKKsW8A/ms2UfvGrqC//ktt+bjwz1gv/mWrF+5Kg7/BI2
ecuvVRGN7+A76wH7+hfLI/NnbH/jvzBNfWJqE6P7d+t/tSEamb4Vyb/bRbw/
zKcN9Nru8xfrRxa9/SrS/aflGSsyjPEP9/uedf5tPW9Ev/94DGz/Z3qdivaJ
NX4LfPss1l1dVS8ZGY6XMvHrXcX7123/No1sd/AKqF/WTXWaqde8bkXtSqax
PZXBdgk9M6Jd16D7V1Tfuav7Rb6LaXgcQ9+7DbVlDD2sE7qLZZDneHfzOY4c
9Zqp7UyN58O7qr+eQfftKtkelqfWczV+a3bVtqfpD6LfXqbXx84CNmtX8Srm
t2fax55G7Wf4G7gfdNGO+s/4pfq5bbtlEtNruV/GgQ7sdXXzqTMNjV2uYhn6
hZdYpt00slwfzG+N822oX9oyF5wz/0OeaV6Yk45M+2BbUbe9w/TXnrtNKpq/
wvKfNCQPXXhukc0ss3FF28wyuXWih2NzBH1d8DcNelawYoP+oiH6SI+ns358
VbzZzAejGJp2YG7N4nHCm70l025sr6quH+aBa2PuTP2OYT6jrzlNL52pJnWP
bqq7Pbf51NumBvfm0VfvzDW2q9KBzGYV4XjBB78L2Xncdm7T6OB4b8tsGW3m
C3ps0IvEdsH4vdlV9bAZw64V4S1Ts7slCw0m2LcN7d/gOiydeGEh+wP2eeth
TOh8o6vaLWB56m4v63Oc0+PhvGi3sNv+EnqWyIR1Bm9R80c3NdaBFW3hUzec
OuCLZcIf26Gitm93lU7421WEQ7a4ZeAtZBrZPu7r94b+A8aG3oXdFiyxTvy1
qn7I0w/9L+KxwVvSepbPpAefKee6lHWu1yG6e9AbZXpGgWM2pim5XbBZcQ/F
b6+Ktuzjz+I/Wc56ljXNf0WN9BXdF9vlTVN7ndgkbOP4eVcwf2nL8P/+5vas
V//G/m/5DYh7zxQjxP8zp68Zjq9imR06tF+x/pWsZ5emZHYPum8mPat0E29V
t13JNOtlzpHa6viHl/e5MC7Oew23pSb6Gp6To5rSu2dFddX7Wgbfcj/PFTyO
0a7TPp+53rrnFpk1LEPbGQ31B43edTLFXFHbfb1M7xHmYC7fUxzvbxmOr2OZ
ZdwX/uuNGpLBV7uO9UDDW9dtyaWAxp/PtbCB9YBbDn1A8AdlqrFNTW14G1pm
PdPIUud9k6AHd1Mt+I18Xa1vGj3kW5CDgZ8BnLyNLcNxaPDzBmTSQ04HW/bJ
3dgiUw16cjfwTZCzcWhFOR+bWn5Ty0PjN8e3jg99NvvZiU/jOHL4LLbOpBfM
vUohGv3UQqcmepeSxkq/R4eeXbk/MvnNaUt9ejD8aLe1ZfCVkH+Czx88v22s
H0MdNevxiWxjefjkl5Bzgj+FHzL49ulzK4+H2Dfq1xMLh3+euvX4fXaK7Y6m
Ob6DZbZoaB8/y8kVyTzSTVvanFhRzB3y+G3goZN4gZ0tg07GMtBjPrWic380
6Fljrg7J5KPpEW12y+RbIWZgN8/PHpmwRplz5m33bKbs7pYBk4+a9+Dy4ceh
zaCKYgT3cFuwStHD8X0zxRDiq9o7tvvF7/SK6H3Mh7e3daJnL+us1CSDPDx0
wasXkqft/tZJ230sA5/x7uoxcxw5sBJ3MZ85nhdco0zxEjt2iN4q6MMzzRXX
EryDLLNrU/Q50fbgTHEb8OEdbPoA0/i+mNsDPM/oO9TzT5wD1+vQiq7Zw90X
xw+zzNYN7RPbcIhloOfAbm95Yh6QJy4C3pHmH51pn1wh3lm8v8DUPNz3CP1f
F9trM2HgkEt0jOVpC02O0XGZcoGItZgfu73pEzLR5ApR4+BUrvmK6hTQ5pKK
jh9neWI80MPxEzO1py3PqFO4Dkryl52UyT9IHtKJljnW8ugktg2ZzviHRPlI
8DiOPDlVCxbSSV4SsidbJ/NxtOec46da5rzYnpsJMw3+IJ/LmaYZ2xmZ9qG3
i//ldNP4I6H3LUnfadbJM5c2reNnWJ5cKGSYs8GxPSsTJuQ5HgN+SfhDMvkl
2Q62zLUVydMXGJNDzMfvSQ7VEz4+2P0+VZHeQSXpPsfneIznoav5nD9+TzDP
RmTCQDufecqk4+mK9k8P/oWxvSgT7wLLgAXHln2w5S5lvuP3XEWytAH/DTy5
Cyw/uSL+GUFfbJ3I0I724K3R/hLmPehhmWjw35ClDfhw8DiGvuGmkQE37mLr
BFtuuPkchwZzjjGf7/G8UFG/Z5WE4Xee5+rK2F7hOQFb7nKPbSTXXSbctpcq
khlc0pY26ONckAeXDh5zC7bcCMug83LPFTpfqUjnEK6r2I7OhPEGVtzV7ot+
ocGWQ5Z9+kf+mkyYb69VRJ9dkuxIt0XfKMtcY5o+t8hVaxhcGvDkRlvmtkLH
4POsGJMJN44t+zw3bontrZmw1m6I7dhMOHDQ12fCc5tSEX1uSZhbY9wWrLix
lnk7ZMZxLQZ9cya98G6K7Y2ZsN3GmUYf23HmQyPXwpa7yXz6ZBxvhPy7Fek9
32OGBmNtrGUYw63uFz64cbeavj22t2XCeWPLPvrer2h/aPDvjO1dmXh3WAb5
u80H5w1suTvM5zg0WHTUgqAmBDhnYMXdbXmw3O7LhPk2PlMsGjEPU6OPe7iv
gr43E40M/dAWzDl4HPuwolg12tIOHjrBirvPMrTlOH104qW1qzYM2B6TMtV3
AVeW+DfyHsllJD8SGeIBHmb+MuWWbmEZYiGIcyCenhiGJxh7JrzchQu1QX5L
yxCf8HgmPjEbxDqgk1i47rna478m94o6NMRIEOcATcwDcRrg7dJuQiZdV3hs
j1sP+h51v8R+TLAMx6GJi2MO7/T8DyjUL2MGQ268578ndWszxZ5xThMtUwn+
M5n86ZsVkmHe2E4yTS0d5Im7oGYOcwue8Xqe6+8rOoZeYuG2KKQT/F7q4VA7
B/zdyZnq68Cn7g00+L7ITja/Rj3boNvIPypEg7u7vtv/UJGu54P+saLjz1uG
64Z5uKAk3gvmp6HzxaC7lBXjR04jMYGddXsyYfryeynonyqq1UP9no3MQwac
4Vcz8cHdHQh+jukiF921rO2rLZlE9XiIRSEnlZo9xIoQQ0jOJPmR5JtS+4d4
GOr8QJOHSg0f2pILSy0gahSR50oNH2r5dGL4tUsnObjkuSJDTM4B1k+MIufA
eH6uqM4P9X6IZ3k/th8wzzEP7/FsyITFx/47QY8taQuf2BK2yBFv8qHbgtcH
1uB7btu1Kr3jSsqvZZzEySBLG7AAp8b240zYfuTUMh5iZuB/lAnHD7zAD62f
ft+xfvIqkbmxJFzAjy3Pdqrpj0wzlj8yPaPATiR+hlxTYjjBkPwp6N7Q4MZk
wpDcF5ycTPiZxMdAzxf/6f5g2mTCroT3hWXgTTOfOjzU8gGzkx8y6GD7peWp
20MtH3A3qcNDPR5wNLcpdH1yjc0dbb4OeoGydE+3ftqwP1ccP7CQDPiZ32TS
A40u9ls6vjGfWkDUE+K8ac+45y/rvL/3uYPzCT1PVdsfzKd2EPRBnjP0gI3J
3P0Y9ELkZmIDD3rhsng/WebQQvvQ6KW/BcuS/TUTfubvmf4n/iPm4CXPA7V3
qMEDric/5Onn8MLtS+L9Zpr3EHrmC5kjC+lFJ/vQi5AjE/RfQS8a9NGFaGJg
lo/7d4Vc+IpghP6dzZT92zLESv3L/1JVvSPqHrVk/7EMubDk0BIzfCyYOZli
SGgDvVhZ23/NJ3+XnF50EyNFvi5xUyQpdskVi3V8oX1o2s1wW2K0kFmwqtxc
cnThsY88uVrk+KLzSMt2tZ6LQueCufJbT/KYic/i2ZvE77ige+R6h/H+4n0C
zbOdnNpeud4j8JBr5fv2sDxxetTnIGYP2Z6W550CzfuC3H9kyF3m+c97iGc7
fddzxXTxbGdMPOep11HN9Z5iWzHNeJHhfUGb9qCXLes4cn3Mq1vm9EL70IyF
8R3rPhPz547tPLlitI6P76Ys17tjqapocmxnyfXc55kPL7fM8TXRyM6WK7eZ
2DN4DcukppHlfYEens9fxvdhM+jl+e9qar9MVcfpb+mqfh25ZM8qJM8YOiwD
TZtZuabLOt5hPrzZPJ4hhfahGUvqsZFjzZjpn/sRPu9EYurmZG6xw+eiidkj
jo65Wq6qXG1ytluyc1nmnEJtoM8rNL/MLW2gVyrP1LtiWfnc5Hije/5cOeTE
2hGTN1/Qq5SVt00+NjFL9N/bOi8oJIM82/lNn2l5Yv3I/0Yn8X2nuA90s+bG
tnBOXFcrVnWPrFoWj28HvlEWypUfzr1Djjg08X2L5soDJwd8pWi7SNCrBX1J
IRr+UrnqnIFhe5rbtGQXtQx55Ojh+MrY+oNevSxcXNqvUlXNNGqngbPLb4lc
ssMLyYOvC6+PadosGfQaZR1fwnx4S3k8lxXarzpekfNkDqjJxpjpf1XOKReW
LBi8yzI/+E9y0WDqgp3Ls3S1qmqvUYOtJbucZa4o1AZ6RKHnL89e2kCvWZ6p
t29ZNd+oA4fuawqNgzGsxHnnwuYdWWgfmv5XtE4weJFZvaq6cNSHg8c+8muF
zBpV6exXluwq1sP/v5D/a7B/OXdkb4q+Ns6FxTo66DVy4db2rYpem2/P4K+V
C+cWXl/LgMELjezYkFkvFyYtvDUtQw06aGTXrErPOmVt+1ln/1y16MBfXStk
1gm6f1nH17YMGLzso+P6QjLId8qapu4c8shSpw6d4PLyQwbdnPfqnvN+VY15
3bJq6MFnbtbPVQOPc6EOHjS4vMzTJp4rcmHARGhhIUCTm3Cu23fqrqrNhmXl
xYCPsK77XN/6wddFJ7IbVPW9v3HwbyGGPxfm7fpV0RuVVXOPuoa0g7eZZcDX
hUYWfQM8TnibW4ZafNDIgouLzYE+qadHXT14xA+tid2zS4wbWz/nXJYsMtgi
OjFTc2OuJsLX2Nyy2+TC7AWnFxodG/kY/KGWZ11BnDMYEMRC8w4A94H30cCQ
3z5Xrbrzm6L3KAuzAfktfHwHy5AzA01NK2oJUl+Q/uHtaBlq30Ejy7i2bY0z
Ub+8p+4odF4jaq7vZ5rY7l1z5Yl3xkTniosG/xVMWLAodsslA6YrWBTwyXU6
ualjxDDvnotGBqxQ8EOprUcOEfX/wLXYN7b75MJuva2p/YOqip0m72ifoPfO
RRNHTe5SZ9uqeBwDa3a/XG3RQxt0krsEBu3ebstx5MCI3agj1vpBP1lWrb1j
gz6J9XlsD8iFDct2f9OH870R9C9l8TgGjy1twH89hvUrzx3XqgYHFgwMcGEP
tB7wMOCDm3FILp2tWtXgvVKrENzZQ81HBho8WraHmH9//HeH5cKGPa4q+vey
9CHDWNB1eD7z+OGW5z/hv7nKx48wH9zc/TyHR8X26Fw4spwT+ydUhRELnixz
Br4sMuDNPhTjOSYXxuzRlocP71jzmV/2F+2u40dahuPHtWRie3IujNnj6TN+
p0a7E02DGcs4OLZdd/E41sKgPbElk0sGelBVencM+rFCNPrBJN7d1yfXJf0i
y/YUy5wd23NyYcwOiu1pufBs2Z5q+vTYnpELt/ZUy5xeVe1I+GdWhX076D9t
ocHEfbJQe9p2ypoGl2hILsxbzh+95wY9OLZnmU8f0I90F24ubemTdoMt83Sh
c3jMbTkG7tFZljkrdLwUMsNzYb0yVsYzNOTvrunch1SFpwveLjzanBf0d911
/Fzrfy70XJAL2/b8XDJg7Z5bFf/H7uJx7OzgDTWNDH0wzse7q0bnhbnaXRzb
S9BVFebusFwYvBy/yH2BpwtNO/q50Pyz3b53D+mgLdi9w6xzXvMvNv2t49+I
L2M+LvWcXBx6xgR9f9DXxHZULvxd8HHByaXOJz/kh7JWie2VufB94V1mPeD7
wgfjF5nLTXNu0Fv20PErzL8o+COC3sb9Xp0L4/fm2N6UCzuX+qFX5TNlocEN
fq3QPjRYwmAKI8vYr7GeC6rSeWYPtRtp+etznS94s5d7PMiCMTzKbaeE/tG5
sIXZXmt6WFX7Q4K+IZeu8a5PiswwzyX84VXxrnNb8Imhkb3a42Tuwb69wXrG
5cIjBouYueZ/mh+8YtZk/C9Bv1uIfsDnQltwkeGNM5++mcOvegirGJ3UaOWH
DPpuyTXX0zzn7INnvG68p77MhYvyYfR1ay5MY3COb7H85dH+jqBn7xn/aVUy
X/fQ9jbLjwj+fUFv0lOYx+AjU6eXHzK0Y3u75e/MpROcZLB4weSl5i24yHeZ
jww0eMls7zT/kxjn3bnwe0dWRc/VU/qQYSzouiefefwey/8F9ngunGF495pP
TdjH+f9C/n7+n1xYy5wT+1dXhaMM5jJ1ZcFgRgZM5i9C5wO5cJjHWx4+vAfN
H1XV/mY9dfw+y3D8Ics8lmsM4DA/zH8Yv9HR7lHT4CozDo6d0lM8jrVwmh+1
DPyHTXM+6B0U9PRCdKs2Ln0zLvCewYBmDsBIpi47WMoTOddcmLRsnzD9VGwn
5cJzfsIyY6ra0gZM6Odi+3wuDOfvCrVBHqzoidZzQ1X8e3qq9i464f1UqD1t
J8f2mVwY0fQB/UlP4UmDK027Z3PJIfOM6bFV6Xva/YLx/KxlOA4N9jPzyznc
Gfwbq+r38576HyZ4rtD1YtBFL53TCx7bb9jec+FL/7+pO4/fbSr7B/49I87x
vQ9n731LhMySqUyFDGVoIEPGZE5KGZOpknoaNaunnp7mqEgIifKkSKQUCYmi
osncPEi/9T7X5359f3/cr3Xta33Wtdbe9x7W2nt9PuuHiwvjuDl+P4xNixre
mr188mhR3xTMeQsrT1z1f2lhxVyB9kJLb1tcWtS3LC49a3XRtGZbuxj2lvjF
urXZO6Usmwb1jSn/peTLu2Bhxf5JMJ5dnmG05Ole3xa/+4r7hXsA3Ws63dZA
9rvD9dz8P2vpXYtLX4vvp7m+8AFpol3c/Pc59u233VRhlaGDfUHKn2LufeLw
S23jDOIk0lzDucfn/0WzT2+YJ/qyaWjT1b47ZfnuiR8XlK0c7iENrEsXlu/e
YGhvs2HdG+5I+/E0abddsbA0dh5aXGsoW6P5/sXFNzxjqH2j1UY3ic7ajdFN
gsH7c3/9jXN7qrSq7stxuGGZyuO/Y6owdNhOmKpjdeJU6a6JSW/twcXVBjo/
OEm0fnCR6P2wcZXYv49/59a2/7GWbdveMundzb/XUBjcMRhx6QaI/WD20f/q
WDy/1XUZLbL2e3hxzSPCnzdH6JGWPtp+T1lQmEcS//nN/q5582ItW5jRrNLE
e2xxaVb9vaX/WFx6PnR+6AfhUuDCwOC84FXw41y8eFzx7phV5ZSnr6Wuvywu
3eYXxL7dPPmW/nlx6T/TQfhr7K8NZcMsNbswS5uf3Px/W1xzRL/e7Cuzre2P
pP386r11dm07HotmlfaPta43zxxL+gjmW+Lo4/bTdKEFBEP/x3rWjy8uPR/a
CfDmctIhcGzN4aLzA2NOI+2jf2R/l0lMc5zmtmM8p/2uM65vbZvqSi9u39h0
cqT/WVz2U4bSTZvoqLGNi3ebW5gXz61Ys5v/u941Nfxbh9q2voT7g/4tv3rP
nlepdlg3hE7ZomYvaOm8ls7v6jzfdqq22UubS9/Vub1UMKNcC/y0+PjkTXTd
lgpmh5R3rZ3Tfgu6unZGLZ3uqg/zSDvfDmz2Ib7htnRh6loQG36y7TpT57LB
0IcbJY5rUUzX48JgtHHFlj7ZGuSzq+zSafPW2fdtki4XmwbX8l0dm+XjXxjO
Ud+VdhafPNdF15UfF+kzLW9xVxqM3usszrsd7dJO95lxS4e0R9ue1NX5+cKh
ttkrdIWDGWLfYl53tj8VjawVghFjxdifyTascjB0tLSlS9te2NKV2u8H7fxc
t6Xrtd8f27nxrdaGq9tvreSv3JWG4RNzaptNg3vVZm/m/AzG2u7vGMo/Z275
5NG72C32BPP29lulK33v1bqKR3+ODh29wZd2dT58yFz6lj61K905GmrsjedW
PaulLj44+nW0u+nW0azjWyN+cVdPnHWyvw8vU/ugLZubazGu/V5rfvGS1m72
1UmVeWxepWvnWNl+WrMfnVfx1ol/9fnlX2N+Hc9149899przS0tPO2nWacf6
ib9RSzfsSivP/+u8db/du20/vdn7tHSDruw1Us/6scXZILYYYj2l2Q/Oq+0H
WnrtUBhtOLjt88uafdDcOn+7nNv0+TZOG+ir0VyjsXb9wtLXw1m2jvwmXXH9
N3UutN+9U8W5hlmmtX3z+C+cKs082nkTHT42DT15yn95qrDKjBvm5lbXs7p6
Tj2cNjge1hfYIhj4LVKvteY3T12TZ6dn4o3TpaNHQ4/vWfHvMtS2Z5993CnX
yD1pj5h+W3Xlw+Hcrqv3tVu7T3S1xoF06+C1bZvYB0+XVqN6vzNUWcd2ib5s
Vxp9/O8a6j5B5087V0k92wePK4QLhAe0/Kxqz+JZ9czcoatnKD0/eG3cKu2B
+V5XGM/S5RIHP4k+EM2gCbfpuYm/cc6ZJTqNOSb7ZF7r3l3NTaWLY962Odue
oXT0PB9vmi779szbN6ffXH3PUBp5nrMnLKj7jnsOXTpabB+PVh4M7bt/xa/s
iebqd1XO/ePFuZ9oo7bSkpS/a+4t1w21PbHPGqo+OnUw4pmnLc5rE3O32DC7
pax93Sf7qz32BR/BXHX7bi46rTn6dI9Ea2ivrnSHzH/mp0F323TFMa+YJpv5
zeYzm7O7b1fze+Wpzxxdc59hzG2mWbR7V7pG+3c1B9d82gO6uj+6dulnuAb1
acXbPxjzb+Gts2B+777dzDxeGPUfmDieudIDYm+YOjbI3Ju7M5fm/blXfGBu
9U8/1pVW0vFt+yjn6ty6Xx/U/X/3leAPa+mhjsnc5MfPJ++MuaXfSZ9uiV7c
soURjxYcvznPdI0OT5wj7FNXc4BpWdDUsI6JeEckJhve2gqHpy5ljwyG37oB
tOfMNzCv+Mj45b88cfZs980Tm71X+l3avau5WF3t++dyDGx/Nv5XxT46fphX
t/Q1sa2RCmMdVdpA/Oek7NHx0xc6OnhaRtr5YPzHdFXuuJYe39VaAK/tqp2r
zSv/sV2te37K3LJPnlv1HJOYfHDnzS1dqRO60pKyvsDxKXt8MOwTsg/+8xuG
qu+p80pL7S1d6bzRijujK7042ju088zTOHu6bN+ezEM4pat5C+Z1vK6rOR6n
dTVnwlwCvpPjNw/Dtjke9O34N0iM04K39qD1CH0Xow2uf6tfTO/o9K60j04N
Xv3mXdj2HUyZ13f13em86dLO8y2JT0zv531ren1s34Zoz/kmZZ7DKWnDBdOl
i0cTjx4e27eqV7bfmV19U3tzV7ZvTxslju9Fjt2b49c/f2tXfXU+x9a3tvcM
tc2m7aedvs3R6nlbV/o8NHHe1dXaQCvlnHA+vLMrTZkXTpXm0tu70guyJqC6
jAXozbwjZdnivGiqfMrT3tl/umxxPt6VRslFU3VevTrnsHLvTll6LP/dlY7K
91r739t+7+mmlmgTS/XD39vS93elySN9b/KnGvYDXenT8L2v/U6axIl973T5
lT27K20a2jIHNP+Hu9KEOSvtcWzEOzsYGjbwtH1o3nwg/g8GQ/uHdo04NHns
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
atzr7WPjTz+3L0403jIbh1r6vPgPHlWb1Y+TumPiv3xUGOUOG1V8dR41qjZo
F74VHi+eFG7zzn3xoOmr023HUz7aWqh95S8Ylc47jXe65uztUg4GV5oOOj10
POhlR2XjQeP87t4Xvxb/eufgaavTYcdT3q2v9uAL7x8/7nM3qjx++WycYPHE
xR3eJ23Gpx6PKm/CL4bxPvCovriXOJLOha1zf1iRvn1fvGCcYjbu76rNv09f
PEEcMTxhHKWVm/8lfXF++dh4vdK94veuD9/Se0sx9k4cGu107XFpTx6Vtjuu
Ln6W89K6k6uP6vzE7ZXuG3utUenO4/nSnmfj8K47Kr173F71qA8f1/qQ6sLV
pUkPg9tr//bI/tKV1wY8X2vBHt4X/5WuPA36CYf30L7e7dOVp1lP4x9f9uC+
OLM4t2y83sODwbd9g7Vo+5n8Q4LHxdMGnLtDUxcO75vM2++Lt4tjqz34tuo/
LG3gOyL+t4zK1vaDRqVHT4teeWXwcw8d1X2ABj6t+iWa9a6/Ud2H3ZvxbZ0b
eKvPMlbqa94ln/MGL/ZV5sn3xXV9VV98XZxZPFc2PqxUHo4s7NHBv2JUfvgT
zZ/vi08qHw7vFW8VT3gJX9iasH1xY6WviX1cX3xXXFecVza+6nGjyuPHyRUX
F1Y9x6cuWBg8V9xWfrxVKRxuK718Wvx4mq+zzmlf/FbcVnxXfNVT+uKd4ofy
weCovq4vviuOKt+JKUsD/nXx47rC4KrapyX7tmzxVcXEKz0mbZhwVHFTzWk5
rS8bt5Ru+ilpg7UCTutneKxsXFTxYPBV8V5Pjx/m9MS8uq959ubPux++oS9u
qfSNsa0PwMbffEtf3E78TRzSM3IOS60ZgCtqrQC2fOf5GfHjYZ6Ze4j7yZmJ
gx+JJ4mbaA2Bd/TFl1SP+ib8zf/qi195ZvzKvq0vfiY/DiYbLxP2bfHjoYqF
Kyr22xP/rcHgYPpP/Ec4wvLh8CvxHN/XF1cPbxLHEp/S+gDWKsCL5HtXXzzK
d/fFvcSRxLlkWw/XGggwE24m3GQ9hHcH7/g67p5HsO8MHr9SO/AErW+gPbiW
0vfG/kBffOOlw6dj4zyeOqo8/pPTZlzMs/viTOJCwsLgQuJI8uM5vn5UOBg+
Nh7kGc3/4b64jXiO+JC4j//TF+cQ35APBp/xI33xHnEePzmqNRus1/DmUeXx
40TC4CNK+fEZcRPFxFl8N62bvjiD+Is4jfiF/9uXvYSHOKp2aMM7R5XHL5+N
kygeDJ4jbiJOI76h2B9PfGtKaCcuG588/Dv8RdzICQcRLxHvj+9TfXEJP9OX
H8fwg6PaZuMVLuErNvyHad30xR+Ufja2cvB4guKJiw8oHw5fEJ/xC33x+z5q
vn0/wzfEP8Tve9+oyivLB4P/p5zy+H1856Tsx0aVx48DCGMNZdeGa8lz+fy+
OJm4e0+zVmpf3CU+ebh7nxmVDYMvSCcIz+6CvniDuH64gWz8vhsa/tK+eF58
cLh+54zKhr+wrzj4fV8Y1faK4XZd0hdXC6/s4r6+D+LJ4cvhwykHj3OHZwaD
MyX9SuyDgsenW32omHht144KIzaupP3EYZR/aep1jn8o18JNNHn64pdd1peN
/4U75VjhT32tLz4YDheeF9uay7hgl/UzfDE4fLSLp8uGX28oDC6beFcm5q3m
xvfF//pKw3+jL34W/hauF07ZzaPC46bxweCcre/9fF88Lb6vpyyfmPuH23VV
bHysJbwsx2G6nh8HhKvFxjV7hm8BfXGhcKau7YuzxfftvnhVt4/KxgWTDzfh
ZH0rmEunK+/d4W3B4Hzd0NLv9TVX8+5R2XhS32npdX1xqe4clY23hT/1nfjx
lvCscKcua/Gv74sPxcfGyXrmUHicLRyoG1LXpkPZOFWw303Z7/fFp8Jjurml
t/TFCfrqdOXx477gbuFJbWYN4n6G88TGaZLeFFs8ZXG4ftRXWbyke0aFMY99
ixbnJ33xfXCplMHN2nyodky4SjenPWKIhXv1q1G1E8fq1r44SPhEeEhsfJ3L
pwu/ejhKcLhTX5suG/6BvngXbwq/g41zcX+Lf1tfvKo7+uIg4Q39rvnv7IuT
dcV05b0tHCU23tOWrf0/7YtPhJ8kD2eKT1ncIrykn8b+eotzT1+8GxwfNm7Q
lc1/V18cIjwjNr4SbpFt/Cbz//V18YCkP4/9wKhsXCTlfpY4OEHqwDlSzy9S
Lw6U/wLf6tmt/ff2xSm4il5NX/wXvl/2xfHBj7mvL47Mr/vi/ODp4PKw8Ym+
MV15/A+PqixO01ZDlcUDgoXBQ1L/bWkDrtC9qUv9v0kbcHTYeEOPtZj398U/
4oPDK9raO/9+hovDxrVR5/1p859b2d/3xSGS//tgrM9s7XA6n/83XeeHcwNX
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
bum+obAwbP26c4Lx3kx/z3uuCfb+YI7LfjlO7tO/SZv9D46J96W/a+nvhxov
SG17j+Q4PRj7D8GwvWf6Q+yz5hX+Xd47pcxZiQNzbJ45jpV7/xqJ6fjT7nxs
qHuI38ND+a6J7T4E+1Dq4nskmEdjX5P2PJTYfPK8y/Lt+NFgVh7XdeG9Ez0L
9dIF/VNL/5iYtv88VD6fPO+yVm7bf2v2SvPrHgSzX9K/xJ7fYi81Lm1D34L/
mvh/DYYtte3929+HiumdmPdwj8fm/8dQ78E2iL1b6pe36/zSsPjnUO1Slv3i
+YX9e/Ceif+K/5+x+ZdOOx/OOzf1wr6zbf97KE3LJ1r6n6HelUmfyD76Rvyf
2HBT4yo3u6WzxuXzbXf2eCafnx7mN7LN3i91OZby4b1DW3WpOo6O4ZyWzk07
H5pf2w+n3BNp57xgxPT9d17sq4JX58P5b8SAhfGu77H872tHA3PpxPetcIVx
6RDu0X7LjEsHcrXY2viW9lt2XDqNfAuCWRgb9rfttzhx+OSdlW/BC4PZM3H2
SDqdmMu1dPlxva+zvWhcdcofjev94Sh4Mb4azOVJl4vtu/AoGN8ul0/85YNh
Oxfsu/eZl6fN4pmr8KdcF13z9eN6J+mbbJ/443EdK+8k7ecwrv1ecemyaS3C
dsHDjscz2HEwi4Pht/2kccVwva6cZ9kS7cbgpSvGfmHwMEt843rnaXul8Uz+
iuMZn5i0B9+Qbba11323MP62vcq48rcY1/rl1i5fzf8/nsln09xbo6Wrx/Yt
dbVg5LO9a12vpeuOS3/vly3vqePSALw49kVJV4/fN9A1EnPHVmadcWnirdnS
tRKnyzZbOXjvYNcO5lfRElw7th+8+vvEFAMWxrtfYw1jEuOWddJm9b6ipUe2
3zPb7+S2/bRx6d3tFFsbz6O30+zz41s/mKfHhhXPsfDemE/eBfkG+vRgfG9d
L/sl3oaJ6X3pM8bVnz+ipYe338bJ32hc75M3yrZ6l/T7xzUOUG6TlPU9dKNg
+OR5r3hEMKdMVd4G2VccWvv9gpbuMK4xqvEpfu1m48rfdFy2d4neLW85Lv7p
q1r6yvbbPNvSz8+qcfFzxjW+htki59iWsWGlS7Yb5jUtfXX7Pav9jmu/bca1
TuWzW7rVuN49wti2ri6uFOw2c8LZGpdPua3HxYvZKnh+7zG3id96ezDWwvO/
27cVZtX7A202lt8sfvtuHL7duMbv3g2wf533A47VR+LbPhhjfTasdwzeNYht
bLtDjq0ybOM7dW6bY2XMhyPt/Zj3aNYbNi42LrdGsjG1saHxP6w+Ovz6GXfD
GINLd44tf8dgnPdiTsbsMGJflGve9Sj/+anXOME4Yq+MZ4179Q3pmbONbXdt
6W7jeh+Gl/2iZp/W2n/ouOzTZ9XYx1jIOAdWmW2C3TX4M5PH7zuEMayxoTJL
tLra82urRTVuNb4zdjSGNC71g6c9aKwGs8rcSvcMXv7uiWn8JuaaGT/CKKdP
9YLsl/yXBHNISw8e1/tAx8P4yhjMuxm2cRaO+f45n11n++Zaozuxb67BSRlr
ReH775dryrm2X85Da0HtnZjO3wNyzqv7oGZfOKvWM9CX1gd2Xr801wte5AG5
XvSzYayPIH1Z8Dhl8K6JE1t6wrji6lfDKDf5j/UtT8y++x9dN8fm2vHfHZr/
6+DYMPbdvca9aee2/4e1dKepup+xT52qa999YfPgDo//sNinBH9E7N+038ub
ff9UlXHPee2sume/IsfNPcz2k+J/eexNg5G/Q9s+yrU6q/KPTNmjEtM9SnpU
4nuHdkj+91emzTD295Dsu/uQe9fC9h8dHdv/dVKOlf+F7zXxPzv2pNzRKeuY
HjOudTaVfe24tu+cXRjrtot3XGIeE4xv8cfnf3T8pbZfP6vODfit8x+fEL/0
xODd9+Hd63zff23iHxzMQdmPk9Ke/weL+E15
         "]]],
       Lighting->{{"Ambient", 
          RGBColor[0.30100577, 0.22414668499999998`, 0.090484535]}, {
         "Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{0, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 2, 2}]}, {"Directional", 
          RGBColor[0.2642166, 0.18331229999999998`, 0.04261530000000001], 
          ImageScaled[{2, 0, 2}]}}]}, {}, {}, {}, {}}, 
    {GrayLevel[0], Line3DBox[CompressedData["
1:eJwl1ElsTlEYBuCPKqpaU2ueamgpimLDBgkSIYSNITFF2RgSNhoxJWYbNY+t
qeZ5KKqmsjBEwsKU6EJZsCGChSk8NxbPf77377n33Pud8zdn1sIJC+pERKqP
VU0jkvp5k4gvaRED1EXs5CG/6GPCdEq4x3fy6kZMZhM3+UxOSsRE1rCwUcS4
ZhFX1eNbRBTLk+SPyRx5jdyuXsRYVlDku7u+W2/OBXmR3DQ94r38Tl4qj5BH
N4/ITnWNPFUepS7mFDU0qR8xjMWU85K0BhFDmE8Zz0hpGDGIuezmMX/oqwcz
Oe/er621Vb1Mj540jtim3s4OdrKL3exhL/vYTyllHOAghzjMEco5yjGOc4KT
XLJejfVOqdd6tyvyW/m0vE6ukM+oz3IueT4ucDG5lstcoYKrXOM6ldygipvc
4jZ3uEs195L57l9rvfvqld73qffdop5BAb/15hG7mMNA6vJUL0uZx2Aa8kLP
j7CIoWTyxt6cZAkjmWK9EmcuS93VesPlDXKtvW4vZyTPY+/Py/meZblxDG35
4AxVsJoJdOaT81fFRiaRyzfntJrNTKM3P53nB+xgNn+T/lqvUF1ovGPd/up+
9KUgOf/0phf59KQHeeTSnW50pQs5dKYTHelAe9rxx3pdvGdb9SvjL7mTsY38
wvhDXu05WstVnqWVsSXZZOEohG2KZ3qiPVGTEfHVNS6JSvPdIm77yDT6U5gW
vg4/rTAtbFnYoqif/P7RztC+0K64nv7//8E/kWKEsA==
      "]]}},
   VertexNormals->CompressedData["
1:eJztXQd0VcXWRkC6VKkCIihNilhQUBwLHRV4UqRJky5ditJBQHpROo8OAaR3
kDAEQgsmBEioIYWQXi69CfjzvDPncvd5H3Pm5lzLen9W1pp1dib7zJmyZ/f9
Uofe/+qUPl26dAMKpEuXIZ3xM9K9vcr+6fAL15b84LvfwSXc+cztxm/8XYW/
zK4st7NfdfV3Pm/Ufi/Cg8ajC1fgN80nwlN26XcPJ0x39e/T48HqTNkPsfMp
/NAri5ON/s7nMAnnFF5046m6XbO78DufT0A86L2684nGg/Do9teFe3s/2wVv
nDJ82tr1rnFm6/h740JFDmjj+fXdEZ0XLYk18Ihnr5/Tvwou9qHxvZ7SB7RP
7KI/3oZ7SH8snwtdPIL+GHBJfxB+RH/KVTr67hdnXfAmkzJ1zPftbglnFI7w
o/EsP71yd2K7J+ADG7dvWuQYxDO759f5/t0q1fh7rnp1O+SrEWLbOs7qkPPj
mEDXeJY2vzq9Rq29f7v9ZhddvRjao0THG651nHChbboZndcp8cj9Lvd5ntfC
q7ywKNZov5417KOXyy5S4pHfQccv6Z9VuNXvzZc54ODuH5NFG8ad7Tr4XRK+
L8s5nu6BgzvbxeT/kw08WV4cetUv8wnubB3iebGBZ3i+cskxdx28SYcX6s5r
tFL5XeK9TL4X9Uff9d7MvG3uzo/l7u0q2B/R80KFzo58cWIsd293wH0o8DI6
P0MDFn0TNDiWi5Y16jh8QdfbvhI/aXewE8HPHV7z41beqP+ZqBsnHFw8s6Z/
/MRw9zaUVVv4W7PpqUnc2V4U7XHW+f6jS8NeTWVRdX/f1rd4KNtV6feCx0uu
NuZT0iFJf0L6tblVtsdJfuOHjuvHD0kVz35sbuy1oPA413mp+l3PPe2XbYXr
8voPF7Z+8CCFDXo2btDIh6dFe9DoL+guo/ye5EcoHyL5CdlGHxtQpVPqFR6x
/sz4g6Xj+aUXM2+9fmCN0V/QS07pJDp3uUs9n7o12sF3fP3czUEfbSd8ajKj
/KGkxxQ/nc+PbqQffDwglA/JmfHQ2dsp4nm7cv/Le4PcF66/K+4LBPc2f2UX
32IXnf+78eEKfs9Ef7w9n2g/oP2G+Hxxbo3+8vwi/grxRbryIJLjdNcdya26
84zgjfJnHXTklms83wyq3vbrGWv+sn2I4EhO18Uj6amEU7pqFY/gG1z8NuEf
0vq9dtFDySdJOOVb0joe3XHaTD8tj0eXXunK0Qg/oleSz5BwSU8QHdOdZ8ln
SLhKLqN6Efmsi8fbcG/TQ7vgdsnF6P7SxeNtemUznUkzfdDV/3h7PLp8jgLu
NfqJ9hvaz4hfUsBN51dXjkD8Vdy29aUuprjeWzr7waCOmTd7na9AcERX7cJv
F9wuPZuK7sl7ld6nFO7pPkf6HIof6UNU+Kmc7v7/Zv2Vrn4srfhb3F5Yrp1v
FB/Xt8f7uRcmcufzUqM/1Zup1oWOE+nZ0HoFDV7bPku1EP7W9hEzJzdN5c7n
FZA+I/xofiSc6kOqDut+J3JiGHe2yfzE6msrPsi8lZ1avvLtinVjSXuYjYiv
OTGoSDR36s0TmNSf12u6Yl+XAynsDvstKLDxGfHsq9znVE9S9Ejfx79hok3m
znYvm5nca2CtrgdZzw++iewzwSGeXforSRclPQyr1vRs5ksxrPHZeiPK/ytO
tD5Gf6S/QnohCmcVcvTxLXGBO9tE0V4w+ks6QemDtD9QuwPVO5H5YZR/k3Sd
0mG67hWrXnNMqRLDfit9pfZ7t+LYnCwBN+cO/TcdD1fZQYh+kkn9JOr/V8Ft
tutZliO8Dff2eOziu+x6L+KvFH4LJj4KyWXIbr7xePpercJd7z30Ylv/FhV3
qu5xE35d/wRvr+8/RR7Utc8i+D9F3/53028juF101a732iWne6iXM/VHeiqF
/tx0HhG/hPRdunonJMfp6mG+v1kjYvId1/h9m9SstY752Lbuf7f7F8GFXdWY
f2pXtYpHpb9C/DzFg+zmsh+SXxT2feO9fxYdsOo/gOz7KvwKPw3lPKP+yB9A
Fz+S73S/VzUeKjcJeY9TuW9WoYdZ9p++LOSTBKP/NyfeTfj5oD+rtPP8pVGv
OLh8RvdvsTem1/L59jInrdFP+inIc1SwRt5+IdMS+Z6yOT55Z3uUaDcL+StR
ymGMyl9Uruzyhx9FEO8i/CnEs9EfyYN0fiScyl/Na9bdVzLsPL/8SZ4CPgVT
uPPZxbcgfwaF34JJvkNyIho/3W+Tvl5Qt1HZaLZ7+ss78k9KYFTvN6tAmcKX
rjnY8MbrCgbn3kDHb8i/j0qEdNty5LEc22NK7V8rb+ei1T7v8pxLuKf6cAS3
WU/+p/M/iu/60+9HXX9Ou75Ll5/X9X9A8pqufzV6ry6fJvRHxt/t9ue0i2/x
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
Vd62tH6vKi5Yb5xp12/r6qkQ3C5+D+FB51T68Uu45JcQ34XoG8qXoDt+WWdO
wlV1MBV2TBPd87Z+9a+C/1P07X83PlP6P0k49YNKK367+Dd0TnXxID8EYS8z
8Et7GcJjl91TnD9yHh2Qv0Lyte65VtgTTfi9rT/3tP6vVbiH/JXX6Mk/hV79
3fjAWQXKFL50zTVvwxuvKxicW1131SpclVfBKh676APiQ3T1NnZ9V+jhyFmR
D+KNvzv9QqMhP4norS5/8vR8VGb+R1deQ+/VtbvZJQ/q0vM/iV79beiAYpxp
nge78Nhlv1bgN9bFU/x28aWijrjr7yROUPO70jxvwj5qzA+1k9L+iM98Or9k
ln8FnTT6SzqJ7gXE/+j6qTbKn3XQkVsuuMyHrPCb+tPP9Z8Uj/O/Rq/g96L8
4TRud9Rzpep1axPHF42ePfzTGTG87Iajq/f6Wa43ger4GHEr0r4u7O2c2tlR
Hgmav13CUX03hMevb9KBd0s7+Cc+yZXLNQ5k6/Mdj4tZn8IOT/mm6fjDIXxf
rvfGNd53xKinLuoUm/BHnPsl5zMOB68yuG+HVkM2sfBL//lJMfwC8vzx4/Kv
+Dxk5PI6jRzc6Z8QQMfD5HhQ3LHMRyzrHks/EFL3ysjvh+qY9P7Sf8W29qd4
vSshzQNfT+V5tvd79sYzh9jBM+Nyd2kZa7RfXBw08qdwF92W9EzSMVV+BknP
JB0j/Y38ySi+5tt1uY/0+TiVryqW/cKtCiGi3cb2lM3xyTvbo3jBGnn7hUxL
5M5nlz8ztcuj/A8ifxPJ54TzOKnir/dlOcfTPXBwZ7uYnOc/v06E9G+y6jdu
FY+neTPoupA6xR7Hj+vG+erCkV+iLh67+KI3/viJNsYzf95/fhK05cEh6yPv
1rzu+q6Xvkx8ZcXS9drjkXRNwil9o/0RX4fkHYWd0YBLPbxd+co81Ktb5tPQ
e+3ybxf0iNCnxdrz8P9wJ9wuftIuOoDgdsXZ2aXHQPYs3fhBn5J5szx73NW/
05QFGzvm0Y8PKlfp6LtfnH3C71fEWev6D6DvmrLnX4EXxrn634h55sao1EPa
dkk0fl29GZLrbaZXpnnTpVe6dk9d+P+avl31vSgvOuUDe7c90Ltk94ssaNj1
qdmOJXPnfnatS+mdIwo/POVgJYKv1Fj86x6XvCDiPKSfoYRTv+6hDSoHzKzu
YHN686WrfzvKna3L/ti7eOvVx/KminqRoQb8QOv5hYrNcwg+3p+9VWnNxUPZ
U3m1jk32HCx+mt2dteajjBdc34Xq0Ui7n7T3FXhUMGn20J0sX9lWX+YIcrCj
/xpQ7VijjSyiQq/3q8UcYMWX7MybbbiDjYiduXppFVd+BsEHMcn/kPxUjNb/
EvPGwbxxOW/5P6kz6s6cEHb/dIYea8uksrX+0WFFJuyE9OSCz8ivSzgi+CsN
ylVu9lMS75N68tqkajvZd81mJWY6HsnLN286qG94Ij9y5Z37SxL82PI613tf
WJPKFzd9/87e3cH80JDCC+7/4sue75fphVyD5rF5OY9GnQpxiGfX95arn6N+
494Olq9N1hL1bxyB9XHk/7njmQfpFcJTemv/UXWaO/iuWwfmL857TLRrmHiW
f2cSjs6FkCsZlSuJPMioPEj1GAW3NzkeupeL1iFaF38l9XC0HhmViyWc+pkT
+chUJwvJj0JeY1Tu0/Vj9xAPyv+gjAuwSz+J7jtUd0wXv7f1ip7m67YK9/Qe
pOuI9Ldo/kUeTO7eroLvRfQBjR/ljdddL/d4HledejQPJP5H/p9t6/VGrqJD
3q6UyJZ8Vbnf2k6X2fkhm9KPWTHO4/1D45hUdXKpHhXp/YQekgs9JJd6SDRO
5GfCBk3M+VJUPFs+a0U7/xbRvO+4OTv7FTusPW925U9AcLTPdfOVITy31w8q
Ped3F7xQp8IVF333PftxYctci5+AX3kY3+P3TWPgfOrG4wj5yPg7zUNldR50
5xOdUzSfhxp99O7UJ+ZhTOSZoVmbjlX4Z5rpia59UD5TvaiKrlq9B9H5Rfk2
1994feSyYw6Wvmj3zWua+7LmvrUHHp42BvpjyHoeor4Hk3U9SB42U91eq+vV
O9eDfFueWJeGtT/tONVnlDadR/117Ya6+xN9F9pv0i4l4VL/jOKwVH7XVvk0
xM88HW7sHwM+L0P3+JoJDvbv7IEdcyRs4c52NJtV6GGW/acvi3pUCUZc8JAr
yVtGF97Ls42qn3XrQgcXz2zj4eOzxpcI4ZnXbm53/LVU9tPWXMWyndmjTQcU
62KZbzkT799t3RPrtXjN7qCbdUdD+zvS8+vGm+jysaj/jfqDXlj1xPjfnTRz
cMPbo6F+D9F51B+dIzRvKJ5I9/5C5wLNA7rvdPVUaD51/fTQOiL8CA+ie4j+
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
j13r+3/zEVsn
    "]],
  Axes->True,
  AxesLabel->{None, None, None},
  BoxRatios->{1, 1, 0.4},
  DisplayFunction->Identity,
  FaceGridsStyle->Automatic,
  ImageSize->{460., 393.9999999999986},
  Method->{"DefaultBoundaryStyle" -> Directive[
      GrayLevel[0.3]], "RotationControl" -> "Globe"},
  PlotRange->{{-1, 1}, {-1, 1}, {-0.023079991340637207`, 1.0945086479187012`}},
  PlotRangePadding->{
    Scaled[0.02], 
    Scaled[0.02], 
    Scaled[0.02]},
  Ticks->{Automatic, Automatic, Automatic},
  ViewAngle->0.09356636906305114,
  ViewCenter->{{0.5, 0.5, 0.5}, {0.47654957480075033`, 0.5649830380651297}},
  ViewPoint->{-0.013021158740407634`, -3.321528289431168, -0.6459723461061425},
  ViewVertical->{0., 0., 1.}]], "Output",
 CellChangeTimes->{{3.6804509250131807`*^9, 3.6804509297789345`*^9}, 
   3.6804510142546864`*^9, 3.6804510767099495`*^9, 3.6804512176141224`*^9, 
   3.6804514877764874`*^9, {3.6804515233176336`*^9, 3.6804515337227573`*^9}, 
   3.6804515693191414`*^9, 3.680451621840664*^9, 3.680451742628253*^9, {
   3.6804518567635612`*^9, 3.6804518600697737`*^9}, 3.6804519783103304`*^9, 
   3.6804522561498814`*^9, {3.6804523825747976`*^9, 3.6804524066313763`*^9}, 
   3.6804530003436546`*^9, 3.6804533637123585`*^9, 3.6804535530670657`*^9, 
   3.6804537083486648`*^9, 3.6804540244866333`*^9, 3.6804604958769417`*^9}]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Multilayer NN (multiple inputs, multiple output)", "Subsection",
 CellChangeTimes->{{3.680452006764329*^9, 3.680452019068413*^9}, {
  3.6804593697924657`*^9, 3.680459375928551*^9}}],

Cell[CellGroupData[{

Cell["3 inputs to 3 outputs \[LongDash] learning to rotate lists of numbers", \
"Subsubsection",
 CellChangeTimes->{{3.680454139000953*^9, 3.680454144169044*^9}, {
  3.6804543842649713`*^9, 3.680454395504754*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"net", "=", 
  RowBox[{"NetChain", "[", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"DotPlusLayer", "[", 
      RowBox[{"40", ",", 
       RowBox[{"\"\<Input\>\"", "\[Rule]", "3"}]}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"ElementwiseLayer", "[", "LogisticSigmoid", "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"DotPlusLayer", "[", 
      RowBox[{"3", ",", 
       RowBox[{"\"\<Output\>\"", "\[Rule]", "3"}]}], "]"}]}], 
    "\[IndentingNewLine]", "}"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.6804541582812605`*^9, 3.68045420142885*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"3"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Inputs", "Input"}, "Mouse"], 
            "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"40"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "2"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"40"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["3", 
              GrayLevel[0.5]], {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"3"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "3"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"3"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Outputs", "Output"}, "Mouse"], 
            "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {40, 3}], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[1, {40}]]], "Parameters" -> 
             Association["Size" -> 40, "$InputSize" -> 3], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {3}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {40}]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> LogisticSigmoid, "$Dimensions" -> {40}, "$Rank" -> 
               1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {40}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {40}]]], "3" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {3, 40}], "Biases" -> 
               NeuralNetworks`Nullable[
                 NeuralNetworks`TensorT[1, {3}]]], "Parameters" -> 
             Association["Size" -> 3, "$InputSize" -> 40], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {40}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {3}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Layers", "3", "Inputs", "Input"] -> 
           NetPort["Layers", "2", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "3", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`TensorT[1, {3}]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`TensorT[1, {3}]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{278., {48., 56.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.6804541703834467`*^9, 3.6804542026827173`*^9}]
}, Closed]],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetInitialize", "[", "net", "]"}]}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"#", "\[Rule]", 
      RowBox[{"RotateLeft", "[", "#", "]"}]}], "&"}], "/@", 
    RowBox[{"RandomInteger", "[", 
     RowBox[{"10", ",", 
      RowBox[{"{", 
       RowBox[{"10000", ",", "3"}], "}"}]}], "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.680454233245082*^9, 3.680454241545807*^9}, {
  3.680454274529786*^9, 3.6804543056090465`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomSample", "[", 
  RowBox[{"data", ",", "4"}], "]"}]], "Input",
 CellChangeTimes->{{3.6804543076980844`*^9, 3.6804543126094103`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"10", ",", "3", ",", "7"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"3", ",", "7", ",", "10"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "2", ",", "5"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"2", ",", "5", ",", "2"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "2", ",", "3"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "2"}], "}"}]}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "10", ",", "4"}], "}"}], "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"10", ",", "4", ",", "0"}], "}"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.6804543129382563`*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"result", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", "data"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.680454324729129*^9, 3.6804543249133496`*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"3"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Inputs", "Input"}, "Mouse"], 
            "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"40"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "2"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"40"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["3", 
              GrayLevel[0.5]], {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"3"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "3"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"3"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Outputs", "Output"}, "Mouse"], 
            "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {40, 3}], "Biases" -> 
               NeuralNetworks`TensorT[1, {40}]], "Parameters" -> 
             Association["Size" -> 40, "$InputSize" -> 3], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {3}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {40}]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> LogisticSigmoid, "$Dimensions" -> {40}, "$Rank" -> 
               1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {40}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {40}]]], "3" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {3, 40}], "Biases" -> 
               NeuralNetworks`TensorT[1, {3}]], "Parameters" -> 
             Association["Size" -> 3, "$InputSize" -> 40], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {40}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {3}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Layers", "3", "Inputs", "Input"] -> 
           NetPort["Layers", "2", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "3", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`TensorT[1, {3}]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`TensorT[1, {3}]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{278., {48., 56.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.68045434925282*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"result", "[", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2", ",", "5"}], "}"}], "]"}], "//", "Round"}]], "Input",
 CellChangeTimes->{{3.680454353409809*^9, 3.6804543645690327`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "5", ",", "2"}], "}"}]], "Output",
 CellChangeTimes->{{3.6804543588876505`*^9, 3.6804543648316355`*^9}}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"result", "[", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], "]"}], "//", "Round"}]], "Input",
 CellChangeTimes->{{3.6804543712988796`*^9, 3.6804543776970572`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "3", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.6804543779469275`*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"result", "[", 
   RowBox[{"{", 
    RowBox[{"8", ",", "7", ",", "6"}], "}"}], "]"}], "//", "Round"}]], "Input",
 CellChangeTimes->{{3.6804544043331428`*^9, 3.6804544144088974`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7", ",", "6", ",", "8"}], "}"}]], "Output",
 CellChangeTimes->{{3.6804544117531137`*^9, 3.680454414663636*^9}}]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
20 inputs to 20 outputs \[LongDash] learning to rotate lists of numbers\
\>", "Subsubsection",
 CellChangeTimes->{{3.680454139000953*^9, 3.680454144169044*^9}, {
  3.6804543842649713`*^9, 3.680454395504754*^9}, {3.6804544327953434`*^9, 
  3.6804544375364857`*^9}}],

Cell["Set up the neural network:", "Text",
 CellChangeTimes->{{3.6804548432690973`*^9, 3.6804548483170795`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"n", "=", "20"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetChain", "[", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"DotPlusLayer", "[", 
       RowBox[{
        RowBox[{"4", "*", "n"}], ",", 
        RowBox[{"\"\<Input\>\"", "\[Rule]", "n"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"ElementwiseLayer", "[", "LogisticSigmoid", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"DotPlusLayer", "[", 
       RowBox[{"4", "*", "n"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"ElementwiseLayer", "[", "LogisticSigmoid", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"DotPlusLayer", "[", 
       RowBox[{"n", ",", 
        RowBox[{"\"\<Output\>\"", "\[Rule]", "n"}]}], "]"}]}], 
     "\[IndentingNewLine]", "}"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.6804541582812605`*^9, 3.68045420142885*^9}, {
   3.6804544415848*^9, 3.680454465376244*^9}, {3.6804547591910453`*^9, 
   3.680454768302906*^9}, 3.6804549292063828`*^9}],

Cell["Initialize the network with random values:", "Text",
 CellChangeTimes->{{3.680454851413555*^9, 3.680454862180895*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetInitialize", "[", "net", "]"}]}], ";"}]], "Input"],

Cell["\<\
Set up the training data (here, generate lists of integers and rotate them by \
one element to the left):\
\>", "Text",
 CellChangeTimes->{{3.6804548679410973`*^9, 3.680454907757072*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"#", "\[Rule]", 
      RowBox[{"RotateLeft", "[", "#", "]"}]}], "&"}], "/@", 
    RowBox[{"RandomInteger", "[", 
     RowBox[{"10", ",", 
      RowBox[{"{", 
       RowBox[{"10000", ",", "20"}], "}"}]}], "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.680454233245082*^9, 3.680454241545807*^9}, {
   3.680454274529786*^9, 3.6804543056090465`*^9}, {3.680454478256551*^9, 
   3.680454478345045*^9}, 3.680454525106681*^9}],

Cell["Train the neural network with the training data", "Text",
 CellChangeTimes->{{3.680454911941069*^9, 3.680454921612706*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"result", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", "data", ",", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "300"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.680454324729129*^9, 3.6804543249133496`*^9}, {
  3.6804547778625517`*^9, 3.6804547834660444`*^9}, {3.680454923941337*^9, 
  3.6804549241650867`*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"20"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Inputs", "Input"}, "Mouse"], 
            "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"80"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "2"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"80"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["3", 
              GrayLevel[0.5]], {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"80"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "3"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["4", 
              GrayLevel[0.5]], {"Layers", "4"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "4"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"80"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "4"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["5", 
              GrayLevel[0.5]], {"Layers", "5"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "5"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"20"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "5"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"20"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Outputs", "Output"}, "Mouse"], 
            "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {80, 20}], "Biases" -> 
               NeuralNetworks`TensorT[1, {80}]], "Parameters" -> 
             Association["Size" -> 80, "$InputSize" -> 20], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {20}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {80}]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> LogisticSigmoid, "$Dimensions" -> {80}, "$Rank" -> 
               1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {80}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {80}]]], "3" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {80, 80}], "Biases" -> 
               NeuralNetworks`TensorT[1, {80}]], "Parameters" -> 
             Association["Size" -> 80, "$InputSize" -> 80], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {80}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {80}]]], "4" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> LogisticSigmoid, "$Dimensions" -> {80}, "$Rank" -> 
               1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {80}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {80}]]], "5" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {20, 80}], "Biases" -> 
               NeuralNetworks`TensorT[1, {20}]], "Parameters" -> 
             Association["Size" -> 20, "$InputSize" -> 80], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {80}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {20}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Layers", "3", "Inputs", "Input"] -> 
           NetPort["Layers", "2", "Outputs", "Output"], 
           NetPort["Layers", "4", "Inputs", "Input"] -> 
           NetPort["Layers", "3", "Outputs", "Output"], 
           NetPort["Layers", "5", "Inputs", "Input"] -> 
           NetPort["Layers", "4", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "5", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`TensorT[1, {20}]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`TensorT[1, {20}]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{278., {70., 78.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.68045434925282*^9, 3.680454511486659*^9, 
  3.680454829052657*^9, 3.6804550406455116`*^9}]
}, Closed]],

Cell["Check the results of the trained neural network:", "Text",
 CellChangeTimes->{{3.6804550225828495`*^9, 3.6804550341398687`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Table", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"rr", "=", 
      RowBox[{"RandomInteger", "[", 
       RowBox[{"10", ",", "20"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"RotateLeft", "[", "rr", "]"}], ",", 
       RowBox[{"Round", "[", 
        RowBox[{"result", "[", "rr", "]"}], "]"}], ",", 
       RowBox[{"SameQ", "[", 
        RowBox[{
         RowBox[{"RotateLeft", "[", "rr", "]"}], ",", 
         RowBox[{"Round", "@", 
          RowBox[{"result", "[", "rr", "]"}]}]}], "]"}]}], "}"}]}], 
    "\[IndentingNewLine]", ",", "10"}], "]"}], "//", 
  RowBox[{
   RowBox[{"Grid", "[", 
    RowBox[{"#", ",", 
     RowBox[{"Alignment", "\[Rule]", "Left"}]}], "]"}], "&"}]}]], "Input",
 CellChangeTimes->{{3.6804545333277135`*^9, 3.6804545372560644`*^9}, {
  3.6804546233116603`*^9, 3.6804546855836506`*^9}, {3.680455055741338*^9, 
  3.6804550608837576`*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{"{", 
      RowBox[{
      "3", ",", "9", ",", "9", ",", "3", ",", "1", ",", "3", ",", "4", ",", 
       "7", ",", "8", ",", "8", ",", "7", ",", "9", ",", "8", ",", "9", ",", 
       "8", ",", "7", ",", "0", ",", "3", ",", "2", ",", "4"}], "}"}], 
     RowBox[{"{", 
      RowBox[{
      "3", ",", "9", ",", "9", ",", "3", ",", "1", ",", "3", ",", "4", ",", 
       "7", ",", "8", ",", "8", ",", "7", ",", "9", ",", "8", ",", "9", ",", 
       "8", ",", "7", ",", "0", ",", "3", ",", "2", ",", "4"}], "}"}], "True"},
    {
     RowBox[{"{", 
      RowBox[{
      "5", ",", "0", ",", "7", ",", "7", ",", "7", ",", "10", ",", "9", ",", 
       "9", ",", "10", ",", "6", ",", "8", ",", "5", ",", "5", ",", "3", ",", 
       "3", ",", "3", ",", "3", ",", "9", ",", "0", ",", "3"}], "}"}], 
     RowBox[{"{", 
      RowBox[{
      "5", ",", "0", ",", "7", ",", "7", ",", "7", ",", "10", ",", "9", ",", 
       "9", ",", "10", ",", "6", ",", "8", ",", "5", ",", "5", ",", "3", ",", 
       "3", ",", "3", ",", "3", ",", "9", ",", "0", ",", "3"}], "}"}], "True"},
    {
     RowBox[{"{", 
      RowBox[{
      "5", ",", "1", ",", "4", ",", "1", ",", "3", ",", "2", ",", "0", ",", 
       "7", ",", "3", ",", "6", ",", "4", ",", "6", ",", "9", ",", "7", ",", 
       "8", ",", "0", ",", "1", ",", "0", ",", "1", ",", "10"}], "}"}], 
     RowBox[{"{", 
      RowBox[{
      "5", ",", "1", ",", "4", ",", "1", ",", "3", ",", "2", ",", "0", ",", 
       "7", ",", "3", ",", "6", ",", "4", ",", "6", ",", "9", ",", "7", ",", 
       "8", ",", "0", ",", "1", ",", "0", ",", "1", ",", "10"}], "}"}], 
     "True"},
    {
     RowBox[{"{", 
      RowBox[{
      "1", ",", "4", ",", "9", ",", "8", ",", "0", ",", "2", ",", "9", ",", 
       "10", ",", "3", ",", "0", ",", "5", ",", "0", ",", "6", ",", "8", ",", 
       "1", ",", "10", ",", "3", ",", "4", ",", "10", ",", "10"}], "}"}], 
     RowBox[{"{", 
      RowBox[{
      "1", ",", "4", ",", "9", ",", "8", ",", "0", ",", "2", ",", "9", ",", 
       "10", ",", "3", ",", "0", ",", "5", ",", "0", ",", "6", ",", "8", ",", 
       "1", ",", "10", ",", "3", ",", "4", ",", "10", ",", "10"}], "}"}], 
     "True"},
    {
     RowBox[{"{", 
      RowBox[{
      "10", ",", "2", ",", "2", ",", "7", ",", "9", ",", "6", ",", "6", ",", 
       "9", ",", "0", ",", "2", ",", "2", ",", "0", ",", "2", ",", "8", ",", 
       "0", ",", "10", ",", "4", ",", "10", ",", "8", ",", "6"}], "}"}], 
     RowBox[{"{", 
      RowBox[{
      "10", ",", "2", ",", "2", ",", "7", ",", "9", ",", "6", ",", "6", ",", 
       "9", ",", "0", ",", "2", ",", "2", ",", "0", ",", "2", ",", "8", ",", 
       "0", ",", "10", ",", "4", ",", "10", ",", "8", ",", "6"}], "}"}], 
     "True"},
    {
     RowBox[{"{", 
      RowBox[{
      "2", ",", "0", ",", "2", ",", "1", ",", "8", ",", "0", ",", "7", ",", 
       "0", ",", "5", ",", "7", ",", "1", ",", "1", ",", "7", ",", "6", ",", 
       "7", ",", "7", ",", "7", ",", "3", ",", "8", ",", "6"}], "}"}], 
     RowBox[{"{", 
      RowBox[{
      "2", ",", "0", ",", "2", ",", "1", ",", "8", ",", "0", ",", "7", ",", 
       "0", ",", "5", ",", "7", ",", "1", ",", "1", ",", "7", ",", "6", ",", 
       "7", ",", "7", ",", "7", ",", "3", ",", "8", ",", "6"}], "}"}], "True"},
    {
     RowBox[{"{", 
      RowBox[{
      "7", ",", "4", ",", "10", ",", "3", ",", "4", ",", "0", ",", "1", ",", 
       "4", ",", "10", ",", "0", ",", "7", ",", "5", ",", "9", ",", "5", ",", 
       "10", ",", "3", ",", "7", ",", "1", ",", "0", ",", "10"}], "}"}], 
     RowBox[{"{", 
      RowBox[{
      "7", ",", "4", ",", "10", ",", "3", ",", "4", ",", "0", ",", "1", ",", 
       "4", ",", "10", ",", "0", ",", "7", ",", "5", ",", "9", ",", "5", ",", 
       "10", ",", "3", ",", "7", ",", "1", ",", "0", ",", "10"}], "}"}], 
     "True"},
    {
     RowBox[{"{", 
      RowBox[{
      "7", ",", "8", ",", "5", ",", "0", ",", "7", ",", "10", ",", "7", ",", 
       "5", ",", "1", ",", "1", ",", "8", ",", "7", ",", "1", ",", "10", ",", 
       "5", ",", "4", ",", "4", ",", "2", ",", "6", ",", "5"}], "}"}], 
     RowBox[{"{", 
      RowBox[{
      "7", ",", "8", ",", "5", ",", "0", ",", "7", ",", "10", ",", "7", ",", 
       "5", ",", "1", ",", "1", ",", "8", ",", "7", ",", "1", ",", "10", ",", 
       "5", ",", "4", ",", "4", ",", "2", ",", "6", ",", "5"}], "}"}], "True"},
    {
     RowBox[{"{", 
      RowBox[{
      "4", ",", "2", ",", "9", ",", "1", ",", "10", ",", "5", ",", "10", ",", 
       "5", ",", "6", ",", "7", ",", "3", ",", "6", ",", "1", ",", "3", ",", 
       "10", ",", "1", ",", "7", ",", "9", ",", "4", ",", "4"}], "}"}], 
     RowBox[{"{", 
      RowBox[{
      "4", ",", "2", ",", "9", ",", "1", ",", "10", ",", "5", ",", "10", ",", 
       "5", ",", "6", ",", "7", ",", "3", ",", "6", ",", "1", ",", "3", ",", 
       "10", ",", "1", ",", "7", ",", "9", ",", "4", ",", "4"}], "}"}], 
     "True"},
    {
     RowBox[{"{", 
      RowBox[{
      "3", ",", "0", ",", "2", ",", "2", ",", "1", ",", "4", ",", "9", ",", 
       "4", ",", "3", ",", "10", ",", "5", ",", "9", ",", "3", ",", "6", ",", 
       "6", ",", "5", ",", "1", ",", "4", ",", "3", ",", "3"}], "}"}], 
     RowBox[{"{", 
      RowBox[{
      "3", ",", "0", ",", "2", ",", "2", ",", "1", ",", "4", ",", "9", ",", 
       "4", ",", "3", ",", "10", ",", "5", ",", "9", ",", "3", ",", "6", ",", 
       "6", ",", "5", ",", "1", ",", "4", ",", "3", ",", "3"}], "}"}], "True"}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{{3.68045466903609*^9, 3.6804546858058634`*^9}, 
   3.6804548330830956`*^9, {3.6804550510222173`*^9, 3.6804550611341867`*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
10 inputs to 10 outputs \[LongDash] learning to rotate lists of numbers\
\>", "Subsubsection",
 CellChangeTimes->{{3.680454139000953*^9, 3.680454144169044*^9}, {
  3.6804543842649713`*^9, 3.680454395504754*^9}, {3.6804544327953434`*^9, 
  3.6804544375364857`*^9}, {3.68045509369956*^9, 3.680455097203562*^9}}],

Cell["Set up the neural network:", "Text",
 CellChangeTimes->{{3.6804548432690973`*^9, 3.6804548483170795`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"n", "=", "10"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetChain", "[", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"DotPlusLayer", "[", 
       RowBox[{
        RowBox[{"4", "*", "n"}], ",", 
        RowBox[{"\"\<Input\>\"", "\[Rule]", "n"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"ElementwiseLayer", "[", "LogisticSigmoid", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"DotPlusLayer", "[", 
       RowBox[{"4", "*", "n"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"ElementwiseLayer", "[", "LogisticSigmoid", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"DotPlusLayer", "[", 
       RowBox[{"n", ",", 
        RowBox[{"\"\<Output\>\"", "\[Rule]", "n"}]}], "]"}]}], 
     "\[IndentingNewLine]", "}"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.6804541582812605`*^9, 3.68045420142885*^9}, {
   3.6804544415848*^9, 3.680454465376244*^9}, {3.6804547591910453`*^9, 
   3.680454768302906*^9}, 3.6804549292063828`*^9, {3.680455102956032*^9, 
   3.680455103723683*^9}}],

Cell["Initialize the network with random values:", "Text",
 CellChangeTimes->{{3.680454851413555*^9, 3.680454862180895*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetInitialize", "[", "net", "]"}]}], ";"}]], "Input"],

Cell["\<\
Set up the training data (here, generate lists of integers and rotate them by \
one element to the left):\
\>", "Text",
 CellChangeTimes->{{3.6804548679410973`*^9, 3.680454907757072*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"#", "\[Rule]", 
      RowBox[{"RotateLeft", "[", 
       RowBox[{"#", ",", "6"}], "]"}]}], "&"}], "/@", 
    RowBox[{"RandomInteger", "[", 
     RowBox[{"10", ",", 
      RowBox[{"{", 
       RowBox[{"10000", ",", "n"}], "}"}]}], "]"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.680454233245082*^9, 3.680454241545807*^9}, {
   3.680454274529786*^9, 3.6804543056090465`*^9}, {3.680454478256551*^9, 
   3.680454478345045*^9}, 3.680454525106681*^9, {3.6804551663720303`*^9, 
   3.6804551803555665`*^9}}],

Cell["Train the neural network with the training data", "Text",
 CellChangeTimes->{{3.680454911941069*^9, 3.680454921612706*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"result", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", "data", ",", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "300"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.680454324729129*^9, 3.6804543249133496`*^9}, {
  3.6804547778625517`*^9, 3.6804547834660444`*^9}, {3.680454923941337*^9, 
  3.6804549241650867`*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Inputs", "Input"}, "Mouse"], 
            "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"40"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "2"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"40"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["3", 
              GrayLevel[0.5]], {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"40"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "3"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["4", 
              GrayLevel[0.5]], {"Layers", "4"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "4"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"40"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "4"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["5", 
              GrayLevel[0.5]], {"Layers", "5"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "5"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "5"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"10"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Outputs", "Output"}, "Mouse"], 
            "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {40, 10}], "Biases" -> 
               NeuralNetworks`TensorT[1, {40}]], "Parameters" -> 
             Association["Size" -> 40, "$InputSize" -> 10], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {10}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {40}]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> LogisticSigmoid, "$Dimensions" -> {40}, "$Rank" -> 
               1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {40}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {40}]]], "3" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {40, 40}], "Biases" -> 
               NeuralNetworks`TensorT[1, {40}]], "Parameters" -> 
             Association["Size" -> 40, "$InputSize" -> 40], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {40}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {40}]]], "4" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> LogisticSigmoid, "$Dimensions" -> {40}, "$Rank" -> 
               1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {40}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {40}]]], "5" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {10, 40}], "Biases" -> 
               NeuralNetworks`TensorT[1, {10}]], "Parameters" -> 
             Association["Size" -> 10, "$InputSize" -> 40], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {40}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {10}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Layers", "3", "Inputs", "Input"] -> 
           NetPort["Layers", "2", "Outputs", "Output"], 
           NetPort["Layers", "4", "Inputs", "Input"] -> 
           NetPort["Layers", "3", "Outputs", "Output"], 
           NetPort["Layers", "5", "Inputs", "Input"] -> 
           NetPort["Layers", "4", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "5", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`TensorT[1, {10}]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`TensorT[1, {10}]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{278., {70., 78.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.68045434925282*^9, 3.680454511486659*^9, 
  3.680454829052657*^9, 3.6804550406455116`*^9, 3.68045517596905*^9, 
  3.6804552901447725`*^9}]
}, Closed]],

Cell["Check the results of the trained neural network:", "Text",
 CellChangeTimes->{{3.6804550225828495`*^9, 3.6804550341398687`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Table", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"rr", "=", 
      RowBox[{"RandomInteger", "[", 
       RowBox[{"10", ",", "n"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"RotateLeft", "[", 
        RowBox[{"rr", ",", "6"}], "]"}], ",", 
       RowBox[{"Round", "[", 
        RowBox[{"result", "[", "rr", "]"}], "]"}], ",", 
       RowBox[{"SameQ", "[", 
        RowBox[{
         RowBox[{"RotateLeft", "[", 
          RowBox[{"rr", ",", "6"}], "]"}], ",", 
         RowBox[{"Round", "@", 
          RowBox[{"result", "[", "rr", "]"}]}]}], "]"}]}], "}"}]}], 
    "\[IndentingNewLine]", ",", "10"}], "]"}], "//", 
  RowBox[{
   RowBox[{"Grid", "[", 
    RowBox[{"#", ",", 
     RowBox[{"Alignment", "\[Rule]", "Left"}]}], "]"}], "&"}]}]], "Input",
 CellChangeTimes->{{3.6804545333277135`*^9, 3.6804545372560644`*^9}, {
  3.6804546233116603`*^9, 3.6804546855836506`*^9}, {3.680455055741338*^9, 
  3.6804550608837576`*^9}, {3.6804552170358753`*^9, 3.680455220643324*^9}, {
  3.68045530054648*^9, 3.6804553040426245`*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{"{", 
      RowBox[{
      "4", ",", "2", ",", "3", ",", "6", ",", "9", ",", "9", ",", "5", ",", 
       "6", ",", "0", ",", "4"}], "}"}], 
     RowBox[{"{", 
      RowBox[{
      "4", ",", "2", ",", "3", ",", "6", ",", "9", ",", "9", ",", "5", ",", 
       "6", ",", "0", ",", "4"}], "}"}], "True"},
    {
     RowBox[{"{", 
      RowBox[{
      "3", ",", "9", ",", "0", ",", "3", ",", "10", ",", "4", ",", "1", ",", 
       "9", ",", "8", ",", "3"}], "}"}], 
     RowBox[{"{", 
      RowBox[{
      "3", ",", "9", ",", "0", ",", "3", ",", "10", ",", "4", ",", "1", ",", 
       "9", ",", "8", ",", "3"}], "}"}], "True"},
    {
     RowBox[{"{", 
      RowBox[{
      "2", ",", "4", ",", "1", ",", "2", ",", "8", ",", "1", ",", "0", ",", 
       "7", ",", "4", ",", "1"}], "}"}], 
     RowBox[{"{", 
      RowBox[{
      "2", ",", "4", ",", "1", ",", "2", ",", "8", ",", "1", ",", "0", ",", 
       "7", ",", "4", ",", "1"}], "}"}], "True"},
    {
     RowBox[{"{", 
      RowBox[{
      "8", ",", "3", ",", "2", ",", "5", ",", "10", ",", "6", ",", "7", ",", 
       "5", ",", "10", ",", "7"}], "}"}], 
     RowBox[{"{", 
      RowBox[{
      "8", ",", "3", ",", "2", ",", "5", ",", "10", ",", "6", ",", "7", ",", 
       "5", ",", "10", ",", "7"}], "}"}], "True"},
    {
     RowBox[{"{", 
      RowBox[{
      "5", ",", "2", ",", "5", ",", "6", ",", "1", ",", "4", ",", "3", ",", 
       "8", ",", "9", ",", "9"}], "}"}], 
     RowBox[{"{", 
      RowBox[{
      "5", ",", "2", ",", "5", ",", "6", ",", "1", ",", "4", ",", "3", ",", 
       "8", ",", "9", ",", "9"}], "}"}], "True"},
    {
     RowBox[{"{", 
      RowBox[{
      "7", ",", "6", ",", "1", ",", "5", ",", "5", ",", "10", ",", "5", ",", 
       "4", ",", "2", ",", "9"}], "}"}], 
     RowBox[{"{", 
      RowBox[{
      "7", ",", "6", ",", "1", ",", "5", ",", "5", ",", "10", ",", "5", ",", 
       "4", ",", "2", ",", "9"}], "}"}], "True"},
    {
     RowBox[{"{", 
      RowBox[{
      "7", ",", "8", ",", "10", ",", "4", ",", "8", ",", "1", ",", "9", ",", 
       "3", ",", "7", ",", "7"}], "}"}], 
     RowBox[{"{", 
      RowBox[{
      "7", ",", "8", ",", "10", ",", "4", ",", "8", ",", "1", ",", "9", ",", 
       "3", ",", "7", ",", "7"}], "}"}], "True"},
    {
     RowBox[{"{", 
      RowBox[{
      "10", ",", "7", ",", "9", ",", "2", ",", "4", ",", "5", ",", "3", ",", 
       "8", ",", "9", ",", "7"}], "}"}], 
     RowBox[{"{", 
      RowBox[{
      "10", ",", "7", ",", "9", ",", "2", ",", "4", ",", "5", ",", "3", ",", 
       "8", ",", "9", ",", "7"}], "}"}], "True"},
    {
     RowBox[{"{", 
      RowBox[{
      "3", ",", "3", ",", "1", ",", "5", ",", "7", ",", "7", ",", "6", ",", 
       "2", ",", "10", ",", "6"}], "}"}], 
     RowBox[{"{", 
      RowBox[{
      "3", ",", "3", ",", "1", ",", "5", ",", "7", ",", "7", ",", "6", ",", 
       "2", ",", "10", ",", "6"}], "}"}], "True"},
    {
     RowBox[{"{", 
      RowBox[{
      "3", ",", "2", ",", "7", ",", "5", ",", "0", ",", "0", ",", "0", ",", 
       "9", ",", "4", ",", "9"}], "}"}], 
     RowBox[{"{", 
      RowBox[{
      "3", ",", "2", ",", "7", ",", "5", ",", "0", ",", "0", ",", "0", ",", 
       "9", ",", "4", ",", "9"}], "}"}], "True"}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{{3.68045466903609*^9, 3.6804546858058634`*^9}, 
   3.6804548330830956`*^9, {3.6804550510222173`*^9, 3.6804550611341867`*^9}, {
   3.6804552931431785`*^9, 3.6804553043059683`*^9}}]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["Going from 5 variables to 3", "Subsubsection",
 CellChangeTimes->{{3.6804552567623463`*^9, 3.680455267713852*^9}}],

Cell["\<\
Define a nonlinear function from 5 variables (input) to 3 variables  (output):\
\>", "Text",
 CellChangeTimes->{{3.680455770533579*^9, 3.6804557948778796`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"f", "[", 
   RowBox[{"v_List", "/;", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"Length", "[", "v", "]"}], "===", "5"}], ")"}]}], "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{"v", "[", 
      RowBox[{"[", "1", "]"}], "]"}], "+", 
     RowBox[{
      RowBox[{"v", "[", 
       RowBox[{"[", "2", "]"}], "]"}], "^", "2"}]}], ",", 
    RowBox[{
     RowBox[{
      RowBox[{"v", "[", 
       RowBox[{"[", "3", "]"}], "]"}], "^", "2"}], "+", 
     RowBox[{"v", "[", 
      RowBox[{"[", "5", "]"}], "]"}]}], ",", 
    RowBox[{
     RowBox[{"v", "[", 
      RowBox[{"[", "4", "]"}], "]"}], "^", "2"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.6804552712108574`*^9, 3.68045528130764*^9}, {
   3.680455312138669*^9, 3.680455327579962*^9}, {3.6804555202922916`*^9, 
   3.6804555530359926`*^9}, 3.680455631516714*^9}],

Cell["Examples:", "Text",
 CellChangeTimes->{{3.6804558000538373`*^9, 3.680455803518223*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.68045532913593*^9, 3.6804553313785963`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"5", ",", "14", ",", "16"}], "}"}]], "Output",
 CellChangeTimes->{3.680455331797594*^9, 3.6804555552389145`*^9, 
  3.6804556328514304`*^9, 3.6804558086832876`*^9, 3.680460583762186*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{"{", 
   RowBox[{"6", ",", "4", ",", "3", ",", "56", ",", "3"}], "}"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.680455333089142*^9, 3.680455339594293*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"22", ",", "12", ",", "3136"}], "}"}]], "Output",
 CellChangeTimes->{3.6804553402386045`*^9, 3.6804555567109985`*^9, 
  3.680455633538477*^9}]
}, Closed]],

Cell["\<\
Define a neural network that, hopefully, will train to the given function:\
\>", "Text",
 CellChangeTimes->{{3.680455810613913*^9, 3.6804558332944727`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetChain", "[", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"DotPlusLayer", "[", 
       RowBox[{"75", ",", 
        RowBox[{"\"\<Input\>\"", "\[Rule]", "5"}]}], "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"ElementwiseLayer", "[", "LogisticSigmoid", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"DotPlusLayer", "[", "75", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"ElementwiseLayer", "[", "Tanh", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"DotPlusLayer", "[", 
       RowBox[{"3", ",", 
        RowBox[{"\"\<Output\>\"", "\[Rule]", "3"}]}], "]"}]}], 
     "\[IndentingNewLine]", "}"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.6804553540905514`*^9, 3.680455364257825*^9}, {
  3.6804561476262684`*^9, 3.6804561694668093`*^9}}],

Cell["Initialize the neural network with random variables:", "Text",
 CellChangeTimes->{{3.680455837286254*^9, 3.680455849662637*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"net", "=", 
   RowBox[{"NetInitialize", "[", "net", "]"}]}], ";"}]], "Input"],

Cell["Generate a test data set to sample from (to learn from):", "Text",
 CellChangeTimes->{{3.680455854422719*^9, 3.6804558684225445`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"x", "\[Rule]", 
      RowBox[{"f", "[", "x", "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"RandomInteger", "[", 
        RowBox[{"10", ",", 
         RowBox[{"{", 
          RowBox[{"10000", ",", "5"}], "}"}]}], "]"}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.68045538428957*^9, 3.6804554119621983`*^9}, {
  3.680455569412485*^9, 3.6804555715313635`*^9}}],

Cell["Some sample data values:", "Text",
 CellChangeTimes->{{3.680455872558636*^9, 3.6804558769506435`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomSample", "[", 
   RowBox[{"data", ",", "10"}], "]"}], "//", "Column"}]], "Input",
 CellChangeTimes->{{3.680455575930852*^9, 3.680455582771503*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"9", ",", "5", ",", "4", ",", "1", ",", "10"}], "}"}], 
      "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"34", ",", "26", ",", "1"}], "}"}]}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "0", ",", "9", ",", "1", ",", "10"}], "}"}], 
      "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"1", ",", "91", ",", "1"}], "}"}]}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"9", ",", "10", ",", "1", ",", "2", ",", "6"}], "}"}], 
      "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"109", ",", "7", ",", "4"}], "}"}]}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"5", ",", "5", ",", "4", ",", "1", ",", "4"}], "}"}], 
      "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"30", ",", "20", ",", "1"}], "}"}]}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2", ",", "6", ",", "9", ",", "9", ",", "4"}], "}"}], 
      "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"38", ",", "85", ",", "81"}], "}"}]}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "0", ",", "5", ",", "6", ",", "8"}], "}"}], 
      "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"1", ",", "33", ",", "36"}], "}"}]}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"10", ",", "8", ",", "7", ",", "9", ",", "0"}], "}"}], 
      "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"74", ",", "49", ",", "81"}], "}"}]}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"5", ",", "4", ",", "6", ",", "4", ",", "0"}], "}"}], 
      "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"21", ",", "36", ",", "16"}], "}"}]}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"4", ",", "3", ",", "4", ",", "3", ",", "9"}], "}"}], 
      "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"13", ",", "25", ",", "9"}], "}"}]}]},
    {
     RowBox[{
      RowBox[{"{", 
       RowBox[{"1", ",", "0", ",", "9", ",", "1", ",", "0"}], "}"}], 
      "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"1", ",", "81", ",", "1"}], "}"}]}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",
 CellChangeTimes->{3.6804555830670323`*^9, 3.6804556376080685`*^9, 
  3.6804561759229045`*^9}]
}, Closed]],

Cell["Train the neural network on the given data set:", "Text",
 CellChangeTimes->{{3.6804558835506716`*^9, 3.680455895439172*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"result", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"net", ",", "data", ",", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "300"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.680455438338399*^9, 3.680455438490012*^9}, {
  3.680455697997525*^9, 3.6804557019413114`*^9}}],

Cell[BoxData[
 StyleBox[
  TagBox[
   TagBox[
    RowBox[{"NetChain", 
     RowBox[{"[", 
      PanelBox[
       DynamicModuleBox[{NeuralNetworks`NetChain`PackagePrivate`grid$$ = 
        Grid[{{
           MouseAppearance[
            Annotation["", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Input", {"Inputs", "Input"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"5"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Inputs", "Input"}, "Mouse"], 
            "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["1", 
              GrayLevel[0.5]], {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "1"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"75"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "1"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["2", 
              GrayLevel[0.5]], {"Layers", "2"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "2"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"75"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "2"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["3", 
              GrayLevel[0.5]], {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "3"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"75"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "3"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["4", 
              GrayLevel[0.5]], {"Layers", "4"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[ElementwiseLayer, {"Layers", "4"}, "Mouse"], 
            "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"75"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "4"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation[
             Style["5", 
              GrayLevel[0.5]], {"Layers", "5"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[DotPlusLayer, {"Layers", "5"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"3"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Layers", "5"}, "Mouse"], "LinkHand"]}, {
           MouseAppearance[
            Annotation["", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation["Output", {"Outputs", "Output"}, "Mouse"], "LinkHand"], 
           MouseAppearance[
            Annotation[
             Row[{"vector", " ", 
               Row[{"(", "\[VeryThinSpace]", "size", ":", " ", 
                 Row[{"3"}, "\[Times]"], "\[VeryThinSpace]", ")"}, BaseStyle -> 
                GrayLevel[0.5]]}], {"Outputs", "Output"}, "Mouse"], 
            "LinkHand"]}}, Alignment -> Left, Spacings -> 1.1], 
        NeuralNetworks`NetChain`PackagePrivate`assoc$$ = Association[
        "Type" -> "Chain", "Layers" -> 
         Association[
          "1" -> Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {75, 5}], "Biases" -> 
               NeuralNetworks`TensorT[1, {75}]], "Parameters" -> 
             Association["Size" -> 75, "$InputSize" -> 5], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {5}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {75}]]], "2" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> LogisticSigmoid, "$Dimensions" -> {75}, "$Rank" -> 
               1], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {75}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {75}]]], "3" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {75, 75}], "Biases" -> 
               NeuralNetworks`TensorT[1, {75}]], "Parameters" -> 
             Association["Size" -> 75, "$InputSize" -> 75], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {75}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {75}]]], "4" -> 
           Association[
            "Type" -> "Elementwise", "Arrays" -> Association[], "Parameters" -> 
             Association[
              "Function" -> Tanh, "$Dimensions" -> {75}, "$Rank" -> 1], 
             "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {75}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {75}]]], "5" -> 
           Association[
            "Type" -> "DotPlus", "Arrays" -> 
             Association[
              "Weights" -> NeuralNetworks`TensorT[2, {3, 75}], "Biases" -> 
               NeuralNetworks`TensorT[1, {3}]], "Parameters" -> 
             Association["Size" -> 3, "$InputSize" -> 75], "Inputs" -> 
             Association["Input" -> NeuralNetworks`TensorT[1, {75}]], 
             "Outputs" -> 
             Association["Output" -> NeuralNetworks`TensorT[1, {3}]]]], 
         "Connections" -> {
          NetPort["Layers", "1", "Inputs", "Input"] -> 
           NetPort["Inputs", "Input"], 
           NetPort["Layers", "2", "Inputs", "Input"] -> 
           NetPort["Layers", "1", "Outputs", "Output"], 
           NetPort["Layers", "3", "Inputs", "Input"] -> 
           NetPort["Layers", "2", "Outputs", "Output"], 
           NetPort["Layers", "4", "Inputs", "Input"] -> 
           NetPort["Layers", "3", "Outputs", "Output"], 
           NetPort["Layers", "5", "Inputs", "Input"] -> 
           NetPort["Layers", "4", "Outputs", "Output"], 
           NetPort["Outputs", "Output"] -> 
           NetPort["Layers", "5", "Outputs", "Output"]}, "Inputs" -> 
         Association["Input" -> NeuralNetworks`TensorT[1, {5}]], "Outputs" -> 
         Association["Output" -> NeuralNetworks`TensorT[1, {3}]]], 
        NeuralNetworks`NetChain`PackagePrivate`opart$$, 
        NeuralNetworks`NetChain`PackagePrivate`part$$, 
        NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null}, 
        DynamicBox[ToBoxes[
          Column[{
            EventHandler[
            NeuralNetworks`NetChain`PackagePrivate`grid$$, "MouseClicked" :> 
             If[
               ListQ[
               NeuralNetworks`NetChain`PackagePrivate`part$$ = 
                MouseAnnotation[]], 
               If[NeuralNetworks`NetChain`PackagePrivate`opart$$ === 
                 NeuralNetworks`NetChain`PackagePrivate`part$$, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = Null; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = Null, 
                 NeuralNetworks`NetChain`PackagePrivate`selected$$ = 
                  Part[NeuralNetworks`NetChain`PackagePrivate`assoc$$, 
                    Apply[
                    Sequence, NeuralNetworks`NetChain`PackagePrivate`part$$]]; 
                 NeuralNetworks`NetChain`PackagePrivate`opart$$ = 
                  NeuralNetworks`NetChain`PackagePrivate`part$$; Null]; 
               Null]], 
            NeuralNetworks`NetChain`PackagePrivate`fmtSelected[
            NeuralNetworks`NetChain`PackagePrivate`selected$$, 
             NeuralNetworks`NetChain`PackagePrivate`part$$]}, Spacings -> 1], 
          StandardForm],
         ImageSizeCache->{278., {70., 78.}},
         TrackedSymbols:>{NeuralNetworks`NetChain`PackagePrivate`selected$$}],
        DynamicModuleValues:>{}],
       BaselinePosition->Automatic], "]"}]}],
    False],
   Deploy],
  LineBreakWithin->False]], "Output",
 CellChangeTimes->{3.680455449271865*^9, 3.680455609634453*^9, 
  3.6804556616942215`*^9, 3.680455808607213*^9, 3.6804562836734796`*^9}]
}, Closed]],

Cell["Check the results with a random input:", "Text",
 CellChangeTimes->{{3.6804559099352446`*^9, 3.6804559195350904`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"result", "[", 
  RowBox[{"{", 
   RowBox[{"7", ",", "9", ",", "4", ",", "1", ",", "7"}], "}"}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "87.93621063232422`", ",", "23.130807876586914`", ",", 
   "1.0178849697113037`"}], "}"}]], "Output",
 CellChangeTimes->{3.680455617294551*^9, 3.6804556649462852`*^9, 
  3.6804558983401575`*^9, 3.680456285506714*^9}]
}, Closed]],

Cell["\<\
The feedforward pass will generate real numbers, but we want integer results \
(exact) in this case:\
\>", "Text",
 CellChangeTimes->{{3.680455933551744*^9, 3.680455965479844*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Round", "[", 
  RowBox[{"result", "[", 
   RowBox[{"{", 
    RowBox[{"7", ",", "9", ",", "4", ",", "1", ",", "7"}], "}"}], "]"}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"88", ",", "23", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.6804556901546907`*^9, 3.6804558999736648`*^9, 
  3.6804562873305874`*^9}]
}, Closed]],

Cell["Expected function value:", "Text",
 CellChangeTimes->{{3.6804559716474867`*^9, 3.6804559780001297`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{"{", 
   RowBox[{"7", ",", "9", ",", "4", ",", "1", ",", "7"}], "}"}], 
  "]"}]], "Input"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"88", ",", "23", ",", "1"}], "}"}]], "Output",
 CellChangeTimes->{3.680455673194396*^9, 3.6804559013401566`*^9, 
  3.680456289090996*^9}]
}, Closed]],

Cell["This one is close to the expected result:", "Text",
 CellChangeTimes->{{3.680455981799775*^9, 3.680456001528022*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Round", "[", 
   RowBox[{"result", "[", 
    RowBox[{"{", 
     RowBox[{"7", ",", "9", ",", "4", ",", "1", ",", "7"}], "}"}], "]"}], 
   "]"}], "===", 
  RowBox[{"f", "[", 
   RowBox[{"{", 
    RowBox[{"7", ",", "9", ",", "4", ",", "1", ",", "7"}], "}"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.68045545109271*^9, 3.680455498491046*^9}}],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{{3.6804554585336065`*^9, 3.6804554991199427`*^9}, 
   3.6804556192521896`*^9, 3.68045567886884*^9, 3.680455902463708*^9, 
   3.680456290883169*^9}]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"EuclideanDistance", "[", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"{", 
     RowBox[{"7", ",", "9", ",", "4", ",", "1", ",", "7"}], "}"}], "]"}], ",", 
   RowBox[{"result", "[", 
    RowBox[{"{", 
     RowBox[{"7", ",", "9", ",", "4", ",", "1", ",", "7"}], "}"}], "]"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.6804555044585705`*^9, 3.6804555078110495`*^9}, {
  3.680456007297147*^9, 3.6804560213744326`*^9}}],

Cell[BoxData["0.1466276104532417`"], "Output",
 CellChangeTimes->{3.68045550839789*^9, 3.680455904356273*^9, 
  3.680456021745084*^9, 3.6804562928771935`*^9}]
}, Closed]],

Cell["\<\
Check some more random examples, better results than before with a larger \
neural network:\
\>", "Text",
 CellChangeTimes->{{3.680456084937105*^9, 3.6804561182578106`*^9}, {
  3.680456304827756*^9, 3.6804563238440514`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Map", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{"#", ",", 
       RowBox[{"Round", "[", 
        RowBox[{"result", "[", "#", "]"}], "]"}], ",", 
       RowBox[{"f", "[", "#", "]"}], ",", 
       RowBox[{
        RowBox[{"Round", "[", 
         RowBox[{"result", "[", "#", "]"}], "]"}], "===", 
        RowBox[{"f", "[", "#", "]"}]}]}], "}"}], "&"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"RandomInteger", "[", 
     RowBox[{"10", ",", 
      RowBox[{"{", 
       RowBox[{"20", ",", "5"}], "}"}]}], "]"}]}], "\[IndentingNewLine]", 
   "]"}], "//", "Grid"}]], "Input",
 CellChangeTimes->{{3.6804560455050793`*^9, 3.6804561012589808`*^9}, {
  3.6804563486288996`*^9, 3.680456361541851*^9}, {3.680456399718341*^9, 
  3.6804563997903986`*^9}}],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{"{", 
      RowBox[{"9", ",", "5", ",", "4", ",", "8", ",", "7"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"34", ",", "23", ",", "64"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"34", ",", "23", ",", "64"}], "}"}], "True"},
    {
     RowBox[{"{", 
      RowBox[{"5", ",", "3", ",", "9", ",", "2", ",", "1"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"14", ",", "82", ",", "4"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"14", ",", "82", ",", "4"}], "}"}], "True"},
    {
     RowBox[{"{", 
      RowBox[{"3", ",", "5", ",", "5", ",", "8", ",", "2"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"28", ",", "27", ",", "64"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"28", ",", "27", ",", "64"}], "}"}], "True"},
    {
     RowBox[{"{", 
      RowBox[{"6", ",", "4", ",", "10", ",", "8", ",", "5"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"22", ",", "105", ",", "64"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"22", ",", "105", ",", "64"}], "}"}], "True"},
    {
     RowBox[{"{", 
      RowBox[{"2", ",", "1", ",", "3", ",", "8", ",", "10"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"3", ",", "19", ",", "64"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"3", ",", "19", ",", "64"}], "}"}], "True"},
    {
     RowBox[{"{", 
      RowBox[{"0", ",", "1", ",", "6", ",", "2", ",", "3"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"1", ",", "39", ",", "4"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"1", ",", "39", ",", "4"}], "}"}], "True"},
    {
     RowBox[{"{", 
      RowBox[{"10", ",", "3", ",", "1", ",", "7", ",", "7"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"19", ",", "8", ",", "49"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"19", ",", "8", ",", "49"}], "}"}], "True"},
    {
     RowBox[{"{", 
      RowBox[{"7", ",", "7", ",", "1", ",", "6", ",", "4"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"56", ",", "5", ",", "36"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"56", ",", "5", ",", "36"}], "}"}], "True"},
    {
     RowBox[{"{", 
      RowBox[{"4", ",", "4", ",", "5", ",", "0", ",", "9"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"20", ",", "34", ",", "0"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"20", ",", "34", ",", "0"}], "}"}], "True"},
    {
     RowBox[{"{", 
      RowBox[{"9", ",", "0", ",", "0", ",", "4", ",", "5"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"9", ",", "5", ",", "16"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"9", ",", "5", ",", "16"}], "}"}], "True"},
    {
     RowBox[{"{", 
      RowBox[{"7", ",", "6", ",", "2", ",", "4", ",", "3"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"43", ",", "7", ",", "16"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"43", ",", "7", ",", "16"}], "}"}], "True"},
    {
     RowBox[{"{", 
      RowBox[{"4", ",", "9", ",", "9", ",", "4", ",", "7"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"85", ",", "88", ",", "16"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"85", ",", "88", ",", "16"}], "}"}], "True"},
    {
     RowBox[{"{", 
      RowBox[{"4", ",", "0", ",", "9", ",", "5", ",", "5"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"4", ",", "86", ",", "25"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"4", ",", "86", ",", "25"}], "}"}], "True"},
    {
     RowBox[{"{", 
      RowBox[{"6", ",", "8", ",", "0", ",", "10", ",", "9"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"70", ",", "9", ",", "100"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"70", ",", "9", ",", "100"}], "}"}], "True"},
    {
     RowBox[{"{", 
      RowBox[{"0", ",", "0", ",", "5", ",", "5", ",", "0"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"0", ",", "25", ",", "25"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"0", ",", "25", ",", "25"}], "}"}], "True"},
    {
     RowBox[{"{", 
      RowBox[{"8", ",", "8", ",", "1", ",", "7", ",", "9"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"72", ",", "10", ",", "49"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"72", ",", "10", ",", "49"}], "}"}], "True"},
    {
     RowBox[{"{", 
      RowBox[{"1", ",", "10", ",", "7", ",", "9", ",", "7"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"101", ",", "56", ",", "81"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"101", ",", "56", ",", "81"}], "}"}], "True"},
    {
     RowBox[{"{", 
      RowBox[{"4", ",", "5", ",", "6", ",", "2", ",", "4"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"29", ",", "40", ",", "4"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"29", ",", "40", ",", "4"}], "}"}], "True"},
    {
     RowBox[{"{", 
      RowBox[{"3", ",", "1", ",", "7", ",", "7", ",", "9"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"4", ",", "58", ",", "49"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"4", ",", "58", ",", "49"}], "}"}], "True"},
    {
     RowBox[{"{", 
      RowBox[{"0", ",", "5", ",", "1", ",", "8", ",", "6"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"25", ",", "7", ",", "64"}], "}"}], 
     RowBox[{"{", 
      RowBox[{"25", ",", "7", ",", "64"}], "}"}], "True"}
   },
   AutoDelete->False,
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",
 CellChangeTimes->{3.6804564004392233`*^9}]
}, Closed]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{958, 1028},
WindowMargins->{{-7, Automatic}, {Automatic, 0}},
Magnification:>1.5 Inherited,
FrontEndVersion->"11.0 for Microsoft Windows (64-bit) (July 28, 2016)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 100, 1, 151, "Title"],
Cell[683, 25, 233, 6, 45, "Input"],
Cell[CellGroupData[{
Cell[941, 35, 142, 2, 70, "Subsection"],
Cell[CellGroupData[{
Cell[1108, 41, 205, 3, 57, "Subsubsection"],
Cell[1316, 46, 190, 4, 45, "Text"],
Cell[CellGroupData[{
Cell[1531, 54, 596, 12, 45, "Input"],
Cell[2130, 68, 5119, 107, 125, "Output"]
}, Closed]],
Cell[7264, 178, 132, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[7421, 183, 213, 4, 45, "Input"],
Cell[7637, 189, 5075, 106, 125, "Output"]
}, Closed]],
Cell[12727, 298, 129, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[12881, 303, 442, 11, 75, "Input"],
Cell[13326, 316, 252, 7, 45, "Output"]
}, Closed]],
Cell[13593, 326, 142, 1, 45, "Text"],
Cell[13738, 329, 483, 13, 45, "Input"],
Cell[14224, 344, 125, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[14374, 349, 157, 3, 45, "Input"],
Cell[14534, 354, 388, 8, 45, "Output"]
}, Closed]],
Cell[14937, 365, 108, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[15070, 370, 262, 5, 45, "Input"],
Cell[15335, 377, 5077, 106, 125, "Output"]
}, Closed]],
Cell[20427, 486, 135, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[20587, 491, 683, 17, 45, "Input"],
Cell[21273, 510, 3069, 61, 473, "Output"]
}, Closed]],
Cell[24357, 574, 111, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[24493, 579, 131, 2, 45, "Input"],
Cell[24627, 583, 92, 1, 45, "Output"]
}, Closed]],
Cell[24734, 587, 166, 3, 45, "Text"],
Cell[CellGroupData[{
Cell[24925, 594, 189, 4, 45, "Input"],
Cell[25117, 600, 20754, 414, 100, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[45908, 1019, 170, 3, 45, "Input"],
Cell[46081, 1024, 234, 5, 45, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[46352, 1034, 171, 3, 45, "Input"],
Cell[46526, 1039, 189, 3, 50, "Output"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[46764, 1048, 209, 3, 57, "Subsubsection"],
Cell[46976, 1053, 224, 4, 45, "Text"],
Cell[47203, 1059, 598, 13, 45, "Input"],
Cell[47804, 1074, 110, 1, 45, "Text"],
Cell[47917, 1077, 208, 5, 45, "Input"],
Cell[48128, 1084, 139, 1, 45, "Text"],
Cell[48270, 1087, 537, 14, 45, "Input"],
Cell[48810, 1103, 124, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[48959, 1108, 189, 4, 45, "Input"],
Cell[49151, 1114, 658, 17, 143, "Output"]
}, Closed]],
Cell[49824, 1134, 191, 4, 45, "Text"],
Cell[50018, 1140, 258, 6, 45, "Input"],
Cell[50279, 1148, 132, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[50436, 1153, 634, 16, 45, "Input"],
Cell[51073, 1171, 2773, 56, 366, "Output"]
}, Closed]],
Cell[53861, 1230, 225, 4, 45, "Text"],
Cell[CellGroupData[{
Cell[54111, 1238, 189, 4, 45, "Input"],
Cell[54303, 1244, 20808, 415, 100, "Output"]
}, Closed]],
Cell[75126, 1662, 16, 0, 45, "Text"],
Cell[75145, 1664, 119, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[75289, 1669, 170, 3, 45, "Input"],
Cell[75462, 1674, 232, 4, 45, "Output"]
}, Closed]],
Cell[75709, 1681, 111, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[75845, 1686, 171, 3, 45, "Input"],
Cell[76019, 1691, 213, 3, 45, "Output"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[76281, 1700, 210, 3, 57, "Subsubsection"],
Cell[76494, 1705, 208, 4, 74, "Text"],
Cell[76705, 1711, 598, 13, 45, "Input"],
Cell[77306, 1726, 104, 1, 45, "Text"],
Cell[77413, 1729, 208, 5, 45, "Input"],
Cell[77624, 1736, 139, 1, 45, "Text"],
Cell[77766, 1739, 633, 16, 45, "Input"],
Cell[78402, 1757, 136, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[78563, 1762, 189, 4, 45, "Input"],
Cell[78755, 1768, 648, 17, 143, "Output"]
}, Closed]],
Cell[79418, 1788, 116, 1, 45, "Text"],
Cell[79537, 1791, 258, 6, 45, "Input"],
Cell[79798, 1799, 132, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[79955, 1804, 682, 16, 45, "Input"],
Cell[80640, 1822, 2868, 57, 366, "Output"]
}, Closed]],
Cell[83523, 1882, 195, 4, 45, "Text"],
Cell[CellGroupData[{
Cell[83743, 1890, 119, 3, 45, "Input"],
Cell[83865, 1895, 20655, 412, 100, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[104557, 2312, 104, 2, 45, "Input"],
Cell[104664, 2316, 185, 4, 45, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[104886, 2325, 103, 2, 45, "Input"],
Cell[104992, 2329, 134, 2, 45, "Output"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[105175, 2337, 262, 4, 57, "Subsubsection"],
Cell[105440, 2343, 474, 11, 76, "Text"],
Cell[105917, 2356, 598, 13, 45, "Input"],
Cell[106518, 2371, 208, 5, 45, "Input"],
Cell[106729, 2378, 117, 1, 45, "Text"],
Cell[106849, 2381, 661, 16, 45, "Input"],
Cell[107513, 2399, 141, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[107679, 2404, 191, 4, 45, "Input"],
Cell[107873, 2410, 659, 17, 143, "Output"]
}, Closed]],
Cell[108547, 2430, 241, 5, 45, "Text"],
Cell[108791, 2437, 258, 6, 45, "Input"],
Cell[109052, 2445, 103, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[109180, 2450, 708, 17, 45, "Input"],
Cell[109891, 2469, 2608, 53, 366, "Output"]
}, Closed]],
Cell[112514, 2525, 190, 4, 45, "Text"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[112753, 2535, 281, 6, 57, "Subsection"],
Cell[113037, 2543, 167, 3, 45, "Text"],
Cell[CellGroupData[{
Cell[113229, 2550, 262, 4, 57, "Subsubsection"],
Cell[113494, 2556, 169, 3, 45, "Text"],
Cell[113666, 2561, 848, 18, 133, "Input"],
Cell[114517, 2581, 208, 5, 45, "Input"],
Cell[114728, 2588, 661, 16, 45, "Input"],
Cell[CellGroupData[{
Cell[115414, 2608, 262, 5, 45, "Input"],
Cell[115679, 2615, 6235, 131, 150, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[121951, 2751, 708, 17, 45, "Input"],
Cell[122662, 2770, 2644, 54, 366, "Output"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[125355, 2830, 262, 4, 57, "Subsubsection"],
Cell[CellGroupData[{
Cell[125642, 2838, 1100, 22, 162, "Input"],
Cell[126745, 2862, 7677, 159, 175, "Output"]
}, Closed]],
Cell[134437, 3024, 208, 5, 45, "Input"],
Cell[134648, 3031, 661, 16, 45, "Input"],
Cell[CellGroupData[{
Cell[135334, 3051, 191, 4, 45, "Input"],
Cell[135528, 3057, 675, 17, 143, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[136240, 3079, 423, 8, 45, "Input"],
Cell[136666, 3089, 7529, 155, 175, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[144232, 3249, 833, 20, 45, "Input"],
Cell[145068, 3271, 6291, 115, 544, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[151396, 3391, 696, 15, 45, "Input"],
Cell[152095, 3408, 8364, 152, 362, "Output"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[160508, 3566, 262, 4, 57, "Subsubsection"],
Cell[160773, 3572, 1296, 26, 219, "Input"],
Cell[162072, 3600, 208, 5, 45, "Input"],
Cell[162283, 3607, 953, 22, 45, "Input"],
Cell[CellGroupData[{
Cell[163261, 3633, 189, 4, 45, "Input"],
Cell[163453, 3639, 844, 23, 143, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[164334, 3667, 423, 8, 45, "Input"],
Cell[164760, 3677, 9825, 202, 226, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[174622, 3884, 1086, 25, 45, "Input"],
Cell[175711, 3911, 12293, 213, 557, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[188041, 4129, 905, 23, 45, "Input"],
Cell[188949, 4154, 16122, 277, 495, "Output"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[205120, 4437, 312, 4, 57, "Subsubsection"],
Cell[205435, 4443, 1450, 28, 219, "Input"],
Cell[206888, 4473, 208, 5, 45, "Input"],
Cell[207099, 4480, 877, 21, 45, "Input"],
Cell[CellGroupData[{
Cell[208001, 4505, 189, 4, 45, "Input"],
Cell[208193, 4511, 827, 25, 143, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[209057, 4541, 471, 8, 45, "Input"],
Cell[209531, 4551, 9906, 203, 226, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[219474, 4759, 1033, 26, 45, "Input"],
Cell[220510, 4787, 18224, 309, 535, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[238771, 5101, 719, 16, 45, "Input"],
Cell[239493, 5119, 17812, 307, 503, "Output"]
}, Closed]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[257366, 5433, 129, 1, 57, "Subsection"],
Cell[CellGroupData[{
Cell[257520, 5438, 363, 5, 57, "Subsubsection"],
Cell[257886, 5445, 1361, 27, 219, "Input"],
Cell[259250, 5474, 208, 5, 45, "Input"],
Cell[259461, 5481, 960, 23, 45, "Input"],
Cell[CellGroupData[{
Cell[260446, 5508, 471, 8, 45, "Input"],
Cell[260920, 5518, 9617, 196, 226, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[270574, 5719, 1013, 21, 45, "Input"],
Cell[271590, 5742, 61209, 1016, 699, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[332836, 6763, 1046, 24, 45, "Input"],
Cell[333885, 6789, 16735, 294, 322, "Output"]
}, Open  ]],
Cell[350635, 7086, 136, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[350796, 7091, 1296, 32, 75, "Input"],
Cell[352095, 7125, 21873, 376, 279, "Output"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[374017, 7507, 419, 6, 46, "Subsubsection"],
Cell[CellGroupData[{
Cell[374461, 7517, 1135, 21, 219, "Input"],
Cell[375599, 7540, 9834, 201, 226, "Output"]
}, Open  ]],
Cell[385448, 7744, 208, 5, 45, "Input"],
Cell[385659, 7751, 1132, 27, 45, "Input"],
Cell[CellGroupData[{
Cell[386816, 7782, 189, 4, 45, "Input"],
Cell[387008, 7788, 1278, 40, 143, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[388323, 7833, 471, 8, 45, "Input"],
Cell[388797, 7843, 9644, 197, 226, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[398478, 8045, 1013, 21, 45, "Input"],
Cell[399494, 8068, 82120, 1358, 487, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[481651, 9431, 1084, 24, 45, "Input"],
Cell[482738, 9457, 46061, 773, 323, "Output"]
}, Closed]],
Cell[528814, 10233, 195, 2, 39, "Text"],
Cell[CellGroupData[{
Cell[529034, 10239, 1303, 30, 75, "Input"],
Cell[530340, 10271, 31137, 523, 279, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[561526, 10800, 467, 6, 58, "Subsubsection"],
Cell[561996, 10808, 1189, 22, 220, "Input"],
Cell[563188, 10832, 208, 5, 45, "Input"],
Cell[563399, 10839, 1296, 30, 75, "Input"],
Cell[CellGroupData[{
Cell[564720, 10873, 191, 4, 45, "Input"],
Cell[564914, 10879, 1081, 34, 146, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[566032, 10918, 471, 8, 45, "Input"],
Cell[566506, 10928, 9666, 197, 224, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[576209, 11130, 1013, 21, 75, "Input"],
Cell[577225, 11153, 183056, 3011, 816, "Output"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[760330, 14170, 467, 6, 58, "Subsubsection"],
Cell[760800, 14178, 1389, 25, 220, "Input"],
Cell[762192, 14205, 208, 5, 45, "Input"],
Cell[762403, 14212, 1231, 29, 75, "Input"],
Cell[CellGroupData[{
Cell[763659, 14245, 189, 4, 45, "Input"],
Cell[763851, 14251, 1063, 34, 146, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[764951, 14290, 471, 8, 45, "Input"],
Cell[765425, 14300, 9741, 198, 224, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[775203, 14503, 1013, 21, 75, "Input"],
Cell[776219, 14526, 163083, 2685, 613, "Output"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[939363, 17218, 187, 2, 72, "Subsection"],
Cell[CellGroupData[{
Cell[939575, 17224, 213, 3, 58, "Subsubsection"],
Cell[CellGroupData[{
Cell[939813, 17231, 613, 15, 162, "Input"],
Cell[940429, 17248, 6972, 143, 175, "Output"]
}, Closed]],
Cell[947416, 17394, 112, 3, 34, "Input"],
Cell[947531, 17399, 433, 12, 45, "Input"],
Cell[CellGroupData[{
Cell[947989, 17415, 161, 3, 45, "Input"],
Cell[948153, 17420, 749, 23, 45, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[948939, 17448, 186, 4, 34, "Input"],
Cell[949128, 17454, 6859, 141, 175, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[956024, 17600, 214, 5, 34, "Input"],
Cell[956241, 17607, 153, 3, 45, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[956431, 17615, 216, 5, 34, "Input"],
Cell[956650, 17622, 127, 3, 45, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[956814, 17630, 216, 5, 34, "Input"],
Cell[957033, 17637, 151, 3, 45, "Output"]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[957233, 17646, 274, 5, 58, "Subsubsection"],
Cell[957510, 17653, 112, 1, 45, "Text"],
Cell[957625, 17656, 1072, 25, 248, "Input"],
Cell[958700, 17683, 124, 1, 45, "Text"],
Cell[958827, 17686, 112, 3, 45, "Input"],
Cell[958942, 17691, 197, 4, 45, "Text"],
Cell[959142, 17697, 507, 13, 45, "Input"],
Cell[959652, 17712, 129, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[959806, 17717, 349, 7, 45, "Input"],
Cell[960158, 17726, 9228, 188, 226, "Output"]
}, Closed]],
Cell[969401, 17917, 134, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[969560, 17922, 969, 25, 133, "Input"],
Cell[970532, 17949, 5777, 123, 270, "Output"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[976358, 18078, 319, 5, 47, "Subsubsection"],
Cell[976680, 18085, 112, 1, 45, "Text"],
Cell[976795, 18088, 1122, 26, 248, "Input"],
Cell[977920, 18116, 124, 1, 45, "Text"],
Cell[978047, 18119, 112, 3, 45, "Input"],
Cell[978162, 18124, 197, 4, 45, "Text"],
Cell[978362, 18130, 588, 15, 45, "Input"],
Cell[978953, 18147, 129, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[979107, 18152, 349, 7, 45, "Input"],
Cell[979459, 18161, 9276, 189, 226, "Output"]
}, Closed]],
Cell[988750, 18353, 134, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[988909, 18358, 1126, 28, 133, "Input"],
Cell[990038, 18388, 3615, 99, 270, "Output"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[993702, 18493, 120, 1, 47, "Subsubsection"],
Cell[993825, 18496, 170, 3, 45, "Text"],
Cell[993998, 18501, 869, 26, 75, "Input"],
Cell[994870, 18529, 93, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[994988, 18534, 201, 5, 45, "Input"],
Cell[995192, 18541, 224, 4, 45, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[995453, 18550, 201, 5, 45, "Input"],
Cell[995657, 18557, 181, 4, 45, "Output"]
}, Closed]],
Cell[995853, 18564, 166, 3, 38, "Text"],
Cell[996022, 18569, 865, 20, 220, "Input"],
Cell[996890, 18591, 134, 1, 45, "Text"],
Cell[997027, 18594, 112, 3, 45, "Input"],
Cell[997142, 18599, 140, 1, 45, "Text"],
Cell[997285, 18602, 506, 15, 45, "Input"],
Cell[997794, 18619, 108, 1, 45, "Text"],
Cell[CellGroupData[{
Cell[997927, 18624, 188, 4, 45, "Input"],
Cell[998118, 18630, 2333, 78, 270, "Output"]
}, Closed]],
Cell[1000466, 18711, 131, 1, 38, "Text"],
Cell[CellGroupData[{
Cell[1000622, 18716, 294, 6, 45, "Input"],
Cell[1000919, 18724, 9228, 188, 226, "Output"]
}, Closed]],
Cell[1010162, 18915, 124, 1, 38, "Text"],
Cell[CellGroupData[{
Cell[1010311, 18920, 139, 4, 45, "Input"],
Cell[1010453, 18926, 258, 6, 45, "Output"]
}, Closed]],
Cell[1010726, 18935, 190, 4, 67, "Text"],
Cell[CellGroupData[{
Cell[1010941, 18943, 173, 5, 45, "Input"],
Cell[1011117, 18950, 180, 4, 45, "Output"]
}, Closed]],
Cell[1011312, 18957, 110, 1, 38, "Text"],
Cell[CellGroupData[{
Cell[1011447, 18962, 134, 4, 45, "Input"],
Cell[1011584, 18968, 176, 4, 45, "Output"]
}, Closed]],
Cell[1011775, 18975, 123, 1, 38, "Text"],
Cell[CellGroupData[{
Cell[1011923, 18980, 378, 11, 45, "Input"],
Cell[1012304, 18993, 198, 3, 45, "Output"]
}, Closed]],
Cell[CellGroupData[{
Cell[1012539, 19001, 442, 11, 34, "Input"],
Cell[1012984, 19014, 158, 2, 45, "Output"]
}, Closed]],
Cell[1013157, 19019, 234, 5, 67, "Text"],
Cell[CellGroupData[{
Cell[1013416, 19028, 826, 22, 133, "Input"],
Cell[1014245, 19052, 5059, 146, 524, "Output"]
}, Closed]]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

